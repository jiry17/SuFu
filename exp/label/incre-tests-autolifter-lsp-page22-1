
Inductive List;

Inductive CartTree;

Inductive CartPath;

l2cart = \order: Int -> Int -> Bool. 
    let insert = (\w: Int. 
    fix (
    \insert: CartTree -> CartPath -> CartPath. \tmp: CartTree. \p: CartPath. 
    match p with
      consNode {dnode, rem} -> 
        match dnode with
          node {l, v, r} -> if (order v w) then consNode {node {tmp, w, leaf Unit}, p}
            else insert (node {l, v, tmp}) rem
        end

    | _ -> consNode {node {tmp, w, leaf Unit}, nilNode Unit}
    end
) (leaf Unit)) in 
        let merge = (fix (
        \f: CartTree -> CartPath -> CartTree. \pre: CartTree. \p: CartPath. 
        match p with
          consNode {dnode, rem} -> 
            match dnode with
              node {l, v, r} -> f (node {l, v, pre}) rem
            end

        | _ -> pre
        end
    ) (leaf Unit)) in 
            fix (
            \f: CartPath -> List -> CartTree. \p: CartPath. \l: List. 
            match l with
              cons {h, t} -> f (insert h p) t
            | nil _ -> merge p
            end
        ) (nilNode Unit);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

cart2l = fix (
    \f: CartTree -> Compress List. \t: CartTree. 
    match t with
      node {leaf _, w, leaf _} -> 
        let tmp1 = (cons {w, nil Unit}) in 
            align (label tmp1 ) 
    | node {l, w, leaf _} -> 
        let lres = (f l) in 
            let tmp2 = (cons {w, nil Unit}) in 
                align (label (concat (unlabel lres ) tmp2) ) 
    | node {leaf _, w, r} -> 
        let rres = (f r) in 
            let tmp3 = (concat (cons {w, nil Unit})) in 
                align (label (tmp3 (unlabel rres )) ) 
    | node {l, w, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                let tmp4 = (concat (cons {w, nil Unit})) in 
                    align (label (concat (unlabel lres ) (tmp4 (unlabel rres ))) ) 
    | _ -> 
        let tmp5 = (nil Unit) in 
            align (label tmp5 ) 
    end
);

fold_list = \f: Int -> List -> List. \x: List. \w0: List. 
    fix (
    \g: List -> List. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

append = \x: List. \y: Int. 
    fold_list (\a: Int. \b: List. 
    cons {a, b}) x (cons {y, nil Unit});

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

head = \default: Int. \l: List. 
    match l with
      cons {h, t} -> h
    | nil _ -> default
    end
;

minimum = \x: List. 
    fold (\a: Int. \b: Int. 
    if (< a b) then a
    else b) x (head 0 x);

maximum = \x: List. 
    fold (\a: Int. \b: Int. 
    if (> a b) then a
    else b) x (head 0 x);

raw_pre = \b: List -> Bool. 
    fix (
    \f: List -> Int -> List -> Int. \pre: List. \len: Int. \rem: List. 
    let sub_res = (match rem with
      cons {h, t} -> f (append pre h) (+ len 1) t
    | nil _ -> 0
    end
) in 
        if (b pre) then max len sub_res
        else sub_res) (nil Unit) 0;

raw_lsp = \b: List -> Bool. 
    fix (
    \f: List -> Int. \l: List. 
    match l with
      cons {h, t} -> max (raw_pre b l) (f t)
    | nil _ -> 0
    end
);

lsp = \r: Int -> Int -> Bool. \b: List -> Bool. \x: List. 
    let t = (l2cart r x) in 
        let tmp6 = (raw_lsp b) in 
            let tmp7 = (cart2l t) in 
                align (tmp6 (unlabel tmp7 )) ;

last = \default: Int. 
    fix (
    \f: List -> Int. \l: List. 
    match l with
      cons {h, nil _} -> h
    | cons {h, t} -> f t
    | nil _ -> default
    end
);

isval = \l: List. 
    match l with
      nil _ -> true
    | _ -> < (+ (maximum l) (minimum l)) (length l)
    end
;

order = \a: Int. \b: Int. 
    < b a;

run = lsp order isval;

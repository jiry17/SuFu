
Inductive SList;

Inductive CList;

cat_list = fix (
    \f: SList -> SList -> SList. \xs: SList. \ys: SList. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> Compress SList. \xs: CList. 
    match xs with
      single a -> 
        let tmp1 = (elt a) in 
            align (label tmp1 ) 
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                align (label (cat_list (unlabel tmp2 ) (unlabel tmp3 )) ) 
    end
);

spec = \xs: SList. 
    (fix (
    \f: SList -> {Int, Int, Bool}. \xs: SList. 
    match xs with
      elt a -> {a, a, true}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {hd, result.2, and result.3 (< hd result.1)}
    end
) xs).3;

main = \xs: CList. 
    let tmp4 = (repr xs) in 
        align (spec (unlabel tmp4 )) ;

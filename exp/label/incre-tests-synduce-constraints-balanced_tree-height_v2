
Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

height = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {w, l, r} -> + 1 (max (f l) (f r))
    end
);

balanced = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      nil _ -> true
    | node {w, l, r} -> and (and (== (height l) (height r)) (f l)) (f r)
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            align (label (node {w, unlabel tmp2 , r}) ) 
    end
);

main = \t: Tree. 
    if (balanced t) then let tmp3 = (target t) in 
        align (height (unlabel tmp3 )) 
    else 0;


Inductive List;

div2 = \x: Int. 
    / x 2;

from = \a: Int. \b: Int. 
    fix (
    \f: Int -> Int -> Compress List. \now: Int. \r: Int. 
    if (> now r) then let tmp1 = (nil Unit) in 
        align (label tmp1 ) 
    else let tmp2 = (f (+ now 1) r) in 
        align (label (cons {now, unlabel tmp2 }) ) ) a b;

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

main = \a: Int. \b: Int. 
    if (<= a b) then let tmp3 = (from a b) in 
        align (sum (unlabel tmp3 )) 
    else 0;

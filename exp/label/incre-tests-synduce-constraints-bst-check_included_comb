
Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf {a, b} -> a
    | node {a, b, l, r} -> min a (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf {a, b} -> a
    | node {a, b, l, r} -> max a (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf {a, b} -> < a b
    | node {a, b, l, r} -> and (< a b) (and (and (> a (tmax l)) (< a (tmin r))) (and (f l) (f r)))
    end
);

@Input lo = Int;

@Input hi = Int;

inside = \a: Int. \b: Int. 
    and (< lo a) (< b hi);

spec = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf {a, b} -> inside a b
    | node {a, b, l, r} -> or (or (inside a b) (f l)) (f r)
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf {a, b} -> 
        let tmp1 = (leaf {a, b}) in 
            align (label tmp1 ) 
    | node {a, b, l, r} -> if (and (> b hi) (< a lo)) then let tmp2 = (f r) in 
            align (label (node {a, b, l, unlabel tmp2 }) ) 
        else let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                align (label (node {a, b, unlabel tmp3 , unlabel tmp4 }) ) 
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp5 = (target t) in 
        align (spec (unlabel tmp5 )) 
    else false;


Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \t: BTree. 
    (fix (
    \f: ({Int, Int}) -> BTree -> {Int, Int}. \s: {Int, Int}. \t: BTree. 
    match t with
      empty _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ result.1 a, max result.2 (+ result.1 a)} r
    end
) {0, 0} t).2;

repr = fix (
    \f: Zipper -> Compress BTree. \z: Zipper. 
    match z with
      top _ -> 
        let tmp1 = (empty Unit) in 
            align (label tmp1 ) 
    | left {w, tree, zz} -> 
        let info = (spec tree) in 
            let tmp2 = (f zz) in 
                align (label (node {w, tree, unlabel tmp2 }) ) 
    | right {w, tree, zz} -> 
        let info = (spec tree) in 
            let tmp3 = (f zz) in 
                align (label (node {w, unlabel tmp3 , tree}) ) 
    end
);

main = \z: Zipper. 
    let tmp4 = (repr z) in 
        align (spec (unlabel tmp4 )) ;


Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: Int -> Tree -> Int. \w: Int. \t: Tree. 
    match t with
      nil _ -> w
    | node {a, l, r} -> max (f (+ w a) l) (f (+ w a) r)
    end
) 0;

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        align (spec (unlabel tmp4 )) ;


Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

fold_list = \f: Int -> List -> List. \x: List. \w0: List. 
    fix (
    \g: List -> List. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

rev = \x: List. 
    fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> f t (cons {h, y})
    | _ -> y
    end
) x (nil Unit);

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

inf = 100;

lsp = \b: List -> Bool. \x: List. 
    (fix (
    \f: List -> {Compress List, Int}. \x: List. 
    match x with
      cons {h, t} -> 
        let res = (f t) in 
            let ms = res.2 in 
                let x = res.1 in 
                    if (align (b (cons {h, unlabel x })) ) then {align (label (cons {h, unlabel x }) ) , max ms (+ 1 (align (length (unlabel x )) ))}
                    else if (b (cons {h, nil Unit})) then {let tmp1 = (cons {h, nil Unit}) in 
                        align (label tmp1 ) , max ms 1}
                    else {let tmp2 = (nil Unit) in 
                        align (label tmp2 ) , ms}
    | _ -> {let tmp3 = (nil Unit) in 
            align (label tmp3 ) , 0}
    end
) x).2;

min = \x: Int. \y: Int. 
    if (< x y) then x
    else y;

minimum = \x: List. 
    fold (\h: Int. \t: Int. 
    min h t) x inf;

maximum = \x: List. 
    fold (\h: Int. \t: Int. 
    max h t) x (- 0 inf);

cond1 = \x: List. 
    match x with
      cons {h, t} -> not (> h (minimum t))
    | _ -> true
    end
;

@Input gap = Int;

cond2 = \x: List. 
    let ma = (maximum x) in 
        let mi = (minimum x) in 
            not (< (+ mi gap) ma);

isval = \x: List. 
    and (cond1 x) (cond2 x);

run = lsp isval;


Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

@Input lo = Int;

@Input hi = Int;

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf w -> 
        let tmp1 = (leaf w) in 
            align (label tmp1 ) 
    | node {w, l, r} -> if (>= w hi) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {w, unlabel tmp2 , unlabel tmp3 }) ) 
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                align (label (node {w, unlabel tmp4 , unlabel tmp5 }) ) 
    end
);

spec = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> and (< lo w) (< w hi)
    | node {w, l, r} -> or (or (and (< lo w) (< w hi)) (f l)) (f r)
    end
);

main = \t: Tree. 
    if (< lo hi) then let tmp6 = (repr t) in 
        align (spec (unlabel tmp6 )) 
    else false;

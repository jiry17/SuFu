
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        align (label xs ) 
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            align (v (unlabel tmp2 )) ;

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

max_sum_between_ones = fix (
    \f: Int -> Int -> List -> Int. \cs: Int. \pre: Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let cs = (if (< pre h) then + cs 1
        else 0) in 
            max cs (f cs h t)
    end
) 0 0;

main = single_pass max_sum_between_ones;

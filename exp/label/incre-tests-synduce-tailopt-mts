
Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let r = (f t) in 
            {+ h r.1, max r.2 (+ h r.1)}
    end
) xs).2;

snoc = fix (
    \f: List -> Int -> List. \xs: List. \w: Int. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t w}
    end
);

repr = fix (
    \f: Compress List -> List -> Compress List. \pre: Compress List. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (align (label (snoc (unlabel pre ) h) ) ) t
    end
) (let tmp1 = (nil Unit) in 
        align (label tmp1 ) );

main = \xs: List. 
    let tmp2 = (repr xs) in 
        align (spec (unlabel tmp2 )) ;

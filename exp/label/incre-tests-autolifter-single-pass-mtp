
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        align (label xs ) 
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            align (v (unlabel tmp2 )) ;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mtp = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \l: List. 
    match l with
      nil _ -> {1, 1}
    | cons {h, t} -> 
        let res = (f t) in 
            let tot = (* h res.2) in 
                {max res.1 tot, tot}
    end
) xs).1;

main = single_pass mtp;


Inductive Tree;

spec = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Bool}. \t: Tree. 
    match t with
      leaf a -> {a, true}
    | node {a, l, r} -> 
        let r1 = (f l) in 
            let r2 = (f r) in 
                {a, and (and (and (< r1.1 a) (< a r2.1)) r1.2) r2.2}
    end
) t).2;

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf a -> 
        let tmp1 = (leaf a) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        align (spec (unlabel tmp4 )) ;


List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 Zipper :: Zipper. <zip {List,List}>
zip : {List,List} -> Zipper'. <zip {List,List}>
concat : List -> List -> List
rev : List -> List'. <nil Unit | cons {Int,List'}>
sum : List -> Int
repr : Zipper -> List
target : Zipper -> Zipper'. <zip {List,List}>
main : Zipper -> Int

size: 117
compress-num: 1
label-num: 4
rewrite-size: 8
0.013762
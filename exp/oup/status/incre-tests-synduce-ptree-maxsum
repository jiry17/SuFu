
Tree :: Tree. <telt Int | tnode {Int,Tree,Tree}>
 telt : Int -> Tree'. <telt Int | tnode {Int,Tree',Tree'}>
 tnode : {Int,Tree,Tree} ->
         Tree'. <telt Int | tnode {Int,Tree',Tree'}>
 PTree :: PTree. <pelt Int | pnode {Int,
                                   List. <elt PTree | cons {
                                   PTree,List}>}>
pelt : Int ->
       PTree'. <pelt Int | pnode {Int,
                                  List. <elt PTree' | cons {
                                  PTree',List}>}>
pnode : {Int,List. <elt PTree | cons {PTree,List}>} ->
        PTree'. <pelt Int | pnode {Int,
                                   List. <elt PTree' | cons {
                                   PTree',List}>}>
List :: List. <elt PTree | cons {PTree,List}>
elt : PTree -> List'. <elt PTree | cons {PTree,List'}>
cons : {PTree,List} -> List'. <elt PTree | cons {PTree,List'}>
max : Int -> Int -> Int
repr : Tree ->
       PTree'. <pelt Int | pnode {Int,
                                  List'. <elt PTree' | cons {
                                  PTree',List'}>}>
spec : PTree -> Int
target : Tree -> Tree
main : Tree -> Int

size: 182
compress-num: 2
label-num: 14
rewrite-size: 28
0.022031
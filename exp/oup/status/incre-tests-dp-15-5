
cost_list : {Int, Int, Int, Int, Int, Int}
Op :: Op. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
copy : Unit ->
       Op'. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
replace : Unit ->
          Op'. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
delete : Unit ->
         Op'. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
insert : Unit ->
         Op'. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
rotate : Unit ->
         Op'. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
kill : Unit ->
       Op'. <copy Unit | replace Unit | delete Unit | insert Unit | rotate Unit | kill Unit>
OpList :: OpList. <onil Unit | ocons {Op,OpList}>
onil : Unit -> OpList'. <onil Unit | ocons {Op,OpList'}>
ocons : {Op,OpList} -> OpList'. <onil Unit | ocons {Op,OpList'}>
Plan :: OpList
PlanList :: PlanList. <pnil Unit | pcons {Plan,PlanList}>
pnil : Unit -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
pcons : {Plan,PlanList} ->
        PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
get_cost : Op -> Int
extend : Op -> PlanList -> PlanList
merge : PlanList -> PlanList -> PlanList
size_up_2 : List -> Int
unfold : List -> {Int, List}
generate : List ->
           List -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
min : Int -> Int -> Int
get_best : PlanList -> Int
main : List -> List -> Int

size: 435
compress-num: 1
label-num: 9
rewrite-size: 15
0.051394

List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 CartTree :: CartTree. <node {CartTree,Int,CartTree} | leaf Unit>
node : {CartTree,Int,CartTree} ->
       CartTree'. <node {CartTree',Int,CartTree'} | leaf Unit>
leaf : Unit ->
       CartTree'. <node {CartTree',Int,CartTree'} | leaf Unit>
CartPath :: CartPath. <consNode {CartTree,CartPath} | nilNode Unit>
consNode : {CartTree,CartPath} ->
           CartPath'. <consNode {CartTree,CartPath'} | nilNode Unit>
nilNode : Unit ->
          CartPath'. <consNode {CartTree,CartPath'} | nilNode Unit>
l2cart : (Int->Int->Bool) -> List -> CartTree
concat : List -> List -> List'. <cons {Int,List'} | nil Unit>
cart2l : CartTree -> List'. <cons {Int,List'} | nil Unit>
fold_list : (Int->List->List) -> List -> List -> List
max : Int -> Int -> Int
append : List -> Int -> List
fold : (Int->Int->Int) -> List -> Int -> Int
length : List -> Int
sum : List -> Int
head : Int -> List -> Int
minimum : List -> Int
maximum : List -> Int
raw_pre : (List->Bool) -> List -> Int
raw_suf : (List->Bool) -> List -> Int
raw_lsp : (List->Bool) -> List -> Int
lsp : (Int->Int->Bool) -> (List->Bool) -> List -> Int
last : Int -> List -> Int
isval : List -> Bool
order : Int -> Int -> Bool
run : List -> Int

size: 605
compress-num: 1
label-num: 16
rewrite-size: 30
0.056999

List :: List. <nil Unit | cons {{Int,Int},List}>
 nil : Unit -> List'. <nil Unit | cons {{Int,Int},List'}>
 cons : {{Int,Int},List} ->
        List'. <nil Unit | cons {{Int,Int},List'}>
 CList :: CList. <cnil Unit | single {Int,Int} | concat {CList,
                                                        CList}>
cnil : Unit ->
       CList'. <cnil Unit | single {Int,Int} | concat {CList',
                                                       CList'}>
single : {Int,Int} ->
         CList'. <cnil Unit | single {Int,Int} | concat {CList',
                                                         CList'}>
concat : {CList,CList} ->
         CList'. <cnil Unit | single {Int,Int} | concat {CList',
                                                         CList'}>
cat : List -> List -> List
repr : CList -> List'. <nil Unit | cons {{Int,Int},List'}>
x : Int
spec : List -> Int
main : CList -> Int

size: 106
compress-num: 1
label-num: 10
rewrite-size: 16
0.013866
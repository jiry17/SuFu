
Nat :: Nat. <z Unit | s Nat>
z : Unit -> Nat'. <z Unit | s Nat'>
s : Nat -> Nat'. <z Unit | s Nat'>
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
CList :: CList. <cnil Unit | ccons {Nat,Int,CList}>
cnil : Unit -> CList'. <cnil Unit | ccons {Nat,Int,CList'}>
ccons : {Nat,Int,CList} ->
        CList'. <cnil Unit | ccons {Nat,Int,CList'}>
repeat : Int -> List -> Nat -> List
value : Nat -> Int
spec : List -> Int
repr : CList -> List'. <nil Unit | cons {Int,List'}>
main : CList -> Int

size: 102
compress-num: 1
label-num: 7
rewrite-size: 13
0.011736

Tree :: Tree. <leaf Int | node {Int,Tree,Tree}>
 leaf : Int -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <leaf Int | node {Int,Tree',Tree'}>
 List :: List. <elt Int | cons {Int,List}>
elt : Int -> List'. <elt Int | cons {Int,List'}>
cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
min : Int -> Int -> Int
max : Int -> Int -> Int
tmin : Tree -> Int
tmax : Tree -> Int
is_bst : Tree -> Bool
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : Tree -> List'. <elt Int | cons {Int,List'}>
w : Int
spec : List -> Bool
target : Tree -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
main : Tree -> Bool


Inductive Tree;

Inductive List;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | elt w -> cons {w, y}
    end
);

repr = fix (
    \f: Tree -> List. \t: Tree. 
    match t with
      leaf x -> elt x
    | node {x, l, r} -> cat (f l) (cons {x, f r})
    end
);

@Input w = Int;

spec = fix (
    \f: List -> Bool. \t: List. 
    match t with
      elt x -> == x w
    | cons {h, t} -> or (== w h) (f t)
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf x -> 
        let tmp1 = (leaf x) in 
            align (label tmp1 ) 
    | node {a, l, r} -> if (< w a) then let tmp2 = (f l) in 
            align (label (node {a, unlabel tmp2 , r}) ) 
        else let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                align (label (node {a, unlabel tmp3 , unlabel tmp4 }) ) 
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp5 = (target t) in 
        align (spec (repr (unlabel tmp5 ))) 
    else false;
align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  x: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,r})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@2 create@0 node ({a,unlabel tmp3,unlabel tmp4})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align term #3: Bool
align@3 spec (repr (unlabel tmp5))
  tmp5: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
Components for compress:
  min [Int,Int] -> Int 2
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 3

Components for align:
  min [Int,Int] -> Int 2
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  repr [Tree. <leaf Int | node {Int,Tree,Tree}>] -> List. <elt Int | cons {Int,List}> 8
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 3
  spec [List. <elt Int | cons {Int,List}>] -> Bool 10
  tmax [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 5
  tmin [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 4
  is_bst [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Bool 6
  cat [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 7

Components for comb:
  min [Int,Int] -> Int 2
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 3

align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  x: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,r})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@2 create@0 node ({a,unlabel tmp3,unlabel tmp4})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align term #3: Bool
align@3 spec (repr (unlabel tmp5))
  tmp5: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param1
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param2
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param3
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param2
  Param5
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int
  Param3
  Param6
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
num = 3
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param0
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int]([Int@0,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int [Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
  tmax([Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  tmin([Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Param1]@Int
  Param1
  Int@0
  +([Int@0,Param1]@Int [Int@0,Param1]@Int)
  -([Int@0,Param1]@Int [Int@0,Param1]@Int)
  ite([Int@0,Param1]@Bool [Int@0,Param1]@Int [Int@0,Param1]@Int)
  min([Int@0,Param1]@Int [Int@0,Param1]@Int)
  max([Int@0,Param1]@Int [Int@0,Param1]@Int)
  tmax([Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  tmin([Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2,Param1]@Int
  Param1
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  -([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  ite([Int@0,Int@1,Int@2,Param1]@Bool [Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  min([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  max([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  tmax([Int@0,Int@1,Int@2,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  tmin([Int@0,Int@1,Int@2,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Bool@0,Bool@1,Int@0,Param1]@Int
  Param1
  Int@0
  +([Bool@0,Bool@1,Int@0,Param1]@Int [Bool@0,Bool@1,Int@0,Param1]@Int)
  -([Bool@0,Bool@1,Int@0,Param1]@Int [Bool@0,Bool@1,Int@0,Param1]@Int)
  ite([Bool@0,Bool@1,Int@0,Param1]@Bool [Bool@0,Bool@1,Int@0,Param1]@Int [Bool@0,Bool@1,Int@0,Param1]@Int)
  min([Bool@0,Bool@1,Int@0,Param1]@Int [Bool@0,Bool@1,Int@0,Param1]@Int)
  max([Bool@0,Bool@1,Int@0,Param1]@Int [Bool@0,Bool@1,Int@0,Param1]@Int)
  tmax([Bool@0,Bool@1,Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  tmin([Bool@0,Bool@1,Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Bool@0,Bool@1,Int@0,Param1]@Bool
  Bool@0
  Bool@1
  spec([Bool@0,Bool@1,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
  is_bst([Bool@0,Bool@1,Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0,Param1]@Bool
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Bool]([Int@0,Param1]@Bool [Bool@0,Bool@1,Int@0,Param1]@Bool [Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Param0,Param1]@List. <elt Int | cons {Int,List}>)
  is_bst([Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Param1]@Bool
  spec([Int@0,Param1]@List. <elt Int | cons {Int,List}>)
  is_bst([Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2,Param1]@Bool
  spec([Int@0,Int@1,Int@2,Param1]@List. <elt Int | cons {Int,List}>)
  is_bst([Int@0,Int@1,Int@2,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Param1]@Int)
node: [Int@0,Int@1,Int@2,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Int@1,Int@2,Param1]@Int)
node: [Bool@0,Bool@1,Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Bool@0,Bool@1,Int@0,Param1]@Int)
node: [Param0,Param1]@List. <elt Int | cons {Int,List}>
  repr([Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  elt([Param0,Param1]@Int)
  cat([Param0,Param1]@List. <elt Int | cons {Int,List}> [Param0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@List. <elt Int | cons {Int,List}>
  repr([Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  elt([Int@0,Param1]@Int)
  cat([Int@0,Param1]@List. <elt Int | cons {Int,List}> [Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2,Param1]@List. <elt Int | cons {Int,List}>
  repr([Int@0,Int@1,Int@2,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  elt([Int@0,Int@1,Int@2,Param1]@Int)
  cat([Int@0,Int@1,Int@2,Param1]@List. <elt Int | cons {Int,List}> [Int@0,Int@1,Int@2,Param1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0,Param1]@List. <elt Int | cons {Int,List}>
  repr([Bool@0,Bool@1,Int@0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  elt([Bool@0,Bool@1,Int@0,Param1]@Int)
  cat([Bool@0,Bool@1,Int@0,Param1]@List. <elt Int | cons {Int,List}> [Bool@0,Bool@1,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Param0,Param1]@Tree. <leaf Int | node {Int,Tree,Tree}>
  Param0
  leaf([Param0,Param1]@Int)





















  [0] spec(repr(Param0))
  [1] Param1
  [0] -(Param1,Param3)
  [1] Param3
  [0] spec(repr(Param0))
  [1] Param1
  [0] Param2 -> spec(repr(Param0))
  [1] Param2 -> Param1
  [0] spec(repr(Param0))
  [1] Param1
  [0] Param3
  [1] Param2 -> spec(repr(Param0))
  [2] Param2 -> Param1
  [3] Param5 -> spec(repr(Param0))
  [4] Param5 -> Param1
  [] null
  [0] Param0 -> spec(repr(Param0))
  [1] Param0 -> Param1
compress #0: {Bool,Int}
pass #0: 
let c0 = (- x w) in 
    {== c0 0, w}
pass #1: 
{tmp2.1, tmp2.2}
pass #2: 
{or (== a tmp4.2) tmp4.1, tmp4.2}
pass #3: 
tmp5.1

Inductive Tree;

Inductive List;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | elt w -> cons {w, y}
    end
);

repr = fix (
    \f: Tree -> List. \t: Tree. 
    match t with
      leaf x -> elt x
    | node {x, l, r} -> cat (f l) (cons {x, f r})
    end
);

@Input w = Int;

spec = fix (
    \f: List -> Bool. \t: List. 
    match t with
      elt x -> == x w
    | cons {h, t} -> or (== w h) (f t)
    end
);

target = fix (
    \f: Tree -> {Bool, Int}. \t: Tree. 
    match t with
      leaf x -> 
        let c0 = (- x w) in 
            {== c0 0, w}
    | node {a, l, r} -> if (< w a) then let tmp2 = (f l) in 
            {tmp2.1, tmp2.2}
        else let tmp4 = (f r) in 
            {or (== a tmp4.2) tmp4.1, tmp4.2}
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp5 = (target t) in 
        tmp5.1
    else false;
syn-comb: 0.431256
collect: 31.8929
label: 0.017844
extend-component: 0.006281
execute: 0.508816
syn-align: 32.4814
comb-size: 34
align-size: 7
extract-size: 13
32.9407
Success


List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 NList :: NList. <line List | ncons {List,NList}>
line : List -> NList'. <line List | ncons {List,NList'}>
ncons : {List,NList} -> NList'. <line List | ncons {List,NList'}>
CNList :: CNList. <sglt List | cat {CNList,CNList}>
sglt : List -> CNList'. <sglt List | cat {CNList',CNList'}>
cat : {CNList,CNList} ->
      CNList'. <sglt List | cat {CNList',CNList'}>
cton : CNList -> NList'. <line List | ncons {List,NList'}>
max : Int -> Int -> Int
min : Int -> Int -> Int
range : List -> {Int, Int}
spec : NList -> {Int, Int}
target : CNList -> CNList
main : CNList -> {Int, Int}


Inductive List;

Inductive NList;

Inductive CNList;

cton = fix (
    \f: CNList -> NList. 
    let dec = (fix (
    \g: CNList -> CNList -> NList. \l: CNList. \c: CNList. 
    match c with
      sglt x -> ncons {x, f l}
    | cat {x, y} -> g (cat {y, l}) x
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> line x
        | cat {x, y} -> dec y x
        end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

range = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt w -> {w, w}
    | cons {h, t} -> 
        let res = (f t) in 
            {min h res.1, max h res.2}
    end
);

spec = fix (
    \f: NList -> {Int, Int}. \xs: NList. 
    match xs with
      line a -> range a
    | ncons {h, t} -> 
        let rh = (range h) in 
            let res = (f t) in 
                {min rh.1 res.1, max rh.2 res.2}
    end
);

target = fix (
    \f: CNList -> Compress CNList. \c: CNList. 
    match c with
      sglt x -> 
        let info = (range x) in 
            align (label c ) 
    | cat {l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                align (label (cat {unlabel tmp1 , unlabel tmp2 }) ) 
    end
);

main = \c: CNList. 
    let tmp3 = (target c) in 
        align (spec (cton (unlabel tmp3 ))) ;
align term #0: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align@0 create@0 c
  x: List. <elt Int | cons {Int,List}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  info: {Int,Int}
align term #1: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align@1 create@0 cat ({unlabel tmp1,unlabel tmp2})
  l: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  r: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp2: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp1: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align term #2: {Int,Int}
align@2 spec (cton (unlabel tmp3))
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp3: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
Components for compress:
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> * CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  sglt [List. <elt Int | cons {Int,List}>] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  min [Int,Int] -> Int 5
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 4

Components for align:
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  range [List. <elt Int | cons {Int,List}>] -> (Int * Int) 6
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> * CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  sglt [List. <elt Int | cons {Int,List}>] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  cton [CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 3
  min [Int,Int] -> Int 5
  spec [NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>] -> (Int * Int) 7
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 4

Components for comb:
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> * CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  sglt [List. <elt Int | cons {Int,List}>] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  min [Int,Int] -> Int 5
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 4

align term #0: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align@0 create@0 c
  x: List. <elt Int | cons {Int,List}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  info: {Int,Int}
align term #1: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align@1 create@0 cat ({unlabel tmp1,unlabel tmp2})
  l: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  r: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp2: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp1: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align term #2: {Int,Int}
align@2 spec (cton (unlabel tmp3))
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp3: compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@(Int * Int)
  Param2
  prod([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  access0([Param0,Param1,Param2]@(Int * Int))
  access1([Param0,Param1,Param2]@(Int * Int))
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  Param3
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>([Param0,Param1]@Compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>
  List. <elt Int | cons {Int,List}>@0
  elt([List. <elt Int | cons {Int,List}>@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  access0([Int@0,Int@1]@(Int * Int))
  access1([Int@0,Int@1]@(Int * Int))
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  access0([Int@0]@(Int * Int))
  access1([Int@0]@(Int * Int))
  min([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  access0([Param0]@(Int * Int))
  access1([Param0]@(Int * Int))
  fold[CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>->Int]([List. <elt Int | cons {Int,List}>@0]@Int [Int@0,Int@1]@Int [Param0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [List. <elt Int | cons {Int,List}>@0]@Int
  +([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  -([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  access0([List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  access1([List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  min([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  max([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
node: [Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  cton([Param0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  line([Param0]@List. <elt Int | cons {Int,List}>)
node: [List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  cton([List. <elt Int | cons {Int,List}>@0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  line([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  cton([Int@0,Int@1]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  line([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  cton([Int@0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)
  line([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  elt([Param0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
node: [Param0]@(Int * Int)
  prod([Param0]@Int [Param0]@Int)
  range([Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [List. <elt Int | cons {Int,List}>@0]@(Int * Int)
  prod([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  range([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  spec([List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0,Int@1]@(Int * Int)
  prod([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  range([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  spec([Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0]@(Int * Int)
  prod([Int@0]@Int [Int@0]@Int)
  range([Int@0]@List. <elt Int | cons {Int,List}>)
  spec([Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [List. <elt Int | cons {Int,List}>@0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  sglt([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  sglt([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  sglt([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  Param0
  sglt([Param0]@List. <elt Int | cons {Int,List}>)


















  [0] spec(cton(Param0)).0
  [1] spec(cton(Param0)).1
  [0] Param2.0
  [1] Param2.1
  [0] spec(cton(Param0)).0
  [1] spec(cton(Param0)).1
  [0] Param3 -> spec(cton(Param0)).0
  [1] Param3 -> spec(cton(Param0)).1
  [2] Param4 -> spec(cton(Param0)).0
  [3] Param4 -> spec(cton(Param0)).1
  [0] null
  [1] null
  [0] Param1 -> spec(cton(Param0)).0
  [1] Param1 -> spec(cton(Param0)).1
compress #0: {Int,Int}
pass #0: 
let c0 = info.1 in 
    let c1 = info.2 in 
        {c0, c1}
pass #1: 
{min tmp2.1 tmp1.1, max tmp2.2 tmp1.2}
pass #2: 
{tmp3.1, tmp3.2}

Inductive List;

Inductive NList;

Inductive CNList;

cton = fix (
    \f: CNList -> NList. 
    let dec = (fix (
    \g: CNList -> CNList -> NList. \l: CNList. \c: CNList. 
    match c with
      sglt x -> ncons {x, f l}
    | cat {x, y} -> g (cat {y, l}) x
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> line x
        | cat {x, y} -> dec y x
        end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

range = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt w -> {w, w}
    | cons {h, t} -> 
        let res = (f t) in 
            {min h res.1, max h res.2}
    end
);

spec = fix (
    \f: NList -> {Int, Int}. \xs: NList. 
    match xs with
      line a -> range a
    | ncons {h, t} -> 
        let rh = (range h) in 
            let res = (f t) in 
                {min rh.1 res.1, max rh.2 res.2}
    end
);

target = fix (
    \f: CNList -> {Int, Int}. \c: CNList. 
    match c with
      sglt x -> 
        let info = (range x) in 
            let c0 = info.1 in 
                let c1 = info.2 in 
                    {c0, c1}
    | cat {l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                {min tmp2.1 tmp1.1, max tmp2.2 tmp1.2}
    end
);

main = \c: CNList. 
    let tmp3 = (target c) in 
        {tmp3.1, tmp3.2};
syn-comb: 0.954287
collect: 2.2613
label: 0.016691
extend-component: 4.3e-05
execute: 4.04821
syn-align: 6.18163
comb-size: 29
align-size: 13
extract-size: 9
7.16478
Success

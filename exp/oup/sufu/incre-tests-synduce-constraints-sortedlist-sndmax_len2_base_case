
List :: List. <nil Unit | cons {Int,Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,Int,List'}>
cons : {Int,Int,List} -> List'. <nil Unit | cons {Int,Int,List'}>
SList :: SList. <snil Unit | scons {Int,SList}>
snil : Unit -> SList'. <snil Unit | scons {Int,SList'}>
scons : {Int,SList} -> SList'. <snil Unit | scons {Int,SList'}>
repr : List -> SList'. <snil Unit | scons {Int,SList'}>
next_is_lt : Int -> List -> Bool
is_sorted : List -> Bool
min : Int -> Int -> Int
max : Int -> Int -> Int
spec : SList -> Int
target : List -> List
main : List -> Int


Inductive List;

Inductive SList;

repr = fix (
    \f: List -> SList. \xs: List. 
    match xs with
      nil _ -> snil Unit
    | cons {a, b, t} -> scons {a, scons {b, f t}}
    end
);

next_is_lt = \pre: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {a, b, t} -> > pre a
    end
;

is_sorted = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {a, b, t} -> and (and (> a 0) (> b 0)) (and (> a b) (and (next_is_lt b t) (f t)))
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: SList. 
    (fix (
    \f: SList -> {Int, Int}. \xs: SList. 
    match xs with
      snil _ -> {0, 0}
    | scons {h, t} -> 
        let res = (f t) in 
            {max h res.1, max res.2 (min h res.1)}
    end
) xs).2;

target = fix (
    \f: List -> Compress List. \c: List. 
    match c with
      nil _ -> 
        align (label c ) 
    | cons {a, b, t} -> 
        align (label c ) 
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp1 = (target xs) in 
        align (spec (repr (unlabel tmp1 ))) 
    else 0;
align term #0: compress[0] List. <nil Unit | cons {Int,Int,List}>
align@0 create@0 c
  c: List. <nil Unit | cons {Int,Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,Int,List}>
align@1 create@0 c
  t: List. <nil Unit | cons {Int,Int,List}>
  b: Int
  a: Int
  c: List. <nil Unit | cons {Int,Int,List}>
align term #2: Int
align@2 spec (repr (unlabel tmp1))
  xs: List. <nil Unit | cons {Int,Int,List}>
  tmp1: compress[0] List. <nil Unit | cons {Int,Int,List}>
Components for compress:
  nil [Bot] -> List. <nil Unit | cons {Int,Int,List}> 0
  min [Int,Int] -> Int 5
  snil [Bot] -> SList. <snil Unit | scons {Int,SList}> 1
  cons [(Int * Int * List. <nil Unit | cons {Int,Int,List}>)] -> List. <nil Unit | cons {Int,Int,List}> 0
  next_is_lt [Int,List. <nil Unit | cons {Int,Int,List}>] -> Bool 3
  scons [(Int * SList. <snil Unit | scons {Int,SList}>)] -> SList. <snil Unit | scons {Int,SList}> 1
  max [Int,Int] -> Int 6

Components for align:
  nil [Bot] -> List. <nil Unit | cons {Int,Int,List}> 0
  min [Int,Int] -> Int 5
  spec [SList. <snil Unit | scons {Int,SList}>] -> Int 7
  snil [Bot] -> SList. <snil Unit | scons {Int,SList}> 1
  cons [(Int * Int * List. <nil Unit | cons {Int,Int,List}>)] -> List. <nil Unit | cons {Int,Int,List}> 0
  next_is_lt [Int,List. <nil Unit | cons {Int,Int,List}>] -> Bool 3
  is_sorted [List. <nil Unit | cons {Int,Int,List}>] -> Bool 4
  scons [(Int * SList. <snil Unit | scons {Int,SList}>)] -> SList. <snil Unit | scons {Int,SList}> 1
  max [Int,Int] -> Int 6
  repr [List. <nil Unit | cons {Int,Int,List}>] -> SList. <snil Unit | scons {Int,SList}> 2

Components for comb:
  nil [Bot] -> List. <nil Unit | cons {Int,Int,List}> 0
  min [Int,Int] -> Int 5
  snil [Bot] -> SList. <snil Unit | scons {Int,SList}> 1
  cons [(Int * Int * List. <nil Unit | cons {Int,Int,List}>)] -> List. <nil Unit | cons {Int,Int,List}> 0
  next_is_lt [Int,List. <nil Unit | cons {Int,Int,List}>] -> Bool 3
  scons [(Int * SList. <snil Unit | scons {Int,SList}>)] -> SList. <snil Unit | scons {Int,SList}> 1
  max [Int,Int] -> Int 6


List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 al_fold : (Int->Int->Int) -> Int -> List -> Int
al_error : Int
al_inf : Int
al_plus : Int -> Int -> Int
al_minus : Int -> Int -> Int
al_times : Int -> Int -> Int
al_min : Int -> Int -> Int
al_max : Int -> Int -> Int
al_maximum : List -> Int
al_minimum : List -> Int
al_sum : List -> Int
al_length : List -> Int
al_head : List -> Int
al_inc : Int -> Int
al_dec : Int -> Int
al_neg : Int -> Int
al_last : List -> Int
al_access : Int -> List -> Int
al_count : (Int->Bool) -> List -> Int
al_take : Int -> List -> List
al_drop : Int -> List -> List
al_rev : List -> List
al_map : (Int->Int) -> List -> List
al_filter : (Int->Bool) -> List -> List
al_zip : (Int->Int->Int) ->
         List -> List -> List'. <cons {Int,List'} | nil Unit>
al_concat : List -> List -> List
al_sort : List -> List
al_scanl : (Int->Int->Int) -> List -> List
al_scanr : (Int->Int->Int) -> List -> List
al_isneg : Int -> Bool
al_ispos : Int -> Bool
al_iseven : Int -> Bool
al_isodd : Int -> Bool
one : Int
none : Int
al_error : Int -> Bool


List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 al_fold : (Int->Int->Int) -> Int -> List -> Int
al_error : Int
al_inf : Int
al_plus : Int -> Int -> Int
al_minus : Int -> Int -> Int
al_times : Int -> Int -> Int
al_min : Int -> Int -> Int
al_max : Int -> Int -> Int
al_maximum : List -> Int
al_minimum : List -> Int
al_sum : List -> Int
al_length : List -> Int
al_head : List -> Int
al_inc : Int -> Int
al_dec : Int -> Int
al_neg : Int -> Int
al_last : List -> Int
al_access : Int -> List -> Int
al_count : (Int->Bool) -> List -> Int
al_take : Int -> List -> List
al_drop : Int -> List -> List
al_rev : List -> List
al_map : (Int->Int) -> List -> List
al_filter : (Int->Bool) -> List -> List
al_zip : (Int->Int->Int) ->
         List -> List -> List'. <cons {Int,List'} | nil Unit>
al_concat : List -> List -> List
al_sort : List -> List
al_scanl : (Int->Int->Int) -> List -> List
al_scanr : (Int->Int->Int) -> List -> List
al_isneg : Int -> Bool
al_ispos : Int -> Bool
al_iseven : Int -> Bool
al_isodd : Int -> Bool
one : Int
none : Int
al_error : Int -> Bool

align term #0: compress[0] List. <nil Unit | cons {Int,Int,List}>
align@0 create@0 c
  c: List. <nil Unit | cons {Int,Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,Int,List}>
align@1 create@0 c
  t: List. <nil Unit | cons {Int,Int,List}>
  b: Int
  a: Int
  c: List. <nil Unit | cons {Int,Int,List}>
align term #2: Int
align@2 spec (repr (unlabel tmp1))
  xs: List. <nil Unit | cons {Int,Int,List}>
  tmp1: compress[0] List. <nil Unit | cons {Int,Int,List}>
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  1
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  al_head([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  next_is_lt([Param0]@Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,Int,List}>
  Param0
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
  Bool([Param0,Param1,Param2,Param3]@Bool)
node: [Param0,Param1,Param2,Param3]@Int
  Param1
  Param2
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  ite([Param0,Param1,Param2,Param3]@Bool [Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  al_head([Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,Int,List}>)
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Bool
  next_is_lt([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,Int,List}>)
node: [Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,Int,List}>
  Param0
  Param3
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,Int,List}>)
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  al_head([Param0,Param1]@List. <nil Unit | cons {Int,Int,List}>)
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Bool
  next_is_lt([Param0,Param1]@Int [Param0,Param1]@List. <nil Unit | cons {Int,Int,List}>)
node: [Param0,Param1]@List. <nil Unit | cons {Int,Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  al_plus([Param0]@Int [Param0]@Int)
  al_minus([Param0]@Int [Param0]@Int)
  al_times([Param0]@Int [Param0]@Int)
  al_min([Param0]@Int [Param0]@Int)
  al_max([Param0]@Int [Param0]@Int)
  al_maximum([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_minimum([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_sum([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_length([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_head([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_inc([Param0]@Int)
  al_dec([Param0]@Int)
  al_neg([Param0]@Int)
  al_last([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_access([Param0]@Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_count([Param0]@[Int]->Bool [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  one
  none
  min([Param0]@Int [Param0]@Int)
  spec([Param0]@SList. <snil Unit | scons {Int,SList}>)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  al_isneg([Param0]@Int)
  al_ispos([Param0]@Int)
  al_iseven([Param0]@Int)
  al_isodd([Param0]@Int)
  next_is_lt([Param0]@Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  is_sorted([Param0]@List. <nil Unit | cons {Int,Int,List}>)
node: [Param0]@[Int]->[Int]->Int
  al_plus
  al_minus
  al_times
  al_min
  al_max
  min
  max
node: [Param0]@[Int]->Int
  al_inc
  al_dec
  al_neg
  min([Param0]@Int)
  max([Param0]@Int)
node: [Param0]@[Int]->Bool
  al_isneg
  al_ispos
  al_iseven
  al_isodd
node: [Param0]@SList. <snil Unit | scons {Int,SList}>
  repr([Param0]@List. <nil Unit | cons {Int,Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,Int,List}>
  Param0
  al_take([Param0]@Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_drop([Param0]@Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_rev([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_map([Param0]@[Int]->Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_filter([Param0]@[Int]->Bool [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_zip([Param0]@[Int]->[Int]->Int [Param0]@List. <nil Unit | cons {Int,Int,List}> [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_sort([Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_scanl([Param0]@[Int]->[Int]->Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)
  al_scanr([Param0]@[Int]->[Int]->Int [Param0]@List. <nil Unit | cons {Int,Int,List}>)









  [] spec(repr(Param0))
  [] spec(repr(Param0))
  [0] Param1
  [] null
  [0] Param1 -> spec(repr(Param0))
compress #0: Int
pass #0: 
0
pass #1: 
b
pass #2: 
tmp1

Inductive List;

Inductive SList;

repr = fix (
    \f: List -> SList. \xs: List. 
    match xs with
      nil _ -> snil Unit
    | cons {a, b, t} -> scons {a, scons {b, f t}}
    end
);

next_is_lt = \pre: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {a, b, t} -> > pre a
    end
;

is_sorted = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {a, b, t} -> and (and (> a 0) (> b 0)) (and (> a b) (and (next_is_lt b t) (f t)))
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: SList. 
    (fix (
    \f: SList -> {Int, Int}. \xs: SList. 
    match xs with
      snil _ -> {0, 0}
    | scons {h, t} -> 
        let res = (f t) in 
            {max h res.1, max res.2 (min h res.1)}
    end
) xs).2;

target = fix (
    \f: List -> Int. \c: List. 
    match c with
      nil _ -> 0
    | cons {a, b, t} -> b
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp1 = (target xs) in 
        tmp1
    else 0;
syn-comb: 0.060157
collect: 2.54991
label: 0.014445
extend-component: 1e-06
execute: 0.000931
syn-align: 2.56136
comb-size: 3
align-size: 5
extract-size: 2
2.6638
Success


Tree :: Tree. <tip Int | bin {Tree,Tree}>
 tip : Int -> Tree'. <tip Int | bin {Tree',Tree'}>
 bin : {Tree,Tree} -> Tree'. <tip Int | bin {Tree',Tree'}>
 tri : (Int->Int) -> Tree -> Tree'. <tip Int | bin {Tree',Tree'}>
op : Int -> Int
max : Int -> Int -> Int
maximum : Tree -> Int
main : Tree -> Int


Inductive Tree;

tri = \op: Int -> Int. 
    fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      tip _ -> 
        let tmp1 = (tip 0) in 
            align (label tmp1 ) 
    | bin {l, r} -> 
        let step = (fix (
        \g: Tree -> Tree. \ys: Tree. 
        match ys with
          tip w -> tip (op w)
        | bin {l, r} -> bin {g l, g r}
        end
    )) in 
            let tmp2 = (f l) in 
                let tmp3 = (f r) in 
                    align (label (bin {step (unlabel tmp2 ), step (unlabel tmp3 )}) ) 
    end
);

op = \x: Int. 
    + 1 x;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

maximum = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      tip w -> w
    | bin {l, r} -> max (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (tri op t) in 
        align (maximum (unlabel tmp4 )) ;
align term #0: compress[0] Tree. <tip Int | bin {Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp1: Tree. <tip Int | bin {Tree,Tree}>
align term #1: compress[0] Tree. <tip Int | bin {Tree,Tree}>
align@1 create@0 bin ({step (unlabel tmp2),step (unlabel tmp3)})
  r: Tree. <tip Int | bin {Tree,Tree}>
  l: Tree. <tip Int | bin {Tree,Tree}>
  tmp3: compress[0] Tree. <tip Int | bin {Tree,Tree}>
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp2: compress[0] Tree. <tip Int | bin {Tree,Tree}>
align term #2: Int
align@2 maximum (unlabel tmp4)
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp4: compress[0] Tree. <tip Int | bin {Tree,Tree}>
Components for compress:
  bin [(Tree. <tip Int | bin {Tree,Tree}> * Tree. <tip Int | bin {Tree,Tree}>)] -> Tree. <tip Int | bin {Tree,Tree}> 0
  tip [Int] -> Tree. <tip Int | bin {Tree,Tree}> 0
  op [Int] -> Int 2
  max [Int,Int] -> Int 3

Components for align:
  maximum [Tree. <tip Int | bin {Tree,Tree}>] -> Int 4
  bin [(Tree. <tip Int | bin {Tree,Tree}> * Tree. <tip Int | bin {Tree,Tree}>)] -> Tree. <tip Int | bin {Tree,Tree}> 0
  tip [Int] -> Tree. <tip Int | bin {Tree,Tree}> 0
  op [Int] -> Int 2
  max [Int,Int] -> Int 3

Components for comb:
  bin [(Tree. <tip Int | bin {Tree,Tree}> * Tree. <tip Int | bin {Tree,Tree}>)] -> Tree. <tip Int | bin {Tree,Tree}> 0
  tip [Int] -> Tree. <tip Int | bin {Tree,Tree}> 0
  op [Int] -> Int 2
  max [Int,Int] -> Int 3

align term #0: compress[0] Tree. <tip Int | bin {Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp1: Tree. <tip Int | bin {Tree,Tree}>
align term #1: compress[0] Tree. <tip Int | bin {Tree,Tree}>
align@1 create@0 bin ({step (unlabel tmp2),step (unlabel tmp3)})
  r: Tree. <tip Int | bin {Tree,Tree}>
  l: Tree. <tip Int | bin {Tree,Tree}>
  tmp3: compress[0] Tree. <tip Int | bin {Tree,Tree}>
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp2: compress[0] Tree. <tip Int | bin {Tree,Tree}>
align term #2: Int
align@2 maximum (unlabel tmp4)
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp4: compress[0] Tree. <tip Int | bin {Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] Tree. <tip Int | bin {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <tip Int | bin {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <tip Int | bin {Tree,Tree}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] Tree. <tip Int | bin {Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <tip Int | bin {Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <tip Int | bin {Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  op([Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  maximum([Int@0]@Tree. <tip Int | bin {Tree,Tree}>)
  op([Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  maximum([Int@0,Int@1]@Tree. <tip Int | bin {Tree,Tree}>)
  op([Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[Tree. <tip Int | bin {Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@Tree. <tip Int | bin {Tree,Tree}>)
  maximum([Param0]@Tree. <tip Int | bin {Tree,Tree}>)
  op([Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [Int@0]@Tree. <tip Int | bin {Tree,Tree}>
  tip([Int@0]@Int)
node: [Int@0,Int@1]@Tree. <tip Int | bin {Tree,Tree}>
  tip([Int@0,Int@1]@Int)
node: [Param0]@Tree. <tip Int | bin {Tree,Tree}>
  Param0
  tip([Param0]@Int)









  [] maximum(Param0)
  [] maximum(Param0)
  [0] Param2 -> maximum(Param0)
  [1] Param4 -> maximum(Param0)
  [] null
  [0] Param1 -> maximum(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
if (< tmp3 tmp2) then + 1 tmp2
else + 1 tmp3
pass #2: 
tmp4

Inductive Tree;

tri = \op: Int -> Int. 
    fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      tip _ -> 0
    | bin {l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                if (< tmp3 tmp2) then + 1 tmp2
                else + 1 tmp3
    end
);

op = \x: Int. 
    + 1 x;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

maximum = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      tip w -> w
    | bin {l, r} -> max (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (tri op t) in 
        tmp4;
syn-comb: 0.690721
collect: 0.564979
label: 0.011335
extend-component: 1e-06
execute: 0.284227
syn-align: 0.897906
comb-size: 18
align-size: 3
extract-size: 4
1.60609
Success

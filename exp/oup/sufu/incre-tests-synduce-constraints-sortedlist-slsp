
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 CList :: CList. <single Int | concat {Int,CList,CList}>
single : Int -> CList'. <single Int | concat {Int,CList',CList'}>
concat : {Int,CList,CList} ->
         CList'. <single Int | concat {Int,CList',CList'}>
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : CList -> List'. <elt Int | cons {Int,List'}>
max : Int -> Int -> Int
min : Int -> Int -> Int
is_parti : CList -> Bool
spec : List -> Int
target : CList -> CList
main : CList -> Int


Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt w -> cons {w, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \c: CList. 
    match c with
      single w -> elt w
    | concat {w, l, r} -> cat (f l) (f r)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

is_parti = let lmax = (fix (
    \f: CList -> Int. \c: CList. 
    match c with
      single w -> w
    | concat {w, l, r} -> max (f l) (f r)
    end
)) in 
        let lmin = (fix (
        \f: CList -> Int. \c: CList. 
        match c with
          single w -> w
        | concat {w, l, r} -> min (f l) (f r)
        end
    )) in 
            fix (
            \f: CList -> Bool. \c: CList. 
            match c with
              single w -> true
            | concat {w, l, r} -> and (and (< (lmax l) w) (< w (lmin r))) (and (f l) (f r))
            end
        );

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Bool}. \xs: List. 
    match xs with
      elt w -> {max 0 w, >= w 0}
    | cons {h, t} -> 
        let res = (f t) in 
            let cond = (and (>= h 0) res.2) in 
                {if (cond) then + res.1 h
                else res.1, cond}
    end
) xs).1;

target = fix (
    \f: CList -> Compress CList. \xs: CList. 
    match xs with
      single a -> 
        align (label xs ) 
    | concat {w, l, r} -> if (<= w 0) then let tmp1 = (f r) in 
            align (label (concat {w, l, unlabel tmp1 }) ) 
        else let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (concat {w, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \xs: CList. 
    let inp = xs in 
        if (is_parti inp) then let tmp4 = (target inp) in 
            align (spec (repr (unlabel tmp4 ))) 
        else 0;
align term #0: compress[0] CList. <single Int | concat {Int,CList,CList}>
align@0 create@0 xs
  xs: CList. <single Int | concat {Int,CList,CList}>
  a: Int
align term #1: compress[0] CList. <single Int | concat {Int,CList,CList}>
align@1 create@0 concat ({w,l,unlabel tmp1})
  r: CList. <single Int | concat {Int,CList,CList}>
  w: Int
  l: CList. <single Int | concat {Int,CList,CList}>
  xs: CList. <single Int | concat {Int,CList,CList}>
  tmp1: compress[0] CList. <single Int | concat {Int,CList,CList}>
align term #2: compress[0] CList. <single Int | concat {Int,CList,CList}>
align@2 create@0 concat ({w,unlabel tmp2,unlabel tmp3})
  l: CList. <single Int | concat {Int,CList,CList}>
  xs: CList. <single Int | concat {Int,CList,CList}>
  w: Int
  tmp3: compress[0] CList. <single Int | concat {Int,CList,CList}>
  tmp2: compress[0] CList. <single Int | concat {Int,CList,CList}>
  r: CList. <single Int | concat {Int,CList,CList}>
align term #3: Int
align@3 spec (repr (unlabel tmp4))
  xs: CList. <single Int | concat {Int,CList,CList}>
  inp: CList. <single Int | concat {Int,CList,CList}>
  tmp4: compress[0] CList. <single Int | concat {Int,CList,CList}>
Components for compress:
  concat [(Int * CList. <single Int | concat {Int,CList,CList}> * CList. <single Int | concat {Int,CList,CList}>)] -> CList. <single Int | concat {Int,CList,CList}> 1
  single [Int] -> CList. <single Int | concat {Int,CList,CList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 5
  max [Int,Int] -> Int 4

Components for align:
  cat [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 2
  concat [(Int * CList. <single Int | concat {Int,CList,CList}> * CList. <single Int | concat {Int,CList,CList}>)] -> CList. <single Int | concat {Int,CList,CList}> 1
  single [Int] -> CList. <single Int | concat {Int,CList,CList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 5
  spec [List. <elt Int | cons {Int,List}>] -> Int 7
  max [Int,Int] -> Int 4
  repr [CList. <single Int | concat {Int,CList,CList}>] -> List. <elt Int | cons {Int,List}> 3
  is_parti [CList. <single Int | concat {Int,CList,CList}>] -> Bool 6

Components for comb:
  concat [(Int * CList. <single Int | concat {Int,CList,CList}> * CList. <single Int | concat {Int,CList,CList}>)] -> CList. <single Int | concat {Int,CList,CList}> 1
  single [Int] -> CList. <single Int | concat {Int,CList,CList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 5
  max [Int,Int] -> Int 4

align term #0: compress[0] CList. <single Int | concat {Int,CList,CList}>
align@0 create@0 xs
  xs: CList. <single Int | concat {Int,CList,CList}>
  a: Int
align term #1: compress[0] CList. <single Int | concat {Int,CList,CList}>
align@1 create@0 concat ({w,l,unlabel tmp1})
  r: CList. <single Int | concat {Int,CList,CList}>
  w: Int
  l: CList. <single Int | concat {Int,CList,CList}>
  xs: CList. <single Int | concat {Int,CList,CList}>
  tmp1: compress[0] CList. <single Int | concat {Int,CList,CList}>
align term #2: compress[0] CList. <single Int | concat {Int,CList,CList}>
align@2 create@0 concat ({w,unlabel tmp2,unlabel tmp3})
  l: CList. <single Int | concat {Int,CList,CList}>
  xs: CList. <single Int | concat {Int,CList,CList}>
  w: Int
  tmp3: compress[0] CList. <single Int | concat {Int,CList,CList}>
  tmp2: compress[0] CList. <single Int | concat {Int,CList,CList}>
  r: CList. <single Int | concat {Int,CList,CList}>
align term #3: Int
align@3 spec (repr (unlabel tmp4))
  xs: CList. <single Int | concat {Int,CList,CList}>
  inp: CList. <single Int | concat {Int,CList,CList}>
  tmp4: compress[0] CList. <single Int | concat {Int,CList,CList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] CList. <single Int | concat {Int,CList,CList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] CList. <single Int | concat {Int,CList,CList}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param1
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] CList. <single Int | concat {Int,CList,CList}>
  Param4
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] CList. <single Int | concat {Int,CList,CList}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] CList. <single Int | concat {Int,CList,CList}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param2
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] CList. <single Int | concat {Int,CList,CList}>
  Param3
  Param4
num = 3
start: start
node: start
  Compress[0] CList. <single Int | concat {Int,CList,CList}>([Param0,Param1,Param2]@Compress[0] CList. <single Int | concat {Int,CList,CList}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] CList. <single Int | concat {Int,CList,CList}>
  Param2
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  min([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  min([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  spec([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@Int
  Int@0
  +([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  -([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  ite([Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  min([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  spec([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
  max([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
node: [Bool@0,Bool@1,Int@0]@Bool
  Bool@0
  Bool@1
  is_parti([Bool@0,Bool@1,Int@0]@CList. <single Int | concat {Int,CList,CList}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[CList. <single Int | concat {Int,CList,CList}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@CList. <single Int | concat {Int,CList,CList}>)
  min([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  fold[CList. <single Int | concat {Int,CList,CList}>->Bool]([Int@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Param0]@CList. <single Int | concat {Int,CList,CList}>)
  is_parti([Param0]@CList. <single Int | concat {Int,CList,CList}>)
node: [Int@0]@Bool
  is_parti([Int@0]@CList. <single Int | concat {Int,CList,CList}>)
node: [Int@0,Int@1,Int@2]@Bool
  is_parti([Int@0,Int@1,Int@2]@CList. <single Int | concat {Int,CList,CList}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  cat([Param0]@List. <elt Int | cons {Int,List}> [Param0]@List. <elt Int | cons {Int,List}>)
  elt([Param0]@Int)
  repr([Param0]@CList. <single Int | concat {Int,CList,CList}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  cat([Int@0]@List. <elt Int | cons {Int,List}> [Int@0]@List. <elt Int | cons {Int,List}>)
  elt([Int@0]@Int)
  repr([Int@0]@CList. <single Int | concat {Int,CList,CList}>)
node: [Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>
  cat([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}> [Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
  elt([Int@0,Int@1,Int@2]@Int)
  repr([Int@0,Int@1,Int@2]@CList. <single Int | concat {Int,CList,CList}>)
node: [Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>
  cat([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}> [Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
  elt([Bool@0,Bool@1,Int@0]@Int)
  repr([Bool@0,Bool@1,Int@0]@CList. <single Int | concat {Int,CList,CList}>)
node: [Int@0]@CList. <single Int | concat {Int,CList,CList}>
  single([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@CList. <single Int | concat {Int,CList,CList}>
  single([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@CList. <single Int | concat {Int,CList,CList}>
  single([Bool@0,Bool@1,Int@0]@Int)
node: [Param0]@CList. <single Int | concat {Int,CList,CList}>
  Param0
  single([Param0]@Int)












  [] spec(repr(Param0))
  [0] Param1
  [] spec(repr(Param0))
  [0] Param4 -> spec(repr(Param0))
  [] spec(repr(Param0))
  [0] Param3 -> spec(repr(Param0))
  [1] Param4 -> spec(repr(Param0))
  [] null
  [0] Param2 -> spec(repr(Param0))
compress #0: Int
pass #0: 
- a (min a 0)
pass #1: 
tmp1
pass #2: 
+ tmp3 tmp2
pass #3: 
tmp4

Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt w -> cons {w, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \c: CList. 
    match c with
      single w -> elt w
    | concat {w, l, r} -> cat (f l) (f r)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

is_parti = let lmax = (fix (
    \f: CList -> Int. \c: CList. 
    match c with
      single w -> w
    | concat {w, l, r} -> max (f l) (f r)
    end
)) in 
        let lmin = (fix (
        \f: CList -> Int. \c: CList. 
        match c with
          single w -> w
        | concat {w, l, r} -> min (f l) (f r)
        end
    )) in 
            fix (
            \f: CList -> Bool. \c: CList. 
            match c with
              single w -> true
            | concat {w, l, r} -> and (and (< (lmax l) w) (< w (lmin r))) (and (f l) (f r))
            end
        );

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Bool}. \xs: List. 
    match xs with
      elt w -> {max 0 w, >= w 0}
    | cons {h, t} -> 
        let res = (f t) in 
            let cond = (and (>= h 0) res.2) in 
                {if (cond) then + res.1 h
                else res.1, cond}
    end
) xs).1;

target = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single a -> - a (min a 0)
    | concat {w, l, r} -> if (<= w 0) then let tmp1 = (f r) in 
            tmp1
        else let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + tmp3 tmp2
    end
);

main = \xs: CList. 
    let inp = xs in 
        if (is_parti inp) then let tmp4 = (target inp) in 
            tmp4
        else 0;
syn-comb: 0.366693
collect: 22.9885
label: 0.022578
extend-component: 6.1e-05
execute: 0.019009
syn-align: 23.0116
comb-size: 16
align-size: 5
extract-size: 6
23.4106
Success

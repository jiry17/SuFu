
CList :: CList. <cnil Unit | single Int | concat {CList,CList}>
 cnil : Unit ->
        CList'. <cnil Unit | single Int | concat {CList',CList'}>
 single : Int ->
          CList'. <cnil Unit | single Int | concat {CList',CList'}>
 concat : {CList,CList} ->
          CList'. <cnil Unit | single Int | concat {CList',CList'}>
 List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
allpos : CList -> Bool
cat : List -> List -> List'. <nil Unit | cons {Int,List'}>
repr : CList -> List'. <nil Unit | cons {Int,List'}>
min : Int -> Int -> Int
max : Int -> Int -> Int
spec : List -> Int
target : CList ->
         CList'. <cnil Unit | single Int | concat {CList',CList'}>
main : CList -> Int


Inductive CList;

Inductive List;

allpos = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      cnil _ -> true
    | single w -> > w 0
    | concat {l, r} -> and (f l) (f r)
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = fix (
    \f: CList -> List. \cl: CList. 
    match cl with
      cnil _ -> nil Unit
    | single h -> cons {h, nil Unit}
    | concat {l, r} -> cat (f l) (f r)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max h res.1, max res.2 (min res.1 h)}
    end
) xs).2;

target = fix (
    \f: CList -> Compress CList. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (cnil Unit) in 
            align (label tmp1 ) 
    | single h -> 
        let tmp2 = (single h) in 
            align (label tmp2 ) 
    | concat {l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                align (label (concat {unlabel tmp3 , unlabel tmp4 }) ) 
    end
);

main = \xs: CList. 
    if (allpos xs) then let tmp5 = (target xs) in 
        align (spec (repr (unlabel tmp5 ))) 
    else 0;
align term #0: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp1: CList. <cnil Unit | single Int | concat {CList,CList}>
align term #1: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
align@1 create@0 tmp2
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp2: CList. <cnil Unit | single Int | concat {CList,CList}>
  h: Int
align term #2: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
align@2 create@0 concat ({unlabel tmp3,unlabel tmp4})
  tmp4: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  r: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp3: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
  l: CList. <cnil Unit | single Int | concat {CList,CList}>
align term #3: Int
align@3 spec (repr (unlabel tmp5))
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp5: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
Components for compress:
  min [Int,Int] -> Int 5
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  max [Int,Int] -> Int 6

Components for align:
  repr [CList. <cnil Unit | single Int | concat {CList,CList}>] -> List. <nil Unit | cons {Int,List}> 4
  min [Int,Int] -> Int 5
  spec [List. <nil Unit | cons {Int,List}>] -> Int 7
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  allpos [CList. <cnil Unit | single Int | concat {CList,CList}>] -> Bool 2
  cat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 3
  max [Int,Int] -> Int 6

Components for comb:
  min [Int,Int] -> Int 5
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 0
  max [Int,Int] -> Int 6

align term #0: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp1: CList. <cnil Unit | single Int | concat {CList,CList}>
align term #1: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
align@1 create@0 tmp2
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp2: CList. <cnil Unit | single Int | concat {CList,CList}>
  h: Int
align term #2: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
align@2 create@0 concat ({unlabel tmp3,unlabel tmp4})
  tmp4: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  r: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp3: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
  l: CList. <cnil Unit | single Int | concat {CList,CList}>
align term #3: Int
align@3 spec (repr (unlabel tmp5))
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp5: compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 2
start: start
node: start
  Compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
  Param0
  Param3
num = 3
start: start
node: start
  Compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>([Param0,Param1]@Compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] CList. <cnil Unit | single Int | concat {CList,CList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  min([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  allpos([Param0]@CList. <cnil Unit | single Int | concat {CList,CList}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  repr([Param0]@CList. <cnil Unit | single Int | concat {CList,CList}>)
  cat([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@CList. <cnil Unit | single Int | concat {CList,CList}>
  Param0
  single([Param0]@Int)





















  [0] spec(repr(Param0))
  [1] spec(cat(repr(Param0),repr(Param0)))
  [0] spec(repr(Param0))
  [1] spec(cat(repr(Param0),repr(Param0)))
  [0] Param2
  [0] spec(repr(Param0))
  [1] spec(cat(repr(Param0),repr(Param0)))
  [0] Param0 -> spec(repr(Param0))
  [1] Param0 -> spec(cat(repr(Param0),repr(Param0)))
  [2] Param3 -> spec(repr(Param0))
  [3] Param3 -> spec(cat(repr(Param0),repr(Param0)))
  [] null
  [0] Param1 -> spec(repr(Param0))
  [1] Param1 -> spec(cat(repr(Param0),repr(Param0)))
compress #0: {Int,Int}
pass #0: 
{0, 0}
pass #1: 
{0, h}
pass #2: 
{+ (- (- (+ tmp4.1 tmp3.1) (min tmp4.1 tmp3.2)) (min tmp4.2 tmp3.1)) (min tmp4.2 tmp3.2), - (+ tmp4.2 tmp3.2) (min tmp4.2 tmp3.2)}
pass #3: 
tmp5.1

Inductive CList;

Inductive List;

allpos = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      cnil _ -> true
    | single w -> > w 0
    | concat {l, r} -> and (f l) (f r)
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = fix (
    \f: CList -> List. \cl: CList. 
    match cl with
      cnil _ -> nil Unit
    | single h -> cons {h, nil Unit}
    | concat {l, r} -> cat (f l) (f r)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max h res.1, max res.2 (min res.1 h)}
    end
) xs).2;

target = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      cnil _ -> {0, 0}
    | single h -> {0, h}
    | concat {l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                {+ (- (- (+ tmp4.1 tmp3.1) (min tmp4.1 tmp3.2)) (min tmp4.2 tmp3.1)) (min tmp4.2 tmp3.2), - (+ tmp4.2 tmp3.2) (min tmp4.2 tmp3.2)}
    end
);

main = \xs: CList. 
    if (allpos xs) then let tmp5 = (target xs) in 
        tmp5.1
    else 0;
syn-comb: 1.24491
collect: 12.3198
label: 0.016147
extend-component: 0
execute: 4.02469
syn-align: 15.8637
comb-size: 63
align-size: 17
extract-size: 5
17.135
Success

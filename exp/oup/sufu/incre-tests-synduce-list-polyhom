
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
CList :: CList. <cnil Unit | single Int | concat {CList,CList}>
cnil : Unit ->
       CList'. <cnil Unit | single Int | concat {CList',CList'}>
single : Int ->
         CList'. <cnil Unit | single Int | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <cnil Unit | single Int | concat {CList',CList'}>
max : Int -> Int -> Int
x : Int
spec : List -> Int
cat : List -> List -> List
repr : CList -> List'. <nil Unit | cons {Int,List'}>
main : CList -> Int


Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

@Input x = Int;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 1}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {+ result.1 (* hd result.2), * x result.2}
    end
) xs).1;

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single a -> 
        let tmp2 = (cons {a, nil Unit}) in 
            align (label tmp2 ) 
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                align (label (cat (unlabel tmp3 ) (unlabel tmp4 )) ) 
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        align (spec (unlabel tmp5 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp2
  a: Int
  tmp2: List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
align term #2: compress[0] List
align@2 create@0 cat (unlabel tmp3) (unlabel tmp4)
  b: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  a: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
align term #3: Int
align@3 spec (unlabel tmp5)
  x: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp5: compress[0] List. <nil Unit | cons {Int,List}>
Components for compress:
  max [Int,Int] -> Int 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1

Components for align:
  cat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 5
  max [Int,Int] -> Int 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  spec [List. <nil Unit | cons {Int,List}>] -> Int 4
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1

Components for comb:
  max [Int,Int] -> Int 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1


List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 al_fold : (Int->Int->Int) -> Int -> List -> Int
al_error : Int
al_inf : Int
al_plus : Int -> Int -> Int
al_minus : Int -> Int -> Int
al_times : Int -> Int -> Int
al_min : Int -> Int -> Int
al_max : Int -> Int -> Int
al_maximum : List -> Int
al_minimum : List -> Int
al_sum : List -> Int
al_length : List -> Int
al_head : List -> Int
al_inc : Int -> Int
al_dec : Int -> Int
al_neg : Int -> Int
al_last : List -> Int
al_access : Int -> List -> Int
al_count : (Int->Bool) -> List -> Int
al_take : Int -> List -> List
al_drop : Int -> List -> List
al_rev : List -> List
al_map : (Int->Int) -> List -> List
al_filter : (Int->Bool) -> List -> List
al_zip : (Int->Int->Int) ->
         List -> List -> List'. <cons {Int,List'} | nil Unit>
al_concat : List -> List -> List
al_sort : List -> List
al_scanl : (Int->Int->Int) -> List -> List
al_scanr : (Int->Int->Int) -> List -> List
al_isneg : Int -> Bool
al_ispos : Int -> Bool
al_iseven : Int -> Bool
al_isodd : Int -> Bool
one : Int
none : Int
al_error : Int -> Bool


List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 al_fold : (Int->Int->Int) -> Int -> List -> Int
al_error : Int
al_inf : Int
al_plus : Int -> Int -> Int
al_minus : Int -> Int -> Int
al_times : Int -> Int -> Int
al_min : Int -> Int -> Int
al_max : Int -> Int -> Int
al_maximum : List -> Int
al_minimum : List -> Int
al_sum : List -> Int
al_length : List -> Int
al_head : List -> Int
al_inc : Int -> Int
al_dec : Int -> Int
al_neg : Int -> Int
al_last : List -> Int
al_access : Int -> List -> Int
al_count : (Int->Bool) -> List -> Int
al_take : Int -> List -> List
al_drop : Int -> List -> List
al_rev : List -> List
al_map : (Int->Int) -> List -> List
al_filter : (Int->Bool) -> List -> List
al_zip : (Int->Int->Int) ->
         List -> List -> List'. <cons {Int,List'} | nil Unit>
al_concat : List -> List -> List
al_sort : List -> List
al_scanl : (Int->Int->Int) -> List -> List
al_scanr : (Int->Int->Int) -> List -> List
al_isneg : Int -> Bool
al_ispos : Int -> Bool
al_iseven : Int -> Bool
al_isodd : Int -> Bool
one : Int
none : Int
al_error : Int -> Bool

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp1: List. <nil Unit | cons {Int,List}>
  (0) {xs: Cnil Unit,tmp1: Nil Unit} @ {x: 5} -> compress[0] Nil Unit
  (0) {xs: Cnil Unit,tmp1: Nil Unit} @ {x: 0} -> compress[0] Nil Unit
  (0) {xs: Cnil Unit,tmp1: Nil Unit} @ {x: 1} -> compress[0] Nil Unit
  (0) {xs: Cnil Unit,tmp1: Nil Unit} @ {x: 2} -> compress[0] Nil Unit
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp2
  a: Int
  tmp2: List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  (1) {a: -1,tmp2: Cons (-1) (Nil Unit),xs: Single -1} @ {x: -5} -> compress[0] Cons (-1) (Nil Unit)
  (1) {a: -5,tmp2: Cons (-5) (Nil Unit),xs: Single -5} @ {x: -5} -> compress[0] Cons (-5) (Nil Unit)
  (1) {a: 1,tmp2: Cons (1) (Nil Unit),xs: Single 1} @ {x: -5} -> compress[0] Cons (1) (Nil Unit)
  (1) {a: 4,tmp2: Cons (4) (Nil Unit),xs: Single 4} @ {x: -5} -> compress[0] Cons (4) (Nil Unit)
  (1) {a: 2,tmp2: Cons (2) (Nil Unit),xs: Single 2} @ {x: -5} -> compress[0] Cons (2) (Nil Unit)
  (1) {a: 4,tmp2: Cons (4) (Nil Unit),xs: Single 4} @ {x: 5} -> compress[0] Cons (4) (Nil Unit)
  (1) {a: -1,tmp2: Cons (-1) (Nil Unit),xs: Single -1} @ {x: 5} -> compress[0] Cons (-1) (Nil Unit)
  (1) {a: 2,tmp2: Cons (2) (Nil Unit),xs: Single 2} @ {x: 5} -> compress[0] Cons (2) (Nil Unit)
  (1) {a: -5,tmp2: Cons (-5) (Nil Unit),xs: Single -5} @ {x: 1} -> compress[0] Cons (-5) (Nil Unit)
  (1) {a: 5,tmp2: Cons (5) (Nil Unit),xs: Single 5} @ {x: 1} -> compress[0] Cons (5) (Nil Unit)
align term #2: compress[0] List
align@2 create@0 cat (unlabel tmp3) (unlabel tmp4)
  b: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  a: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
  (2) {tmp4: compress[0] Cons (4) (Nil Unit),xs: Concat (Single 1) (Single 4),b: Single 4,tmp3: compress[0] Cons (1) (Nil Unit),a: Single 1} @ {x: -5} -> compress[0] Cons (1) (Cons (4) (Nil Unit))
  (2) {tmp4: compress[0] Cons (2) (Nil Unit),xs: Concat (Concat (Single 1) (Single 4)) (Single 2),b: Single 2,tmp3: compress[0] Cons (1) (Cons (4) (Nil Unit)),a: Concat (Single 1) (Single 4)} @ {x: -5} -> compress[0] Cons (1) (Cons (4) (Cons (2) (Nil Unit)))
  (2) {tmp4: compress[0] Cons (1) (Cons (4) (Cons (2) (Nil Unit))),xs: Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2)),b: Concat (Concat (Single 1) (Single 4)) (Single 2),tmp3: compress[0] Cons (-5) (Nil Unit),a: Single -5} @ {x: -5} -> compress[0] Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit))))
  (2) {tmp4: compress[0] Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit)))),xs: Concat (Single -1) (Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2))),b: Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2)),tmp3: compress[0] Cons (-1) (Nil Unit),a: Single -1} @ {x: -5} -> compress[0] Cons (-1) (Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit)))))
  (2) {tmp4: compress[0] Nil Unit,xs: Concat (Single -1) (Cnil Unit),b: Cnil Unit,tmp3: compress[0] Cons (-1) (Nil Unit),a: Single -1} @ {x: 5} -> compress[0] Cons (-1) (Nil Unit)
  (2) {tmp4: compress[0] Cons (-1) (Nil Unit),xs: Concat (Single 4) (Concat (Single -1) (Cnil Unit)),b: Concat (Single -1) (Cnil Unit),tmp3: compress[0] Cons (4) (Nil Unit),a: Single 4} @ {x: 5} -> compress[0] Cons (4) (Cons (-1) (Nil Unit))
  (2) {tmp4: compress[0] Cons (-1) (Nil Unit),xs: Concat (Concat (Single 4) (Concat (Single -1) (Cnil Unit))) (Single -1),b: Single -1,tmp3: compress[0] Cons (4) (Cons (-1) (Nil Unit)),a: Concat (Single 4) (Concat (Single -1) (Cnil Unit))} @ {x: 5} -> compress[0] Cons (4) (Cons (-1) (Cons (-1) (Nil Unit)))
  (2) {tmp4: compress[0] Cons (2) (Nil Unit),xs: Concat (Concat (Concat (Single 4) (Concat (Single -1) (Cnil Unit))) (Single -1)) (Single 2),b: Single 2,tmp3: compress[0] Cons (4) (Cons (-1) (Cons (-1) (Nil Unit))),a: Concat (Concat (Single 4) (Concat (Single -1) (Cnil Unit))) (Single -1)} @ {x: 5} -> compress[0] Cons (4) (Cons (-1) (Cons (-1) (Cons (2) (Nil Unit))))
  (2) {tmp4: compress[0] Nil Unit,xs: Concat (Single -5) (Cnil Unit),b: Cnil Unit,tmp3: compress[0] Cons (-5) (Nil Unit),a: Single -5} @ {x: 1} -> compress[0] Cons (-5) (Nil Unit)
  (2) {tmp4: compress[0] Cons (-5) (Nil Unit),xs: Concat (Cnil Unit) (Concat (Single -5) (Cnil Unit)),b: Concat (Single -5) (Cnil Unit),tmp3: compress[0] Nil Unit,a: Cnil Unit} @ {x: 1} -> compress[0] Cons (-5) (Nil Unit)
align term #3: Int
align@3 spec (unlabel tmp5)
  x: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp5: compress[0] List. <nil Unit | cons {Int,List}>
  (3) {x: Concat (Single -1) (Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2))),tmp5: compress[0] Cons (-1) (Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit)))))} @ {x: -5} -> 7
  (3) {x: Concat (Concat (Concat (Single 4) (Concat (Single -1) (Cnil Unit))) (Single -1)) (Single 2),tmp5: compress[0] Cons (4) (Cons (-1) (Cons (-1) (Cons (2) (Nil Unit))))} @ {x: 5} -> 472
  (3) {x: Cnil Unit,tmp5: compress[0] Nil Unit} @ {x: 0} -> 0
  (3) {x: Concat (Cnil Unit) (Concat (Single -5) (Cnil Unit)),tmp5: compress[0] Cons (-5) (Nil Unit)} @ {x: 1} -> -5
  (3) {x: Concat (Single 5) (Single -4),tmp5: compress[0] Cons (5) (Cons (-4) (Nil Unit))} @ {x: 1} -> 1
  (3) {x: Concat (Cnil Unit) (Concat (Cnil Unit) (Single 0)),tmp5: compress[0] Cons (0) (Nil Unit)} @ {x: 2} -> 0
  (3) {x: Single -1,tmp5: compress[0] Cons (-1) (Nil Unit)} @ {x: 1} -> -1
  (3) {x: Single 2,tmp5: compress[0] Cons (2) (Nil Unit)} @ {x: -3} -> 2
  (3) {x: Single 1,tmp5: compress[0] Cons (1) (Nil Unit)} @ {x: 1} -> 1
  (3) {x: Single -4,tmp5: compress[0] Cons (-4) (Nil Unit)} @ {x: 4} -> -4
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  al_head([Param0,Param1,Param2]@List. <nil Unit | cons {Int,List}>)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  al_head([Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,List}>)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 3
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  al_plus([Param0,Param1]@Int [Param0,Param1]@Int)
  al_minus([Param0,Param1]@Int [Param0,Param1]@Int)
  al_times([Param0,Param1]@Int [Param0,Param1]@Int)
  al_min([Param0,Param1]@Int [Param0,Param1]@Int)
  al_max([Param0,Param1]@Int [Param0,Param1]@Int)
  al_maximum([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_minimum([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_sum([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_length([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_head([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_inc([Param0,Param1]@Int)
  al_dec([Param0,Param1]@Int)
  al_neg([Param0,Param1]@Int)
  al_last([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_access([Param0,Param1]@Int [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_count([Param0,Param1]@[Int]->Bool [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  one
  none
  max([Param0,Param1]@Int [Param0,Param1]@Int)
  spec([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1]@Bool
  al_isneg([Param0,Param1]@Int)
  al_ispos([Param0,Param1]@Int)
  al_iseven([Param0,Param1]@Int)
  al_isodd([Param0,Param1]@Int)
node: [Param0,Param1]@[Int]->[Int]->Int
  al_plus
  al_minus
  al_times
  al_min
  al_max
  max
node: [Param0,Param1]@[Int]->Int
  al_inc
  al_dec
  al_neg
  max([Param0,Param1]@Int)
node: [Param0,Param1]@[Int]->Bool
  al_isneg
  al_ispos
  al_iseven
  al_isodd
node: [Param0,Param1]@List. <nil Unit | cons {Int,List}>
  Param0
  al_take([Param0,Param1]@Int [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_drop([Param0,Param1]@Int [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_rev([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_map([Param0,Param1]@[Int]->Int [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_filter([Param0,Param1]@[Int]->Bool [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_zip([Param0,Param1]@[Int]->[Int]->Int [Param0,Param1]@List. <nil Unit | cons {Int,List}> [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_sort([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_scanl([Param0,Param1]@[Int]->[Int]->Int [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  al_scanr([Param0,Param1]@[Int]->[Int]->Int [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
  cat([Param0,Param1]@List. <nil Unit | cons {Int,List}> [Param0,Param1]@List. <nil Unit | cons {Int,List}>)





















  [0] spec(Param0)
  [1] al_length(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0)
  [1] al_length(Param0)
  [0] Param0
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0)
  [1] al_length(Param0)
  [0] Param5
  [1] Param1 -> spec(Param0)
  [2] Param1 -> al_length(Param0)
  [3] Param4 -> spec(Param0)
  [4] Param4 -> al_length(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17


List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 map : (Int->Int) -> List -> List'. <nil Unit | cons {Int,List'}>
sum : List -> Int
square : Int -> Int
upto : Int -> List'. <nil Unit | cons {Int,List'}>
main : Int -> Int


Inductive List;

map = \f: Int -> Int. 
    fix (
    \g: List -> List. \xs: List. 
    match xs with
      nil _ -> nil Unit
    | cons {h, t} -> cons {f h, g t}
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

square = \x: Int. 
    * x x;

upto = \n: Int. 
    fix (
    \f: Int -> Compress List. \now: Int. 
    if (> now n) then let tmp1 = (nil Unit) in 
        align (label tmp1 ) 
    else let tmp2 = (f (+ now 1)) in 
        align (label (cons {now, unlabel tmp2 }) ) ) 1;

main = \n: Int. 
    let tmp3 = (map square) in 
        let tmp4 = (upto n) in 
            align (sum (tmp3 (unlabel tmp4 ))) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  n: Int
  tmp1: List. <nil Unit | cons {Int,List}>
  now: Int
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({now,unlabel tmp2})
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  now: Int
  n: Int
align term #2: Int
align@2 sum (tmp3 (unlabel tmp4))
  n: Int
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  square [Int] -> Int 3
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  map [[Int]->Int,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 1
  square [Int] -> Int 3
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  sum [List. <nil Unit | cons {Int,List}>] -> Int 2

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  square [Int] -> Int 3
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  n: Int
  tmp1: List. <nil Unit | cons {Int,List}>
  now: Int
  (0) {n: -5,tmp1: Nil Unit,now: 1} @ {} -> compress[0] Nil Unit
  (0) {n: 4,tmp1: Nil Unit,now: 5} @ {} -> compress[0] Nil Unit
  (0) {n: -3,tmp1: Nil Unit,now: 1} @ {} -> compress[0] Nil Unit
  (0) {n: -1,tmp1: Nil Unit,now: 1} @ {} -> compress[0] Nil Unit
  (0) {n: 3,tmp1: Nil Unit,now: 4} @ {} -> compress[0] Nil Unit
  (0) {n: 1,tmp1: Nil Unit,now: 2} @ {} -> compress[0] Nil Unit
  (0) {n: 0,tmp1: Nil Unit,now: 1} @ {} -> compress[0] Nil Unit
  (0) {n: 5,tmp1: Nil Unit,now: 6} @ {} -> compress[0] Nil Unit
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({now,unlabel tmp2})
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  now: Int
  n: Int
  (1) {n: 4,now: 4,tmp2: compress[0] Nil Unit} @ {} -> compress[0] Cons (4) (Nil Unit)
  (1) {n: 4,now: 3,tmp2: compress[0] Cons (4) (Nil Unit)} @ {} -> compress[0] Cons (3) (Cons (4) (Nil Unit))
  (1) {n: 4,now: 2,tmp2: compress[0] Cons (3) (Cons (4) (Nil Unit))} @ {} -> compress[0] Cons (2) (Cons (3) (Cons (4) (Nil Unit)))
  (1) {n: 4,now: 1,tmp2: compress[0] Cons (2) (Cons (3) (Cons (4) (Nil Unit)))} @ {} -> compress[0] Cons (1) (Cons (2) (Cons (3) (Cons (4) (Nil Unit))))
  (1) {n: 3,now: 3,tmp2: compress[0] Nil Unit} @ {} -> compress[0] Cons (3) (Nil Unit)
  (1) {n: 3,now: 2,tmp2: compress[0] Cons (3) (Nil Unit)} @ {} -> compress[0] Cons (2) (Cons (3) (Nil Unit))
  (1) {n: 3,now: 1,tmp2: compress[0] Cons (2) (Cons (3) (Nil Unit))} @ {} -> compress[0] Cons (1) (Cons (2) (Cons (3) (Nil Unit)))
  (1) {n: 1,now: 1,tmp2: compress[0] Nil Unit} @ {} -> compress[0] Cons (1) (Nil Unit)
  (1) {n: 5,now: 5,tmp2: compress[0] Nil Unit} @ {} -> compress[0] Cons (5) (Nil Unit)
  (1) {n: 5,now: 4,tmp2: compress[0] Cons (5) (Nil Unit)} @ {} -> compress[0] Cons (4) (Cons (5) (Nil Unit))
align term #2: Int
align@2 sum (tmp3 (unlabel tmp4))
  n: Int
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  (2) {n: -5,tmp4: compress[0] Nil Unit} @ {} -> 0
  (2) {n: 4,tmp4: compress[0] Cons (1) (Cons (2) (Cons (3) (Cons (4) (Nil Unit))))} @ {} -> 30
  (2) {n: -3,tmp4: compress[0] Nil Unit} @ {} -> 0
  (2) {n: -1,tmp4: compress[0] Nil Unit} @ {} -> 0
  (2) {n: 3,tmp4: compress[0] Cons (1) (Cons (2) (Cons (3) (Nil Unit)))} @ {} -> 14
  (2) {n: 1,tmp4: compress[0] Cons (1) (Nil Unit)} @ {} -> 1
  (2) {n: 0,tmp4: compress[0] Nil Unit} @ {} -> 0
  (2) {n: 5,tmp4: compress[0] Cons (1) (Cons (2) (Cons (3) (Cons (4) (Cons (5) (Nil Unit)))))} @ {} -> 55
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  square([Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param1
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  square([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 2
start: start
node: start
  Int([Param0,Param1]@Int)
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  Param0
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  square([Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  0
  square([Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  fold[List. <nil Unit | cons {Int,List}>->Int]([]@Int [Int@0,Int@1]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  square([Param0]@Int)
  sum([Param0]@List. <nil Unit | cons {Int,List}>)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  square([]@Int)
node: [Param0]@[Int]->Int
  square
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  map([Param0]@[Int]->Int [Param0]@List. <nil Unit | cons {Int,List}>)



  [] null
  [0] Param0
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17

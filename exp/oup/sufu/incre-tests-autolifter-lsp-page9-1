
List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 head : List -> Int -> Int
fold : (Int->Int->Int) -> List -> Int -> Int
length : List -> Int
sum : List -> Int
fold_list : (Int->List->List) -> List -> List -> List
rev : List -> List
max : Int -> Int -> Int
inf : Int
lsp : (List->Bool) -> List -> Int
issorted : List -> Bool
run : List -> Int


Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

fold_list = \f: Int -> List -> List. \x: List. \w0: List. 
    fix (
    \g: List -> List. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

rev = \x: List. 
    fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> f t (cons {h, y})
    | _ -> y
    end
) x (nil Unit);

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

inf = 100;

lsp = \b: List -> Bool. \x: List. 
    (fix (
    \f: List -> {Compress List, Int}. \x: List. 
    match x with
      cons {h, t} -> 
        let res = (f t) in 
            let ms = res.2 in 
                let x = res.1 in 
                    if (align (b (cons {h, unlabel x })) ) then {align (label (cons {h, unlabel x }) ) , max ms (+ 1 (align (length (unlabel x )) ))}
                    else if (b (cons {h, nil Unit})) then {let tmp1 = (cons {h, nil Unit}) in 
                        align (label tmp1 ) , max ms 1}
                    else {let tmp2 = (nil Unit) in 
                        align (label tmp2 ) , ms}
    | _ -> {let tmp3 = (nil Unit) in 
            align (label tmp3 ) , 0}
    end
) x).2;

issorted = \x: List. 
    (fix (
    \f: List -> {Bool, Int}. \l: List. 
    match l with
      cons {h, t} -> 
        let res = (f t) in 
            if (> h res.2) then {false, h}
            else {res.1, h}
    | nil _ -> {true, inf}
    end
) x).1;

run = lsp issorted;
align term #0: Bool
align@0 b (cons ({h,unlabel x}))
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
  h: Int
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  t: List. <cons {Int,List} | nil Unit>
align term #1: compress[0] List. <cons {Int,List} | nil Unit>
align@1 create@0 cons ({h,unlabel x})
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
  h: Int
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  t: List. <cons {Int,List} | nil Unit>
align term #2: Int
align@2 length (unlabel x)
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
  h: Int
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  t: List. <cons {Int,List} | nil Unit>
align term #3: compress[0] List. <cons {Int,List} | nil Unit>
align@3 create@0 tmp1
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  tmp1: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
align term #4: compress[0] List. <cons {Int,List} | nil Unit>
align@4 create@0 tmp2
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  tmp2: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
align term #5: compress[0] List. <cons {Int,List} | nil Unit>
align@5 create@0 tmp3
  x: List. <cons {Int,List} | nil Unit>
  tmp3: List. <cons {Int,List} | nil Unit>
Components for compress:
  head [List. <cons {Int,List} | nil Unit>,Int] -> Int 1
  max [Int,Int] -> Int 7
  inf [] -> Int 8
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  cons [(Int * List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0

Components for align:
  issorted [List. <cons {Int,List} | nil Unit>] -> Bool 10
  head [List. <cons {Int,List} | nil Unit>,Int] -> Int 1
  length [List. <cons {Int,List} | nil Unit>] -> Int 3
  max [Int,Int] -> Int 7
  fold [[Int]->[Int]->Int,List. <cons {Int,List} | nil Unit>,Int] -> Int 2
  inf [] -> Int 8
  fold_list [[Int]->[List. <cons {Int,List} | nil Unit>]->List. <cons {Int,List} | nil Unit>,List. <cons {Int,List} | nil Unit>,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 5
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  sum [List. <cons {Int,List} | nil Unit>] -> Int 4
  cons [(Int * List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  rev [List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 6

Components for comb:
  head [List. <cons {Int,List} | nil Unit>,Int] -> Int 1
  max [Int,Int] -> Int 7
  inf [] -> Int 8
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  cons [(Int * List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0

align term #0: Bool
align@0 b (cons ({h,unlabel x}))
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
  h: Int
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  t: List. <cons {Int,List} | nil Unit>
align term #1: compress[0] List. <cons {Int,List} | nil Unit>
align@1 create@0 cons ({h,unlabel x})
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
  h: Int
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  t: List. <cons {Int,List} | nil Unit>
align term #2: Int
align@2 length (unlabel x)
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
  h: Int
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  t: List. <cons {Int,List} | nil Unit>
align term #3: compress[0] List. <cons {Int,List} | nil Unit>
align@3 create@0 tmp1
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  tmp1: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
align term #4: compress[0] List. <cons {Int,List} | nil Unit>
align@4 create@0 tmp2
  x: compress[0] List. <cons {Int,List} | nil Unit>
  ms: Int
  tmp2: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  res: {compress[0] List. <cons {Int,List} | nil Unit>,Int}
align term #5: compress[0] List. <cons {Int,List} | nil Unit>
align@5 create@0 tmp3
  x: List. <cons {Int,List} | nil Unit>
  tmp3: List. <cons {Int,List} | nil Unit>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param1
  Param3
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  access1([Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
  head([Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  inf
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param2
  access0([Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
node: [Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit>
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int)
  Param0
  prod([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param1
  Param3
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  access1([Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
  head([Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  inf
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param2
  access0([Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
node: [Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit>
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int)
  Param0
  prod([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param1
  Param3
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  access1([Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
  head([Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  inf
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param2
  access0([Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
node: [Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit>
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int)
  Param0
  prod([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
num = 3
start: start
node: start
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param4
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  access1([Param0,Param1,Param2,Param3,Param4,Param5]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
  head([Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  inf
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit>
  Param2
  Param3
node: [Param0,Param1,Param2,Param3,Param4,Param5]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int)
  Param5
  prod([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param0
  access0([Param0,Param1,Param2,Param3,Param4,Param5]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
num = 4
start: start
node: start
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param4
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  access1([Param0,Param1,Param2,Param3,Param4,Param5]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
  head([Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  inf
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit>
  Param2
  Param3
node: [Param0,Param1,Param2,Param3,Param4,Param5]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int)
  Param5
  prod([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param0
  access0([Param0,Param1,Param2,Param3,Param4,Param5]@(Compress[0] List. <cons {Int,List} | nil Unit> * Int))
num = 5
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  head([Param0,Param1]@List. <cons {Int,List} | nil Unit> [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
  inf
node: [Param0,Param1]@List. <cons {Int,List} | nil Unit>
  Param0
  Param1
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  inf
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[List. <cons {Int,List} | nil Unit>->Int]([Int@0,Int@1]@Int []@Int [Param0]@List. <cons {Int,List} | nil Unit>)
  head([Param0]@List. <cons {Int,List} | nil Unit> [Param0]@Int)
  length([Param0]@List. <cons {Int,List} | nil Unit>)
  max([Param0]@Int [Param0]@Int)
  fold([Param0]@[Int]->[Int]->Int [Param0]@List. <cons {Int,List} | nil Unit> [Param0]@Int)
  inf
  sum([Param0]@List. <cons {Int,List} | nil Unit>)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  max([]@Int []@Int)
  inf
node: [Param0]@Bool
  issorted([Param0]@List. <cons {Int,List} | nil Unit>)
node: [Param0]@[Int]->[Int]->Int
  max
node: [Param0]@List. <cons {Int,List} | nil Unit>
  Param0
  rev([Param0]@List. <cons {Int,List} | nil Unit>)


















  [] null
  [0] Param1
  [1] head(Param4,Param1)
  [] length(Param0)
  [0] Param2 -> length(Param0)
  [] null
  [0] Param2 -> length(Param0)
  [] length(Param0)
  [] length(Param0)
  [] length(Param0)
compress #0: Int
pass #0: 
let c0 = (head t h) in 
    <= h c0
pass #1: 
+ 1 x
pass #2: 
x
pass #3: 
1
pass #4: 
0
pass #5: 
0

Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

fold_list = \f: Int -> List -> List. \x: List. \w0: List. 
    fix (
    \g: List -> List. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

rev = \x: List. 
    fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> f t (cons {h, y})
    | _ -> y
    end
) x (nil Unit);

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

inf = 100;

lsp = \b: List -> Bool. \x: List. 
    (fix (
    \f: List -> {Int, Int}. \x: List. 
    match x with
      cons {h, t} -> 
        let res = (f t) in 
            let ms = res.2 in 
                let x = res.1 in 
                    if (let c0 = (head t h) in 
                        <= h c0) then {+ 1 x, max ms (+ 1 x)}
                    else if (b (cons {h, nil Unit})) then {1, max ms 1}
                    else {0, ms}
    | _ -> {0, 0}
    end
) x).2;

issorted = \x: List. 
    (fix (
    \f: List -> {Bool, Int}. \l: List. 
    match l with
      cons {h, t} -> 
        let res = (f t) in 
            if (> h res.2) then {false, h}
            else {res.1, h}
    | nil _ -> {true, inf}
    end
) x).1;

run = lsp issorted;
syn-comb: 0.087931
collect: 18.4895
label: 0.027191
extend-component: 0.020801
execute: 0.176885
syn-align: 18.7484
comb-size: 20
align-size: 3
extract-size: 9
18.8732
Success

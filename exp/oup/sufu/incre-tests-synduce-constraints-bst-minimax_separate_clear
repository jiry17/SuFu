
Tree :: Tree. <leaf Int | node {Int,Tree,Tree}>
 leaf : Int -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <leaf Int | node {Int,Tree',Tree'}>
 min : Int -> Int -> Int
max : Int -> Int -> Int
tmin : Tree -> Int
tmax : Tree -> Int
is_bst : Tree -> Bool
spec : Tree -> {Int, Int}
target : Tree -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
main : Tree -> {Int, Int}


Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

spec = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {x, x}
    | node {a, l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                {max a (max lres.1 rres.1), min a (min lres.2 rres.2)}
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf x -> 
        let tmp1 = (leaf x) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let lmin = (tmin l) in 
            let lmax = (tmax l) in 
                let rmin = (tmin r) in 
                    let rmax = (tmax r) in 
                        let tmp2 = (node {a, l, r}) in 
                            align (label tmp2 ) 
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp3 = (target t) in 
        align (spec (unlabel tmp3 )) 
    else {0, 0};
align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  x: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 tmp2
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  rmin: Int
  a: Int
  rmax: Int
  lmax: Int
  tmp2: Tree. <leaf Int | node {Int,Tree,Tree}>
  lmin: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: {Int,Int}
align@2 spec (unlabel tmp3)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
Components for compress:
  node [(Int*Tree. <leaf Int | node {Int,Tree,Tree}>*Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 2

Components for align:
  spec [Tree. <leaf Int | node {Int,Tree,Tree}>] -> (Int*Int) 6
  node [(Int*Tree. <leaf Int | node {Int,Tree,Tree}>*Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 1
  tmax [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 4
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 2
  is_bst [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Bool 5
  tmin [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 3

Components for comb:
  node [(Int*Tree. <leaf Int | node {Int,Tree,Tree}>*Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 2

align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  x: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  (0) {x: 3,t: leaf 3,tmp1: leaf 3} @ {} -> compress leaf 3
  (0) {x: -4,t: leaf -4,tmp1: leaf -4} @ {} -> compress leaf -4
  (0) {x: -2,t: leaf -2,tmp1: leaf -2} @ {} -> compress leaf -2
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 tmp2
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  rmin: Int
  a: Int
  rmax: Int
  lmax: Int
  tmp2: Tree. <leaf Int | node {Int,Tree,Tree}>
  lmin: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: {Int,Int}
align@2 spec (unlabel tmp3)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  (2) {t: leaf 3,tmp3: compress leaf 3} @ {} -> (3,3)
  (2) {t: leaf -4,tmp3: compress leaf -4} @ {} -> (-4,-4)
  (2) {t: leaf -2,tmp3: compress leaf -2} @ {} -> (-2,-2)


















  [0] tmax(Param0)
  [1] tmin(Param0)
  [0] Param1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] tmax(Param0)
  [1] tmin(Param0)
  [0] Param4
  [1] Param7
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] null
  [1] null
  [0] Param1 -> tmax(Param0)
  [1] Param1 -> tmin(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: {Int,Int}
pass #0: 
{x, x}
pass #1: 
{rmax, lmin}
pass #2: 
{tmp3.1, tmp3.2}

Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

spec = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {x, x}
    | node {a, l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                {max a (max lres.1 rres.1), min a (min lres.2 rres.2)}
    end
);

target = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {x, x}
    | node {a, l, r} -> 
        let lmin = (tmin l) in 
            let rmax = (tmax r) in 
                {rmax, lmin}
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp3 = (target t) in 
        {tmp3.1, tmp3.2}
    else {0, 0};
syn-comb: 1.00945
collect: 34.5406
label: 0.018643
extend-component: 8e-05
execute: 0.11306
syn-align: 34.0864
35.122
Success


List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 NList :: NList. <line List | ncons {List,NList}>
line : List -> NList'. <line List | ncons {List,NList'}>
ncons : {List,NList} -> NList'. <line List | ncons {List,NList'}>
CList :: CList. <sglt List | cat {CList,Int,CList}>
sglt : List -> CList'. <sglt List | cat {CList',Int,CList'}>
cat : {CList,Int,CList} ->
      CList'. <sglt List | cat {CList',Int,CList'}>
c2n : CList -> NList'. <line List | ncons {List,NList'}>
lsum : List -> Int
min : Int -> Int -> Int
max : Int -> Int -> Int
sorted : CList -> Bool
spec : NList -> Int
target : CList -> CList'. <sglt List | cat {CList',Int,CList'}>
main : CList -> Int


Inductive List;

Inductive NList;

Inductive CList;

c2n = let aux = (fix (
    \f: NList -> CList -> NList. \pre: NList. \c: CList. 
    match c with
      sglt a -> ncons {a, pre}
    | cat {l, _, r} -> f (f pre r) l
    end
)) in 
        fix (
        \f: CList -> NList. \c: CList. 
        match c with
          sglt a -> line a
        | cat {l, _, r} -> aux (f r) l
        end
    );

lsum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> + h (f t)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

sorted = let lmin = (fix (
    \f: CList -> Int. \c: CList. 
    match c with
      sglt a -> lsum a
    | cat {l, _, r} -> min (f l) (f r)
    end
)) in 
        let lmax = (fix (
        \f: CList -> Int. \c: CList. 
        match c with
          sglt a -> lsum a
        | cat {l, _, r} -> max (f l) (f r)
        end
    )) in 
            fix (
            \f: CList -> Bool. \c: CList. 
            match c with
              sglt a -> true
            | cat {l, piv, r} -> and (and (< (lmax l) piv) (< piv (lmin r))) (and (f l) (f r))
            end
        );

spec = \xs: NList. 
    (fix (
    \f: NList -> {Int, Bool}. \xs: NList. 
    match xs with
      line a -> {max 0 (lsum a), >= (lsum a) 0}
    | ncons {h, t} -> 
        let res = (f t) in 
            let line_sum = (lsum h) in 
                {if (and res.2 (>= line_sum 0)) then + res.1 line_sum
                else res.1, and res.2 (>= line_sum 0)}
    end
) xs).1;

target = let list_repr = (fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      elt a -> 
        align (label xs ) 
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
    end
)) in 
        fix (
        \f: CList -> Compress CList. \c: CList. 
        match c with
          sglt x -> 
            let tmp2 = (list_repr x) in 
                align (label (sglt (unlabel tmp2 )) ) 
        | cat {l, piv, r} -> if (<= piv 0) then let tmp3 = (f r) in 
                align (label (cat {l, piv, unlabel tmp3 }) ) 
            else let tmp4 = (f l) in 
                let tmp5 = (f r) in 
                    align (label (cat {unlabel tmp4 , piv, unlabel tmp5 }) ) 
        end
    );

main = \c: CList. 
    if (sorted c) then let tmp6 = (target c) in 
        align (spec (c2n (unlabel tmp6 ))) 
    else 0;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 xs
  xs: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp1})
  h: Int
  xs: List. <elt Int | cons {Int,List}>
  tmp1: compress[0] List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
align term #2: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align@2 create@1 sglt (unlabel tmp2)
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  x: List. <elt Int | cons {Int,List}>
align term #3: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align@3 create@1 cat ({l,piv,unlabel tmp3})
  r: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  piv: Int
  tmp3: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  l: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align term #4: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align@4 create@1 cat ({unlabel tmp4,piv,unlabel tmp5})
  tmp4: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  tmp5: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  l: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  r: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  piv: Int
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align term #5: Int
align@5 spec (c2n (unlabel tmp6))
  tmp6: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
Components for compress:
  sglt [List. <elt Int | cons {Int,List}>] -> CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> * Int * CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)] -> CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> 2
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  min [Int,Int] -> Int 5
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 6

Components for align:
  spec [NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>] -> Int 8
  sglt [List. <elt Int | cons {Int,List}>] -> CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> * Int * CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)] -> CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> 2
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  c2n [CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 3
  lsum [List. <elt Int | cons {Int,List}>] -> Int 4
  min [Int,Int] -> Int 5
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 6
  sorted [CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>] -> Bool 7

Components for comb:
  sglt [List. <elt Int | cons {Int,List}>] -> CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> * Int * CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)] -> CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}> 2
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  min [Int,Int] -> Int 5
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 6

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 xs
  xs: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp1})
  h: Int
  xs: List. <elt Int | cons {Int,List}>
  tmp1: compress[0] List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
align term #2: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align@2 create@1 sglt (unlabel tmp2)
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  x: List. <elt Int | cons {Int,List}>
align term #3: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align@3 create@1 cat ({l,piv,unlabel tmp3})
  r: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  piv: Int
  tmp3: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  l: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align term #4: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align@4 create@1 cat ({unlabel tmp4,piv,unlabel tmp5})
  tmp4: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  tmp5: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  l: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  r: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  piv: Int
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
align term #5: Int
align@5 spec (c2n (unlabel tmp6))
  tmp6: compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  c: CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <elt Int | cons {Int,List}>
  Param2
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] List. <elt Int | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>([Param0,Param1,Param2,Param3,Param4]@Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param2
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  Param3
num = 4
start: start
node: start
  Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param4
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  Param0
  Param1
num = 5
start: start
node: start
  Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>([Param0,Param1]@Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Compress[1] CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  spec([Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Int@0]@List. <elt Int | cons {Int,List}>)
  min([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  spec([Bool@0,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
  min([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  max([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
node: [Bool@0,Int@0]@Bool
  Bool@0
  sorted([Bool@0,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Param0]@List. <elt Int | cons {Int,List}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@List. <elt Int | cons {Int,List}>)
  sorted([Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Int@0]@Bool
  sorted([Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Int@0,Int@1]@Bool
  sorted([Int@0,Int@1]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0]@Int)
node: [Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Int@0,Int@1]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Bool@0,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  Param0
  elt([Param0]@Int)
num = 1
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>
  List. <elt Int | cons {Int,List}>@0
  elt([List. <elt Int | cons {Int,List}>@0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  spec([Int@0,Int@1,Int@2]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
  min([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@Bool
  Bool@0
  Bool@1
  sorted([Bool@0,Bool@1,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Bool@0,Bool@1,Int@0]@Int
  Int@0
  +([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  -([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  ite([Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  spec([Bool@0,Bool@1,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
  min([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  max([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1,Int@2]@Int [Int@0]@List. <elt Int | cons {Int,List}>)
  spec([Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Int@0]@List. <elt Int | cons {Int,List}>)
  min([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  spec([Bool@0,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
  min([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  max([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
node: [Bool@0,Int@0]@Bool
  Bool@0
  sorted([Bool@0,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>->Int]([List. <elt Int | cons {Int,List}>@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([Param0]@List. <elt Int | cons {Int,List}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [List. <elt Int | cons {Int,List}>@0]@Int
  +([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  -([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  ite([List. <elt Int | cons {Int,List}>@0]@Bool [List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  spec([List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  lsum([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  min([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  max([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
node: [Param0]@Bool
  fold[CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>->Bool]([List. <elt Int | cons {Int,List}>@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@List. <elt Int | cons {Int,List}>)
  sorted([Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [List. <elt Int | cons {Int,List}>@0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  sorted([List. <elt Int | cons {Int,List}>@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Int@0,Int@1,Int@2]@Bool
  sorted([Int@0,Int@1,Int@2]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Int@0]@Bool
  sorted([Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [Int@0,Int@1]@Bool
  sorted([Int@0,Int@1]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
node: [List. <elt Int | cons {Int,List}>@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  sglt([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  elt([Param0]@Int)
node: [Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Bool@1,Int@0]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0]@Int)
node: [Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Param0]@List. <elt Int | cons {Int,List}>)
node: [List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([List. <elt Int | cons {Int,List}>@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Int@0,Int@1,Int@2]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Bool@0,Bool@1,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Int@0,Int@1]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  c2n([Bool@0,Int@0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>)
  line([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@CList. <sglt List. <elt Int | cons {Int,List}> | cat {CList,Int,CList}>
  Param0
  sglt([Param0]@List. <elt Int | cons {Int,List}>)


















  [] lsum(Param0)
  [0] Param1
  [] lsum(Param0)
  [0] Param0
  [1] Param2 -> lsum(Param0)
  [] spec(c2n(Param0))
  [0] Param1 -> lsum(Param0)
  [] spec(c2n(Param0))
  [0] Param3 -> spec(c2n(Param0))
  [] spec(c2n(Param0))
  [0] Param0 -> spec(c2n(Param0))
  [1] Param1 -> spec(c2n(Param0))
  [] null
  [0] Param0 -> spec(c2n(Param0))
compress #0: Int
compress #1: Int
pass #0: 
a
pass #1: 
+ h tmp1
pass #2: 
- tmp2 (min tmp2 0)
pass #3: 
tmp3
pass #4: 
+ tmp4 tmp5
pass #5: 
tmp6

Inductive List;

Inductive NList;

Inductive CList;

c2n = let aux = (fix (
    \f: NList -> CList -> NList. \pre: NList. \c: CList. 
    match c with
      sglt a -> ncons {a, pre}
    | cat {l, _, r} -> f (f pre r) l
    end
)) in 
        fix (
        \f: CList -> NList. \c: CList. 
        match c with
          sglt a -> line a
        | cat {l, _, r} -> aux (f r) l
        end
    );

lsum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> + h (f t)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

sorted = let lmin = (fix (
    \f: CList -> Int. \c: CList. 
    match c with
      sglt a -> lsum a
    | cat {l, _, r} -> min (f l) (f r)
    end
)) in 
        let lmax = (fix (
        \f: CList -> Int. \c: CList. 
        match c with
          sglt a -> lsum a
        | cat {l, _, r} -> max (f l) (f r)
        end
    )) in 
            fix (
            \f: CList -> Bool. \c: CList. 
            match c with
              sglt a -> true
            | cat {l, piv, r} -> and (and (< (lmax l) piv) (< piv (lmin r))) (and (f l) (f r))
            end
        );

spec = \xs: NList. 
    (fix (
    \f: NList -> {Int, Bool}. \xs: NList. 
    match xs with
      line a -> {max 0 (lsum a), >= (lsum a) 0}
    | ncons {h, t} -> 
        let res = (f t) in 
            let line_sum = (lsum h) in 
                {if (and res.2 (>= line_sum 0)) then + res.1 line_sum
                else res.1, and res.2 (>= line_sum 0)}
    end
) xs).1;

target = let list_repr = (fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt a -> a
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            + h tmp1
    end
)) in 
        fix (
        \f: CList -> Int. \c: CList. 
        match c with
          sglt x -> 
            let tmp2 = (list_repr x) in 
                - tmp2 (min tmp2 0)
        | cat {l, piv, r} -> if (<= piv 0) then let tmp3 = (f r) in 
                tmp3
            else let tmp4 = (f l) in 
                let tmp5 = (f r) in 
                    + tmp4 tmp5
        end
    );

main = \c: CList. 
    if (sorted c) then let tmp6 = (target c) in 
        tmp6
    else 0;
syn-comb: 0.209099
collect: 16.6661
label: 0.030398
extend-component: 0.00074
execute: 1.75617
syn-align: 18.6235
comb-size: 22
align-size: 8
extract-size: 10
18.8823
Success

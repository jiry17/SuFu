
List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 List2D :: List2D. <cons2D {List,List2D} | nil2D Unit>
cons2D : {List,List2D} ->
         List2D'. <cons2D {List,List2D'} | nil2D Unit>
nil2D : Unit -> List2D'. <cons2D {List,List2D'} | nil2D Unit>
sum : List -> Int
max : Int -> Int -> Int
maximum : List -> Int
pushback : List -> Int -> List'. <cons {Int,List'} | nil Unit>
inits : List -> List2D'. <cons2D {List,List2D'} | nil2D Unit>
maxsum : List2D -> Int
mps : List -> Int


Inductive List;

Inductive List2D;

sum = fix (
    \f: List -> Int. \l: List. 
    match l with
      cons {h, t} -> + h (f t)
    | nil _ -> 0
    end
);

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

maximum = fix (
    \f: List -> Int. \l: List. 
    match l with
      cons {h, t} -> 
        let res = (f t) in 
            max h res
    | _ -> 0
    end
);

pushback = fix (
    \f: List -> Int -> List. \l: List. \a: Int. 
    match l with
      cons {h, t} -> cons {h, f t a}
    | _ -> cons {a, nil unit}
    end
);

inits = fix (
    \f: Compress List -> List -> Compress List2D. \init: Compress List. \l: List. 
    match l with
      cons {h, t} -> 
        let tmp1 = (f (align (label (pushback (unlabel init ) h) ) ) t) in 
            align (label (cons2D {init, unlabel tmp1 }) ) 
    | nil _ -> 
        let tmp2 = (cons2D {init, nil2D unit}) in 
            align (label tmp2 ) 
    end
) (let tmp3 = (nil unit) in 
        align (label tmp3 ) );

maxsum = fix (
    \f: List2D -> Int. \l: List2D. 
    match l with
      cons2D {h, t} -> max (align (sum (unlabel h )) ) (f t)
    | nil2D _ -> 0
    end
);

mps = \x: List. 
    let tmp4 = (inits x) in 
        align (maxsum (unlabel tmp4 )) ;
align term #0: compress[1] List
align@0 create@1 pushback (unlabel init) (h)
  init: compress[1] List. <cons {Int,List} | nil Unit>
  l: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
align term #1: compress[0] List2D. <cons2D {compress[1] List,List2D} | nil2D Unit>
align@1 create@0 cons2D ({init,unlabel tmp1})
  init: compress[1] List. <cons {Int,List} | nil Unit>
  l: List. <cons {Int,List} | nil Unit>
  tmp1: compress[0] List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
align term #2: compress[0] List2D. <cons2D {compress[1] List,List2D} | nil2D Unit>
align@2 create@0 tmp2
  init: compress[1] List. <cons {Int,List} | nil Unit>
  tmp2: List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  l: List. <cons {Int,List} | nil Unit>
align term #3: compress[1] List. <cons {Int,List} | nil Unit>
align@3 create@1 tmp3
  tmp3: List. <cons {Int,List} | nil Unit>
align term #4: Int
align@4 sum (unlabel h)
  l: List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  t: List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  h: compress[1] List. <cons {Int,List} | nil Unit>
align term #5: Int
align@5 maxsum (unlabel tmp4)
  tmp4: compress[0] List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  x: List. <cons {Int,List} | nil Unit>
Components for compress:
  max [Int,Int] -> Int 3
  cons [(Int*List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0

Components for align:
  maximum [List. <cons {Int,List} | nil Unit>] -> Int 4
  max [Int,Int] -> Int 3
  pushback [List. <cons {Int,List} | nil Unit>,Int] -> List. <cons {Int,List} | nil Unit> 5
  cons [(Int*List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  sum [List. <cons {Int,List} | nil Unit>] -> Int 2

Components for comb:
  max [Int,Int] -> Int 3
  cons [(Int*List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0

align term #0: compress[1] List
align@0 create@1 pushback (unlabel init) (h)
  init: compress[1] List. <cons {Int,List} | nil Unit>
  l: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  (0) {l: cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),init: compress nil unit,h: -3,t: cons (-1,cons (3,cons (1,cons (3,nil unit))))} @ {} -> compress cons (-3,nil unit)
  (0) {l: cons (-1,cons (3,cons (1,cons (3,nil unit)))),init: compress cons (-3,nil unit),h: -1,t: cons (3,cons (1,cons (3,nil unit)))} @ {} -> compress cons (-3,cons (-1,nil unit))
  (0) {l: cons (3,cons (1,cons (3,nil unit))),init: compress cons (-3,cons (-1,nil unit)),h: 3,t: cons (1,cons (3,nil unit))} @ {} -> compress cons (-3,cons (-1,cons (3,nil unit)))
  (0) {l: cons (1,cons (3,nil unit)),init: compress cons (-3,cons (-1,cons (3,nil unit))),h: 1,t: cons (3,nil unit)} @ {} -> compress cons (-3,cons (-1,cons (3,cons (1,nil unit))))
  (0) {l: cons (3,nil unit),init: compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),h: 3,t: nil unit} @ {} -> compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit)))))
  (0) {l: cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),init: compress nil unit,h: 5,t: cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))} @ {} -> compress cons (5,nil unit)
  (0) {l: cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit))))))),init: compress cons (5,nil unit),h: -1,t: cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit))))))} @ {} -> compress cons (5,cons (-1,nil unit))
  (0) {l: cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))),init: compress cons (5,cons (-1,nil unit)),h: 2,t: cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))} @ {} -> compress cons (5,cons (-1,cons (2,nil unit)))
  (0) {l: cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit))))),init: compress cons (5,cons (-1,cons (2,nil unit))),h: 5,t: cons (4,cons (-2,cons (-1,cons (0,nil unit))))} @ {} -> compress cons (5,cons (-1,cons (2,cons (5,nil unit))))
  (0) {l: cons (4,cons (-2,cons (-1,cons (0,nil unit)))),init: compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),h: 4,t: cons (-2,cons (-1,cons (0,nil unit)))} @ {} -> compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit)))))
align term #1: compress[0] List2D. <cons2D {compress[1] List,List2D} | nil2D Unit>
align@1 create@0 cons2D ({init,unlabel tmp1})
  init: compress[1] List. <cons {Int,List} | nil Unit>
  l: List. <cons {Int,List} | nil Unit>
  tmp1: compress[0] List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  (1) {l: cons (3,nil unit),init: compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),h: 3,tmp1: compress cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit),t: nil unit} @ {} -> compress cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))
  (1) {l: cons (1,cons (3,nil unit)),init: compress cons (-3,cons (-1,cons (3,nil unit))),h: 1,tmp1: compress cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)),t: cons (3,nil unit)} @ {} -> compress cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))
  (1) {l: cons (3,cons (1,cons (3,nil unit))),init: compress cons (-3,cons (-1,nil unit)),h: 3,tmp1: compress cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))),t: cons (1,cons (3,nil unit))} @ {} -> compress cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))))
  (1) {l: cons (-1,cons (3,cons (1,cons (3,nil unit)))),init: compress cons (-3,nil unit),h: -1,tmp1: compress cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))),t: cons (3,cons (1,cons (3,nil unit)))} @ {} -> compress cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))))
  (1) {l: cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),init: compress nil unit,h: -3,tmp1: compress cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))))),t: cons (-1,cons (3,cons (1,cons (3,nil unit))))} @ {} -> compress cons2D (compress nil unit,cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))))))
  (1) {l: cons (0,nil unit),init: compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),h: 0,tmp1: compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit),t: nil unit} @ {} -> compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))
  (1) {l: cons (-1,cons (0,nil unit)),init: compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),h: -1,tmp1: compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)),t: cons (0,nil unit)} @ {} -> compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))
  (1) {l: cons (-2,cons (-1,cons (0,nil unit))),init: compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),h: -2,tmp1: compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))),t: cons (-1,cons (0,nil unit))} @ {} -> compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))
  (1) {l: cons (4,cons (-2,cons (-1,cons (0,nil unit)))),init: compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),h: 4,tmp1: compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))),t: cons (-2,cons (-1,cons (0,nil unit)))} @ {} -> compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))))
  (1) {l: cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit))))),init: compress cons (5,cons (-1,cons (2,nil unit))),h: 5,tmp1: compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))),t: cons (4,cons (-2,cons (-1,cons (0,nil unit))))} @ {} -> compress cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))))
align term #2: compress[0] List2D. <cons2D {compress[1] List,List2D} | nil2D Unit>
align@2 create@0 tmp2
  init: compress[1] List. <cons {Int,List} | nil Unit>
  tmp2: List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  l: List. <cons {Int,List} | nil Unit>
  (2) {tmp2: cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit),l: nil unit,init: compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit)))))} @ {} -> compress cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)
  (2) {tmp2: cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit),l: nil unit,init: compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit))))))))} @ {} -> compress cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)
  (2) {tmp2: cons2D (compress cons (-4,cons (-1,cons (4,cons (3,cons (-3,cons (3,nil unit)))))),nil2D unit),l: nil unit,init: compress cons (-4,cons (-1,cons (4,cons (3,cons (-3,cons (3,nil unit))))))} @ {} -> compress cons2D (compress cons (-4,cons (-1,cons (4,cons (3,cons (-3,cons (3,nil unit)))))),nil2D unit)
  (2) {tmp2: cons2D (compress cons (-2,cons (-1,cons (5,cons (-4,cons (-2,nil unit))))),nil2D unit),l: nil unit,init: compress cons (-2,cons (-1,cons (5,cons (-4,cons (-2,nil unit)))))} @ {} -> compress cons2D (compress cons (-2,cons (-1,cons (5,cons (-4,cons (-2,nil unit))))),nil2D unit)
  (2) {tmp2: cons2D (compress nil unit,nil2D unit),l: nil unit,init: compress nil unit} @ {} -> compress cons2D (compress nil unit,nil2D unit)
  (2) {tmp2: cons2D (compress cons (2,cons (-5,cons (-1,cons (-4,nil unit)))),nil2D unit),l: nil unit,init: compress cons (2,cons (-5,cons (-1,cons (-4,nil unit))))} @ {} -> compress cons2D (compress cons (2,cons (-5,cons (-1,cons (-4,nil unit)))),nil2D unit)
  (2) {tmp2: cons2D (compress cons (-3,cons (1,cons (-3,cons (-3,cons (-4,nil unit))))),nil2D unit),l: nil unit,init: compress cons (-3,cons (1,cons (-3,cons (-3,cons (-4,nil unit)))))} @ {} -> compress cons2D (compress cons (-3,cons (1,cons (-3,cons (-3,cons (-4,nil unit))))),nil2D unit)
  (2) {tmp2: cons2D (compress cons (3,cons (0,cons (-3,cons (1,nil unit)))),nil2D unit),l: nil unit,init: compress cons (3,cons (0,cons (-3,cons (1,nil unit))))} @ {} -> compress cons2D (compress cons (3,cons (0,cons (-3,cons (1,nil unit)))),nil2D unit)
align term #3: compress[1] List. <cons {Int,List} | nil Unit>
align@3 create@1 tmp3
  tmp3: List. <cons {Int,List} | nil Unit>
align term #4: Int
align@4 sum (unlabel h)
  l: List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  t: List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  h: compress[1] List. <cons {Int,List} | nil Unit>
  (4) {t: cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))))),h: compress nil unit,l: cons2D (compress nil unit,cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))))))} @ {} -> 0
  (4) {t: cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))),h: compress cons (-3,nil unit),l: cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))))} @ {} -> -3
  (4) {t: cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))),h: compress cons (-3,cons (-1,nil unit)),l: cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))))} @ {} -> -4
  (4) {t: cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)),h: compress cons (-3,cons (-1,cons (3,nil unit))),l: cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))} @ {} -> -1
  (4) {t: cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit),h: compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),l: cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit))} @ {} -> 0
  (4) {t: nil2D unit,h: compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),l: cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)} @ {} -> 3
  (4) {t: cons2D (compress cons (5,nil unit),cons2D (compress cons (5,cons (-1,nil unit)),cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))))))),h: compress nil unit,l: cons2D (compress nil unit,cons2D (compress cons (5,nil unit),cons2D (compress cons (5,cons (-1,nil unit)),cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))))))))} @ {} -> 0
  (4) {t: cons2D (compress cons (5,cons (-1,nil unit)),cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))))),h: compress cons (5,nil unit),l: cons2D (compress cons (5,nil unit),cons2D (compress cons (5,cons (-1,nil unit)),cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))))))} @ {} -> 5
  (4) {t: cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))))),h: compress cons (5,cons (-1,nil unit)),l: cons2D (compress cons (5,cons (-1,nil unit)),cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit)))))))} @ {} -> 4
  (4) {t: cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))),h: compress cons (5,cons (-1,cons (2,nil unit))),l: cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))))} @ {} -> 6
align term #5: Int
align@5 maxsum (unlabel tmp4)
  tmp4: compress[0] List2D. <cons2D {compress[1] List. <cons {Int,List} | nil Unit>,List2D} | nil2D Unit>
  x: List. <cons {Int,List} | nil Unit>
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (-1,nil unit)),cons2D (compress cons (-3,cons (-1,cons (3,nil unit))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,nil unit)))),cons2D (compress cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit))))),nil2D unit)))))),x: cons (-3,cons (-1,cons (3,cons (1,cons (3,nil unit)))))} @ {} -> 3
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (5,nil unit),cons2D (compress cons (5,cons (-1,nil unit)),cons2D (compress cons (5,cons (-1,cons (2,nil unit))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,nil unit)))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,nil unit))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,nil unit)))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,nil unit))))))),cons2D (compress cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit)))))))),nil2D unit))))))))),x: cons (5,cons (-1,cons (2,cons (5,cons (4,cons (-2,cons (-1,cons (0,nil unit))))))))} @ {} -> 15
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (-4,nil unit),cons2D (compress cons (-4,cons (-1,nil unit)),cons2D (compress cons (-4,cons (-1,cons (4,nil unit))),cons2D (compress cons (-4,cons (-1,cons (4,cons (3,nil unit)))),cons2D (compress cons (-4,cons (-1,cons (4,cons (3,cons (-3,nil unit))))),cons2D (compress cons (-4,cons (-1,cons (4,cons (3,cons (-3,cons (3,nil unit)))))),nil2D unit))))))),x: cons (-4,cons (-1,cons (4,cons (3,cons (-3,cons (3,nil unit))))))} @ {} -> 2
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (-2,nil unit),cons2D (compress cons (-2,cons (-1,nil unit)),cons2D (compress cons (-2,cons (-1,cons (5,nil unit))),cons2D (compress cons (-2,cons (-1,cons (5,cons (-4,nil unit)))),cons2D (compress cons (-2,cons (-1,cons (5,cons (-4,cons (-2,nil unit))))),nil2D unit)))))),x: cons (-2,cons (-1,cons (5,cons (-4,cons (-2,nil unit)))))} @ {} -> 2
  (5) {tmp4: compress cons2D (compress nil unit,nil2D unit),x: nil unit} @ {} -> 0
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (2,nil unit),cons2D (compress cons (2,cons (-5,nil unit)),cons2D (compress cons (2,cons (-5,cons (-1,nil unit))),cons2D (compress cons (2,cons (-5,cons (-1,cons (-4,nil unit)))),nil2D unit))))),x: cons (2,cons (-5,cons (-1,cons (-4,nil unit))))} @ {} -> 2
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (-3,nil unit),cons2D (compress cons (-3,cons (1,nil unit)),cons2D (compress cons (-3,cons (1,cons (-3,nil unit))),cons2D (compress cons (-3,cons (1,cons (-3,cons (-3,nil unit)))),cons2D (compress cons (-3,cons (1,cons (-3,cons (-3,cons (-4,nil unit))))),nil2D unit)))))),x: cons (-3,cons (1,cons (-3,cons (-3,cons (-4,nil unit)))))} @ {} -> 0
  (5) {tmp4: compress cons2D (compress nil unit,cons2D (compress cons (3,nil unit),cons2D (compress cons (3,cons (0,nil unit)),cons2D (compress cons (3,cons (0,cons (-3,nil unit))),cons2D (compress cons (3,cons (0,cons (-3,cons (1,nil unit)))),nil2D unit))))),x: cons (3,cons (0,cons (-3,cons (1,nil unit))))} @ {} -> 3


Tree :: Tree. <leaf Int | node {Int,Tree,Tree}>
 leaf : Int -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <leaf Int | node {Int,Tree',Tree'}>
 spec : Tree -> Bool
repr : Tree -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
main : Tree -> Bool


Inductive Tree;

spec = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Bool}. \t: Tree. 
    match t with
      leaf a -> {a, true}
    | node {a, l, r} -> 
        let r1 = (f l) in 
            let r2 = (f r) in 
                {a, and (and (and (< r1.1 a) (< a r2.1)) r1.2) r2.2}
    end
) t).2;

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf a -> 
        let tmp1 = (leaf a) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  a: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
align term #2: Bool
align@2 spec (unlabel tmp4)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
Components for compress:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0

Components for align:
  spec [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Bool 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0

Components for comb:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0

align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  a: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
align term #2: Bool
align@2 spec (unlabel tmp4)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@Int
  Int@0
  +([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  -([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  ite([Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
node: [Bool@0,Bool@1,Int@0]@Bool
  Bool@0
  Bool@1
  spec([Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0]@Bool
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Bool]([Int@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0]@Bool
  spec([Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2]@Bool
  spec([Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Bool@0,Bool@1,Int@0]@Int)
node: [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  Param0
  leaf([Param0]@Int)















  [0] spec(Param0)
  [1] fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [0] Param0
  [0] spec(Param0)
  [1] fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [0] Param5
  [1] Param2 -> spec(Param0)
  [2] Param2 -> fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [3] Param4 -> spec(Param0)
  [4] Param4 -> fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
compress #0: {Bool,Int}
pass #0: 
{true, a}
pass #1: 
{and (and (and (< tmp2.2 a) tmp3.1) tmp2.1) (< a tmp3.2), a}
pass #2: 
tmp4.1

Inductive Tree;

spec = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Bool}. \t: Tree. 
    match t with
      leaf a -> {a, true}
    | node {a, l, r} -> 
        let r1 = (f l) in 
            let r2 = (f r) in 
                {a, and (and (and (< r1.1 a) (< a r2.1)) r1.2) r2.2}
    end
) t).2;

repr = fix (
    \f: Tree -> {Bool, Int}. \t: Tree. 
    match t with
      leaf a -> {true, a}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {and (and (and (< tmp2.2 a) tmp3.1) tmp2.1) (< a tmp3.2), a}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        tmp4.1;
syn-comb: 0.548721
collect: 1.12436
label: 0.013664
extend-component: 0.002088
execute: 1.65002
syn-align: 2.9383
comb-size: 32
align-size: 11
extract-size: 6
3.50672
Success

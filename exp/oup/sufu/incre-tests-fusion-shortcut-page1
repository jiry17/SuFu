
List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 BoolList :: BoolList. <bnil Unit | bcons {Bool,BoolList}>
bnil : Unit -> BoolList'. <bnil Unit | bcons {Bool,BoolList'}>
bcons : {Bool,BoolList} ->
        BoolList'. <bnil Unit | bcons {Bool,BoolList'}>
map : (Int->Bool) ->
      List -> BoolList'. <bnil Unit | bcons {Bool,BoolList'}>
p : Int -> Bool
all : BoolList -> Bool
main : List -> Bool


Inductive List;

Inductive BoolList;

map = \f: Int -> Bool. 
    fix (
    \g: List -> Compress BoolList. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (bnil Unit) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (f h) in 
            let tmp3 = (g t) in 
                align (label (bcons {tmp2, unlabel tmp3 }) ) 
    end
);

p = \x: Int. 
    >= 0 x;

all = fix (
    \f: BoolList -> Bool. \xs: BoolList. 
    match xs with
      bnil _ -> true
    | bcons {h, t} -> and h (f t)
    end
);

main = \xs: List. 
    let tmp4 = (map p xs) in 
        align (all (unlabel tmp4 )) ;
align term #0: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: BoolList. <bnil Unit | bcons {Bool,BoolList}>
align term #1: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
align@1 create@0 bcons ({tmp2,unlabel tmp3})
  tmp3: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: Bool
  h: Int
align term #2: Bool
align@2 all (unlabel tmp4)
  tmp4: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
  xs: List. <nil Unit | cons {Int,List}>
Components for compress:
  p [Int] -> Bool 3
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  bcons [(Bool * BoolList. <bnil Unit | bcons {Bool,BoolList}>)] -> BoolList. <bnil Unit | bcons {Bool,BoolList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  bnil [Bot] -> BoolList. <bnil Unit | bcons {Bool,BoolList}> 1

Components for align:
  all [BoolList. <bnil Unit | bcons {Bool,BoolList}>] -> Bool 4
  p [Int] -> Bool 3
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  bcons [(Bool * BoolList. <bnil Unit | bcons {Bool,BoolList}>)] -> BoolList. <bnil Unit | bcons {Bool,BoolList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  bnil [Bot] -> BoolList. <bnil Unit | bcons {Bool,BoolList}> 1

Components for comb:
  p [Int] -> Bool 3
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  bcons [(Bool * BoolList. <bnil Unit | bcons {Bool,BoolList}>)] -> BoolList. <bnil Unit | bcons {Bool,BoolList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  bnil [Bot] -> BoolList. <bnil Unit | bcons {Bool,BoolList}> 1

align term #0: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: BoolList. <bnil Unit | bcons {Bool,BoolList}>
align term #1: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
align@1 create@0 bcons ({tmp2,unlabel tmp3})
  tmp3: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: Bool
  h: Int
align term #2: Bool
align@2 all (unlabel tmp4)
  tmp4: compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
  xs: List. <nil Unit | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>)
  Bool([Param0,Param1,Param2,Param3,Param4]@Bool)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Bool
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  ite([Param0,Param1,Param2,Param3,Param4]@Bool [Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
  Param0
num = 2
start: start
node: start
  Compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>([Param0,Param1]@Compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>)
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Bool
  p([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] BoolList. <bnil Unit | bcons {Bool,BoolList}>
  Param0
num = 0
start: start
node: start
  Bool([Param0]@Bool)
node: [Param0]@Bool
  all([Param0]@BoolList. <bnil Unit | bcons {Bool,BoolList}>)
node: [Param0]@BoolList. <bnil Unit | bcons {Bool,BoolList}>
  Param0









  [] all(Param0)
  [] all(Param0)
  [0] Param0 -> all(Param0)
  [1] Param3
  [] null
  [0] Param0 -> all(Param0)
compress #0: Bool
pass #0: 
true
pass #1: 
and tmp3 tmp2
pass #2: 
tmp4

Inductive List;

Inductive BoolList;

map = \f: Int -> Bool. 
    fix (
    \g: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> 
        let tmp2 = (f h) in 
            let tmp3 = (g t) in 
                and tmp3 tmp2
    end
);

p = \x: Int. 
    >= 0 x;

all = fix (
    \f: BoolList -> Bool. \xs: BoolList. 
    match xs with
      bnil _ -> true
    | bcons {h, t} -> and h (f t)
    end
);

main = \xs: List. 
    let tmp4 = (map p xs) in 
        tmp4;
syn-comb: 0.023258
collect: 0.978201
label: 0.008855
extend-component: 3e-05
execute: 0.229379
syn-align: 1.24335
comb-size: 7
align-size: 3
extract-size: 4
1.28152
Success

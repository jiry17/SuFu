
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 MList :: MList. <ielt Int | icons {Int,Int,MList}>
ielt : Int -> MList'. <ielt Int | icons {Int,Int,MList'}>
icons : {Int,Int,MList} ->
        MList'. <ielt Int | icons {Int,Int,MList'}>
repr : MList -> List'. <elt Int | cons {Int,List'}>
sum : List -> Int
is_memo : MList -> Bool
max : Int -> Int -> Int
spec : List -> Int
target : MList -> MList
main : MList -> Int


Inductive List;

Inductive MList;

repr = fix (
    \f: MList -> List. \m: MList. 
    match m with
      ielt a -> elt a
    | icons {h, _, t} -> cons {h, f t}
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt a -> a
    | cons {h, t} -> + h (f t)
    end
);

is_memo = fix (
    \f: MList -> Bool. \m: MList. 
    match m with
      ielt _ -> true
    | icons {h, s, t} -> and (== s (sum (repr m))) (f t)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> max (f t) (sum xs)
    end
);

target = fix (
    \f: MList -> Compress MList. \m: MList. 
    match m with
      ielt x -> 
        align (label m ) 
    | icons {h, s, t} -> 
        let tmp1 = (f t) in 
            align (label (icons {h, s, unlabel tmp1 }) ) 
    end
);

main = \m: MList. 
    if (is_memo m) then let tmp2 = (target m) in 
        align (spec (repr (unlabel tmp2 ))) 
    else 0;
align term #0: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
align@0 create@0 m
  m: MList. <ielt Int | icons {Int,Int,MList}>
  x: Int
align term #1: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
align@1 create@0 icons ({h,s,unlabel tmp1})
  t: MList. <ielt Int | icons {Int,Int,MList}>
  tmp1: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
  m: MList. <ielt Int | icons {Int,Int,MList}>
  h: Int
  s: Int
align term #2: Int
align@2 spec (repr (unlabel tmp2))
  m: MList. <ielt Int | icons {Int,Int,MList}>
  tmp2: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
Components for compress:
  max [Int,Int] -> Int 5
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  ielt [Int] -> MList. <ielt Int | icons {Int,Int,MList}> 1
  icons [(Int * Int * MList. <ielt Int | icons {Int,Int,MList}>)] -> MList. <ielt Int | icons {Int,Int,MList}> 1

Components for align:
  max [Int,Int] -> Int 5
  is_memo [MList. <ielt Int | icons {Int,Int,MList}>] -> Bool 4
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  ielt [Int] -> MList. <ielt Int | icons {Int,Int,MList}> 1
  icons [(Int * Int * MList. <ielt Int | icons {Int,Int,MList}>)] -> MList. <ielt Int | icons {Int,Int,MList}> 1
  spec [List. <elt Int | cons {Int,List}>] -> Int 6
  sum [List. <elt Int | cons {Int,List}>] -> Int 3
  repr [MList. <ielt Int | icons {Int,Int,MList}>] -> List. <elt Int | cons {Int,List}> 2

Components for comb:
  max [Int,Int] -> Int 5
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  ielt [Int] -> MList. <ielt Int | icons {Int,Int,MList}> 1
  icons [(Int * Int * MList. <ielt Int | icons {Int,Int,MList}>)] -> MList. <ielt Int | icons {Int,Int,MList}> 1

align term #0: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
align@0 create@0 m
  m: MList. <ielt Int | icons {Int,Int,MList}>
  x: Int
align term #1: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
align@1 create@0 icons ({h,s,unlabel tmp1})
  t: MList. <ielt Int | icons {Int,Int,MList}>
  tmp1: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
  m: MList. <ielt Int | icons {Int,Int,MList}>
  h: Int
  s: Int
align term #2: Int
align@2 spec (repr (unlabel tmp2))
  m: MList. <ielt Int | icons {Int,Int,MList}>
  tmp2: compress[0] MList. <ielt Int | icons {Int,Int,MList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] MList. <ielt Int | icons {Int,Int,MList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] MList. <ielt Int | icons {Int,Int,MList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] MList. <ielt Int | icons {Int,Int,MList}>
  Param1
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param3
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Compress[0] MList. <ielt Int | icons {Int,Int,MList}>([Param0,Param1]@Compress[0] MList. <ielt Int | icons {Int,Int,MList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] MList. <ielt Int | icons {Int,Int,MList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
  sum([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  spec([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
  sum([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  -([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  ite([Bool@0,Int@0,Int@1]@Bool [Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  max([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  spec([Bool@0,Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  sum([Bool@0,Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Int@1]@Bool
  Bool@0
  is_memo([Bool@0,Int@0,Int@1]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[MList. <ielt Int | icons {Int,Int,MList}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@MList. <ielt Int | icons {Int,Int,MList}>)
  max([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
  sum([Param0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Bool
  fold[MList. <ielt Int | icons {Int,Int,MList}>->Bool]([Int@0]@Bool [Bool@0,Int@0,Int@1]@Bool [Param0]@MList. <ielt Int | icons {Int,Int,MList}>)
  is_memo([Param0]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Int@0]@Bool
  is_memo([Int@0]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Int@0,Int@1,Int@2]@Bool
  is_memo([Int@0,Int@1,Int@2]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  elt([Param0]@Int)
  repr([Param0]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
  repr([Int@0]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1,Int@2]@Int)
  repr([Int@0,Int@1,Int@2]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Bool@0,Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0,Int@1]@Int)
  repr([Bool@0,Int@0,Int@1]@MList. <ielt Int | icons {Int,Int,MList}>)
node: [Int@0]@MList. <ielt Int | icons {Int,Int,MList}>
  ielt([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@MList. <ielt Int | icons {Int,Int,MList}>
  ielt([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Int@0,Int@1]@MList. <ielt Int | icons {Int,Int,MList}>
  ielt([Bool@0,Int@0,Int@1]@Int)
node: [Param0]@MList. <ielt Int | icons {Int,Int,MList}>
  Param0
  ielt([Param0]@Int)









  [] spec(repr(Param0))
  [0] Param1
  [] spec(repr(Param0))
  [0] Param1 -> spec(repr(Param0))
  [1] Param4
  [] null
  [0] Param1 -> spec(repr(Param0))
compress #0: Int
pass #0: 
x
pass #1: 
max tmp1 s
pass #2: 
tmp2

Inductive List;

Inductive MList;

repr = fix (
    \f: MList -> List. \m: MList. 
    match m with
      ielt a -> elt a
    | icons {h, _, t} -> cons {h, f t}
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt a -> a
    | cons {h, t} -> + h (f t)
    end
);

is_memo = fix (
    \f: MList -> Bool. \m: MList. 
    match m with
      ielt _ -> true
    | icons {h, s, t} -> and (== s (sum (repr m))) (f t)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> max (f t) (sum xs)
    end
);

target = fix (
    \f: MList -> Int. \m: MList. 
    match m with
      ielt x -> x
    | icons {h, s, t} -> 
        let tmp1 = (f t) in 
            max tmp1 s
    end
);

main = \m: MList. 
    if (is_memo m) then let tmp2 = (target m) in 
        tmp2
    else 0;
syn-comb: 0.823804
collect: 14.7108
label: 0.013348
extend-component: 0.006688
execute: 0.015008
syn-align: 14.7358
comb-size: 7
align-size: 5
extract-size: 5
15.5807
Success

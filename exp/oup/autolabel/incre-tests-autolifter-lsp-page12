
List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 head : List -> Int -> Int
fold : (Int->Int->Int) -> List -> Int -> Int
length : List -> Int
sum : List -> Int
lim : Int
minimum : List -> Int
pushback : List -> Int -> List'. <cons {Int,List'} | nil Unit>
max : Int -> Int -> Int
tail : List -> List'. <cons {Int,List'} | nil Unit>
lsp : (List->Bool) -> List -> Int
isvalid : List -> Bool
run : List -> Int


Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

lim = 10;

minimum = \x: List. 
    fold (\a: Int. \b: Int. 
    if (< a b) then a
    else b) x 0;

pushback = fix (
    \f: List -> Int -> List. \x: List. \a: Int. 
    match x with
      cons {h, t} -> cons {h, f t a}
    | nil _ -> cons {a, nil Unit}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tail = \x: List. 
    match x with
      cons {h, t} -> t
    | nil _ -> x
    end
;

lsp = \pred: List -> Bool. \x: List. 
    fix (
    \f: List -> List -> Compress List -> Int -> Int. \l: List. \suf: List. \lpre: Compress List. \res: Int. 
    let len = (align (length (unlabel lpre )) ) in 
        if (or (== len 0) (align (pred (unlabel lpre )) )) then match l with
          cons {h, t} -> f t suf (align (label (pushback (unlabel lpre ) h) ) ) (max res len)
        | nil _ -> max res len
        end

        else match suf with
          cons {h, t} -> f l t (align (label (tail (unlabel lpre )) ) ) res
        end
) x x (let tmp1 = (nil Unit) in 
        align (label tmp1 ) ) 0;

isvalid = \x: List. 
    < (sum x) lim;

run = \x: List. 
    if (< (minimum x) 0) then 0
    else lsp isvalid x;
align term #0: Int
align@0 length (unlabel lpre)
  suf: List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
  l: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
  res: Int
align term #1: Bool
align@1 pred (unlabel lpre)
  l: List. <cons {Int,List} | nil Unit>
  len: Int
  res: Int
  x: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
  suf: List. <cons {Int,List} | nil Unit>
align term #2: compress[0] List. <cons {Int,List} | nil Unit>
align@2 create@0 pushback (unlabel lpre) (h)
  l: List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  len: Int
  res: Int
  suf: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
align term #3: compress[0] List. <cons {Int,List} | nil Unit>
align@3 create@0 tail (unlabel lpre)
  l: List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  len: Int
  res: Int
  suf: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
align term #4: compress[0] List. <cons {Int,List} | nil Unit>
align@4 create@0 tmp1
  x: List. <cons {Int,List} | nil Unit>
  tmp1: List. <cons {Int,List} | nil Unit>
Components for compress:
  tail [List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 9
  head [List. <cons {Int,List} | nil Unit>,Int] -> Int 1
  cons [(Int * List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  lim [] -> Int 5
  max [Int,Int] -> Int 8

Components for align:
  isvalid [List. <cons {Int,List} | nil Unit>] -> Bool 11
  fold [[Int]->[Int]->Int,List. <cons {Int,List} | nil Unit>,Int] -> Int 2
  tail [List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 9
  head [List. <cons {Int,List} | nil Unit>,Int] -> Int 1
  length [List. <cons {Int,List} | nil Unit>] -> Int 3
  cons [(Int * List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  pushback [List. <cons {Int,List} | nil Unit>,Int] -> List. <cons {Int,List} | nil Unit> 7
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  lim [] -> Int 5
  sum [List. <cons {Int,List} | nil Unit>] -> Int 4
  max [Int,Int] -> Int 8
  minimum [List. <cons {Int,List} | nil Unit>] -> Int 6

Components for comb:
  tail [List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 9
  head [List. <cons {Int,List} | nil Unit>,Int] -> Int 1
  cons [(Int * List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  lim [] -> Int 5
  max [Int,Int] -> Int 8

align term #0: Int
align@0 length (unlabel lpre)
  suf: List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
  l: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
  res: Int
align term #1: Bool
align@1 pred (unlabel lpre)
  l: List. <cons {Int,List} | nil Unit>
  len: Int
  res: Int
  x: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
  suf: List. <cons {Int,List} | nil Unit>
align term #2: compress[0] List. <cons {Int,List} | nil Unit>
align@2 create@0 pushback (unlabel lpre) (h)
  l: List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  len: Int
  res: Int
  suf: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
align term #3: compress[0] List. <cons {Int,List} | nil Unit>
align@3 create@0 tail (unlabel lpre)
  l: List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
  h: Int
  len: Int
  res: Int
  suf: List. <cons {Int,List} | nil Unit>
  lpre: compress[0] List. <cons {Int,List} | nil Unit>
align term #4: compress[0] List. <cons {Int,List} | nil Unit>
align@4 create@0 tmp1
  x: List. <cons {Int,List} | nil Unit>
  tmp1: List. <cons {Int,List} | nil Unit>
num = 0
start: start
node: start
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  head([Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4]@Int)
  lim
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit>
  Param0
  Param1
  Param2
  tail([Param0,Param1,Param2,Param3,Param4]@List. <cons {Int,List} | nil Unit>)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param2
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  head([Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  lim
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit>
  Param0
  Param3
  Param5
  tail([Param0,Param1,Param2,Param3,Param4,Param5]@List. <cons {Int,List} | nil Unit>)
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Compress[0] List. <cons {Int,List} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int
  Param3
  Param4
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  0
  1
  head([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  lim
  max([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param7
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@List. <cons {Int,List} | nil Unit>
  Param0
  Param1
  Param2
  Param6
  tail([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@List. <cons {Int,List} | nil Unit>)
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  Compress[0] List. <cons {Int,List} | nil Unit>([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Compress[0] List. <cons {Int,List} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int
  Param3
  Param4
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  0
  1
  head([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@List. <cons {Int,List} | nil Unit> [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  lim
  max([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Compress[0] List. <cons {Int,List} | nil Unit>
  Param7
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@List. <cons {Int,List} | nil Unit>
  Param0
  Param1
  Param2
  Param6
  tail([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@List. <cons {Int,List} | nil Unit>)
num = 4
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  head([Param0,Param1]@List. <cons {Int,List} | nil Unit> [Param0,Param1]@Int)
  lim
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@List. <cons {Int,List} | nil Unit>
  Param0
  Param1
  tail([Param0,Param1]@List. <cons {Int,List} | nil Unit>)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  lim
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[List. <cons {Int,List} | nil Unit>->Int]([Int@0,Int@1]@Int []@Int [Param0]@List. <cons {Int,List} | nil Unit>)
  fold([Param0]@[Int]->[Int]->Int [Param0]@List. <cons {Int,List} | nil Unit> [Param0]@Int)
  head([Param0]@List. <cons {Int,List} | nil Unit> [Param0]@Int)
  length([Param0]@List. <cons {Int,List} | nil Unit>)
  lim
  sum([Param0]@List. <cons {Int,List} | nil Unit>)
  max([Param0]@Int [Param0]@Int)
  minimum([Param0]@List. <cons {Int,List} | nil Unit>)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  lim
  max([]@Int []@Int)
node: [Param0]@Bool
  isvalid([Param0]@List. <cons {Int,List} | nil Unit>)
node: [Param0]@[Int]->[Int]->Int
  max
node: [Param0]@List. <cons {Int,List} | nil Unit>
  Param0
  tail([Param0]@List. <cons {Int,List} | nil Unit>)
  pushback([Param0]@List. <cons {Int,List} | nil Unit> [Param0]@Int)
























  [] null
  [0] Param3 -> length(Param0)
  [1] Param3 -> sum(Param0)
  [] null
  [0] Param4 -> length(Param0)
  [1] Param4 -> sum(Param0)
  [0] length(Param0)
  [1] sum(Param0)
  [0] Param4
  [1] Param3
  [2] Param7 -> length(Param0)
  [3] Param7 -> sum(Param0)
  [0] length(Param0)
  [1] sum(Param0)
  [0] Param4
  [1] Param3
  [2] Param7 -> length(Param0)
  [3] Param7 -> sum(Param0)
  [0] length(Param0)
  [1] sum(Param0)
compress #0: {Int,Int}
pass #0: 
lpre.1
pass #1: 
< lpre.2 lim
pass #2: 
{+ len (max 0 1), + h lpre.2}
pass #3: 
{- len (max 0 1), + (* -1 h) lpre.2}
pass #4: 
{0, 0}

Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

lim = 10;

minimum = \x: List. 
    fold (\a: Int. \b: Int. 
    if (< a b) then a
    else b) x 0;

pushback = fix (
    \f: List -> Int -> List. \x: List. \a: Int. 
    match x with
      cons {h, t} -> cons {h, f t a}
    | nil _ -> cons {a, nil Unit}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tail = \x: List. 
    match x with
      cons {h, t} -> t
    | nil _ -> x
    end
;

lsp = \pred: List -> Bool. \x: List. 
    fix (
    \f: List -> List -> ({Int, Int}) -> Int -> Int. \l: List. \suf: List. \lpre: {Int, Int}. \res: Int. 
    let len = lpre.1 in 
        if (or (== len 0) (< lpre.2 lim)) then match l with
          cons {h, t} -> f t suf {+ len (max 0 1), + h lpre.2} (max res len)
        | nil _ -> max res len
        end

        else match suf with
          cons {h, t} -> f l t {- len (max 0 1), + (* -1 h) lpre.2} res
        end
) x x {0, 0} 0;

isvalid = \x: List. 
    < (sum x) lim;

run = \x: List. 
    if (< (minimum x) 0) then 0
    else lsp isvalid x;
syn-comb: 0.83294
collect: 9.24203
label: 0.021593
extend-component: 0.001243
execute: 1.20888
syn-align: 10.3543
comb-size: 47
align-size: 7
extract-size: 10
11.2182
Success

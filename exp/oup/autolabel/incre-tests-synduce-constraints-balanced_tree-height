
Tree :: Tree. <nil Unit | node {Int,Tree,Tree}>
 nil : Unit -> Tree'. <nil Unit | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <nil Unit | node {Int,Tree',Tree'}>
 max : Int -> Int -> Int
height : Tree -> Int
balanced : Tree -> Bool
target : Tree -> Tree'. <nil Unit | node {Int,Tree',Tree'}>
main : Tree -> Int


Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

height = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {w, l, r} -> + 1 (max (f l) (f r))
    end
);

balanced = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      nil _ -> true
    | node {w, l, r} -> and (and (== (height l) (height r)) (f l)) (f r)
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {w, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \t: Tree. 
    if (balanced t) then let tmp4 = (target t) in 
        align (height (unlabel tmp4 )) 
    else 0;
align term #0: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp1: Tree. <nil Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@1 create@0 node ({w,unlabel tmp2,unlabel tmp3})
  r: Tree. <nil Unit | node {Int,Tree,Tree}>
  l: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  w: Int
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
align term #2: Int
align@2 height (unlabel tmp4)
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
Components for compress:
  max [Int,Int] -> Int 1
  node [(Int * Tree. <nil Unit | node {Int,Tree,Tree}> * Tree. <nil Unit | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  nil [Bot] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0

Components for align:
  max [Int,Int] -> Int 1
  node [(Int * Tree. <nil Unit | node {Int,Tree,Tree}> * Tree. <nil Unit | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  nil [Bot] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  height [Tree. <nil Unit | node {Int,Tree,Tree}>] -> Int 2
  balanced [Tree. <nil Unit | node {Int,Tree,Tree}>] -> Bool 3

Components for comb:
  max [Int,Int] -> Int 1
  node [(Int * Tree. <nil Unit | node {Int,Tree,Tree}> * Tree. <nil Unit | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  nil [Bot] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0

align term #0: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp1: Tree. <nil Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@1 create@0 node ({w,unlabel tmp2,unlabel tmp3})
  r: Tree. <nil Unit | node {Int,Tree,Tree}>
  l: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  w: Int
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
align term #2: Int
align@2 height (unlabel tmp4)
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  Param2
  Param3
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param4
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
  height([Param0]@Tree. <nil Unit | node {Int,Tree,Tree}>)
node: [Param0]@Bool
  balanced([Param0]@Tree. <nil Unit | node {Int,Tree,Tree}>)
node: [Param0]@Tree. <nil Unit | node {Int,Tree,Tree}>
  Param0









  [] height(Param0)
  [] height(Param0)
  [0] Param2 -> height(Param0)
  [1] Param3 -> height(Param0)
  [] null
  [0] Param1 -> height(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
+ tmp2 1
pass #2: 
tmp4

Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

height = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {w, l, r} -> + 1 (max (f l) (f r))
    end
);

balanced = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      nil _ -> true
    | node {w, l, r} -> and (and (== (height l) (height r)) (f l)) (f r)
    end
);

target = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            + tmp2 1
    end
);

main = \t: Tree. 
    if (balanced t) then let tmp4 = (target t) in 
        tmp4
    else 0;
syn-comb: 0.007683
collect: 0.970348
label: 0.012831
extend-component: 0
execute: 0.036166
syn-align: 1.01361
comb-size: 7
align-size: 3
extract-size: 4
1.04042
Success

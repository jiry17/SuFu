
List :: List. <elt Int | cons {Int,List}>
elt : Int -> List'. <elt Int | cons {Int,List'}>
cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
Pos :: Pos. <one Unit | s Pos>
one : Unit -> Pos'. <one Unit | s Pos'>
s : Pos -> Pos'. <one Unit | s Pos'>
Map :: Map. <value {Int,Pos} | node {Int,Map,Map}>
value : {Int,Pos} ->
        Map'. <value {Int,Pos} | node {Int,Map',Map'}>
node : {Int,Map,Map} ->
       Map'. <value {Int,Pos} | node {Int,Map',Map'}>
min : Int -> Int -> Int
max : Int -> Int -> Int
min_key : Map -> Int
max_key : Map -> Int
is_map : Map -> Bool
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repeat : Int -> Pos -> List'. <elt Int | cons {Int,List'}>
repr : Map -> List'. <elt Int | cons {Int,List'}>
count : Int -> List -> Int
spec : List -> {Int, Int}
p2i : Pos -> Int
target : Map -> Map'. <value {Int,Pos} | node {Int,Map',Map'}>
main : Map -> {Int, Int}


Inductive List;

Inductive Pos;

Inductive Map;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (> a b) then a
    else b;

min_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> min (f l) (f r)
    end
);

max_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> max (f l) (f r)
    end
);

is_map = fix (
    \f: Map -> Bool. \m: Map. 
    match m with
      value {k, v} -> true
    | node {a, l, r} -> and (and (< (max_key l) a) (<= a (min_key r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | elt w -> cons {w, y}
    end
);

repeat = \w: Int. 
    fix (
    \f: Pos -> List. \n: Pos. 
    match n with
      one _ -> elt w
    | s n' -> cons {w, f n'}
    end
);

repr = fix (
    \f: Map -> List. \m: Map. 
    match m with
      value {k, v} -> repeat k v
    | node {a, l, r} -> cat (f l) (f r)
    end
);

count = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt h -> if (== h w) then 1
        else 0
    | cons {h, t} -> + (if (== h w) then 1
        else 0) (f t)
    end
);

spec = fix (
    \f: List -> {Int, Int}. \l: List. 
    match l with
      elt v -> {1, v}
    | cons {h, t} -> 
        let cnt = (count h l) in 
            let res = (f t) in 
                if (> cnt res.1) then {cnt, h}
                else res
    end
);

p2i = fix (
    \f: Pos -> Int. \n: Pos. 
    match n with
      one _ -> 1
    | s m -> + 1 (f m)
    end
);

target = fix (
    \f: Map -> Compress Map. \m: Map. 
    match m with
      value {k, v} -> 
        let cnt = (p2i v) in 
            let tmp1 = (value {k, v}) in 
                align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \m: Map. 
    if (is_map m) then let tmp4 = (target m) in 
        align (spec (repr (unlabel tmp4 ))) 
    else {0, 0};
align term #0: compress[0] Map. <value {Int,Pos} | node {Int,Map,Map}>
align@0 create@0 tmp1
  cnt: Int
  v: Pos. <one Unit | s Pos>
  m: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  tmp1: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  k: Int
align term #1: compress[0] Map. <value {Int,Pos} | node {Int,Map,Map}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  l: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  a: Int
  tmp3: compress[0] Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  tmp2: compress[0] Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  m: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
align term #2: {Int,Int}
align@2 spec (repr (unlabel tmp4))
  m: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  tmp4: compress[0] Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
Components for compress:
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  one [Bot] -> Pos. <one Unit | s Pos> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  node [(Int*Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>*Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>)] -> Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}> 2
  value [(Int*Pos. <one Unit | s Pos>)] -> Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}> 2
  min [Int,Int] -> Int 3
  max [Int,Int] -> Int 4
  s [Pos. <one Unit | s Pos>] -> Pos. <one Unit | s Pos> 1

Components for align:
  spec [List. <elt Int | cons {Int,List}>] -> (Int*Int) 12
  count [Int,List. <elt Int | cons {Int,List}>] -> Int 11
  repr [Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>] -> List. <elt Int | cons {Int,List}> 10
  repeat [Int,Pos. <one Unit | s Pos>] -> List. <elt Int | cons {Int,List}> 9
  cat [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 8
  p2i [Pos. <one Unit | s Pos>] -> Int 13
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min_key [Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>] -> Int 5
  one [Bot] -> Pos. <one Unit | s Pos> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  node [(Int*Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>*Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>)] -> Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}> 2
  value [(Int*Pos. <one Unit | s Pos>)] -> Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}> 2
  min [Int,Int] -> Int 3
  max [Int,Int] -> Int 4
  s [Pos. <one Unit | s Pos>] -> Pos. <one Unit | s Pos> 1
  max_key [Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>] -> Int 6
  is_map [Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>] -> Bool 7

Components for comb:
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  one [Bot] -> Pos. <one Unit | s Pos> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  node [(Int*Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>*Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>)] -> Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}> 2
  value [(Int*Pos. <one Unit | s Pos>)] -> Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}> 2
  min [Int,Int] -> Int 3
  max [Int,Int] -> Int 4
  s [Pos. <one Unit | s Pos>] -> Pos. <one Unit | s Pos> 1

align term #0: compress[0] Map. <value {Int,Pos} | node {Int,Map,Map}>
align@0 create@0 tmp1
  cnt: Int
  v: Pos. <one Unit | s Pos>
  m: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  tmp1: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  k: Int
  (0) {v: s s s one unit,m: value (-3,s s s one unit),cnt: 4,k: -3,tmp1: value (-3,s s s one unit)} @ {} -> compress value (-3,s s s one unit)
  (0) {v: s s s s one unit,m: value (-1,s s s s one unit),cnt: 5,k: -1,tmp1: value (-1,s s s s one unit)} @ {} -> compress value (-1,s s s s one unit)
  (0) {v: s one unit,m: value (-4,s one unit),cnt: 2,k: -4,tmp1: value (-4,s one unit)} @ {} -> compress value (-4,s one unit)
  (0) {v: s s s s one unit,m: value (-5,s s s s one unit),cnt: 5,k: -5,tmp1: value (-5,s s s s one unit)} @ {} -> compress value (-5,s s s s one unit)
align term #1: compress[0] Map. <value {Int,Pos} | node {Int,Map,Map}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  l: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  a: Int
  tmp3: compress[0] Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  tmp2: compress[0] Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  m: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
align term #2: {Int,Int}
align@2 spec (repr (unlabel tmp4))
  m: Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  tmp4: compress[0] Map. <value {Int,Pos. <one Unit | s Pos>} | node {Int,Map,Map}>
  (2) {m: value (-3,s s s one unit),tmp4: compress value (-3,s s s one unit)} @ {} -> (4,-3)
  (2) {m: value (-1,s s s s one unit),tmp4: compress value (-1,s s s s one unit)} @ {} -> (5,-1)
  (2) {m: value (-4,s one unit),tmp4: compress value (-4,s one unit)} @ {} -> (2,-4)
  (2) {m: value (-5,s s s s one unit),tmp4: compress value (-5,s s s s one unit)} @ {} -> (5,-5)


















  [0] spec(repr(Param0)).0
  [1] spec(repr(Param0)).1
  [0] Param0
  [1] Param4
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(repr(Param0)).0
  [1] spec(repr(Param0)).1
  [0] Param3 -> spec(repr(Param0)).0
  [1] Param3 -> spec(repr(Param0)).1
  [2] Param4 -> spec(repr(Param0)).0
  [3] Param4 -> spec(repr(Param0)).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] null
  [1] null
  [0] Param1 -> spec(repr(Param0)).0
  [1] Param1 -> spec(repr(Param0)).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: {Int,Int}
pass #0: 
{cnt, k}
pass #1: 
{- (+ tmp3.1 tmp2.1) (min tmp3.1 tmp2.1), if (or (< tmp2.1 tmp3.1) (== tmp3.1 tmp2.1)) then tmp3.2
else tmp2.2}
pass #2: 
{tmp4.1, tmp4.2}

Inductive List;

Inductive Pos;

Inductive Map;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (> a b) then a
    else b;

min_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> min (f l) (f r)
    end
);

max_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> max (f l) (f r)
    end
);

is_map = fix (
    \f: Map -> Bool. \m: Map. 
    match m with
      value {k, v} -> true
    | node {a, l, r} -> and (and (< (max_key l) a) (<= a (min_key r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | elt w -> cons {w, y}
    end
);

repeat = \w: Int. 
    fix (
    \f: Pos -> List. \n: Pos. 
    match n with
      one _ -> elt w
    | s n' -> cons {w, f n'}
    end
);

repr = fix (
    \f: Map -> List. \m: Map. 
    match m with
      value {k, v} -> repeat k v
    | node {a, l, r} -> cat (f l) (f r)
    end
);

count = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt h -> if (== h w) then 1
        else 0
    | cons {h, t} -> + (if (== h w) then 1
        else 0) (f t)
    end
);

spec = fix (
    \f: List -> {Int, Int}. \l: List. 
    match l with
      elt v -> {1, v}
    | cons {h, t} -> 
        let cnt = (count h l) in 
            let res = (f t) in 
                if (> cnt res.1) then {cnt, h}
                else res
    end
);

p2i = fix (
    \f: Pos -> Int. \n: Pos. 
    match n with
      one _ -> 1
    | s m -> + 1 (f m)
    end
);

target = fix (
    \f: Map -> {Int, Int}. \m: Map. 
    match m with
      value {k, v} -> 
        let cnt = (p2i v) in 
            {cnt, k}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {- (+ tmp3.1 tmp2.1) (min tmp3.1 tmp2.1), if (or (< tmp2.1 tmp3.1) (== tmp3.1 tmp2.1)) then tmp3.2
                else tmp2.2}
    end
);

main = \m: Map. 
    if (is_map m) then let tmp4 = (target m) in 
        {tmp4.1, tmp4.2}
    else {0, 0};
syn-comb: 0.189661
collect: 41.439
label: 0.02208
extend-component: 0.0009
execute: 1.76923
syn-align: 43.302
43.53
Success

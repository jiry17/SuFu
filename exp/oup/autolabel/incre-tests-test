
Item :: {Int, Int}
 ItemList :: ItemList. <cons {Item,ItemList} | nil Unit>
cons : {Item,ItemList} ->
       ItemList'. <cons {Item,ItemList'} | nil Unit>
nil : Unit -> ItemList'. <cons {Item,ItemList'} | nil Unit>
List :: List. <icons {Int,List} | inil Unit>
icons : {Int,List} -> List'. <icons {Int,List'} | inil Unit>
inil : Unit -> List'. <icons {Int,List'} | inil Unit>
Plan :: ItemList
PlanList :: PlanList. <consPlan {Plan,PlanList} | nilPlan Unit>
consPlan : {Plan,PlanList} ->
           PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
nilPlan : Unit ->
          PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
max : Int -> Int -> Int
sumw : Plan -> Int
sumv : Plan -> Int
mapP : (Plan->Plan) ->
       PlanList ->
       PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
mapI : (Plan->Int) ->
       PlanList -> List'. <icons {Int,List'} | inil Unit>
filter : (Plan->Bool) ->
         PlanList ->
         PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
concat : PlanList -> PlanList -> PlanList
maximum : List -> Int
extend : Item ->
         Plan -> ItemList'. <cons {Item,ItemList'} | nil Unit>
valid : Int -> Plan -> Bool
gen : ItemList ->
      PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
knapsack : Int -> ItemList -> Int


Item = {Int, Int};

Inductive ItemList;

Inductive List;

Plan = Compress ItemList;

Inductive PlanList;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

sumw = fix (
    \f: Plan -> Int. \xs: Plan. 
    let tmp1 = 0 in 
        align (match unlabel xs  with
          nil _ -> tmp1
        | cons {h, t} -> + h.1 (f (label t ))
        end
) );

sumv = fix (
    \f: Plan -> Int. \xs: Plan. 
    let tmp2 = 0 in 
        align (match unlabel xs  with
          nil _ -> tmp2
        | cons {h, t} -> + h.2 (f (label t ))
        end
) );

mapP = \g: Plan -> Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      nilPlan _ -> nilPlan Unit
    | consPlan {h, t} -> consPlan {g h, f t}
    end
);

mapI = \g: Plan -> Int. 
    fix (
    \f: PlanList -> List. \xs: PlanList. 
    match xs with
      nilPlan _ -> inil Unit
    | consPlan {h, t} -> icons {g h, f t}
    end
);

filter = \g: Plan -> Bool. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      nilPlan _ -> nilPlan Unit
    | consPlan {h, t} -> if (g h) then consPlan {h, f t}
        else f t
    end
);

concat = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      nilPlan _ -> ys
    | consPlan {h, t} -> consPlan {h, f t ys}
    end
);

maximum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      inil _ -> 0
    | icons {h, t} -> max h (f t)
    end
);

extend = \x: Item. \ys: Plan. 
    align (label (cons {x, unlabel ys }) ) ;

valid = \c: Int. \xs: Plan. 
    <= (sumw xs) c;

gen = fix (
    \f: ItemList -> PlanList. \xs: ItemList. 
    match xs with
      nil _ -> consPlan {let tmp3 = (nil Unit) in 
            align (label tmp3 ) , nilPlan Unit}
    | cons {h, t} -> 
        let res = (f t) in 
            concat res (mapP (extend h) res)
    end
);

knapsack = \cap: Int. \items: ItemList. 
    let sols = (gen items) in 
        let valid_sols = (filter (valid cap) sols) in 
            maximum (mapI sumv valid_sols);
align term #0: Int
align@0 match unlabel xs with nil _ -> tmp1 | cons {h,t} -> + (h.1) (f (create@0 t))
  xs: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  tmp1: Int
align term #1: Int
align@1 match unlabel xs with nil _ -> tmp2 | cons {h,t} -> + (h.2) (f (create@0 t))
  tmp2: Int
  xs: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align term #2: compress[0] ItemList. <cons {Item,ItemList} | nil Unit>
align@2 create@0 cons ({x,unlabel ys})
  ys: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  x: {Int,Int}
align term #3: compress[0] ItemList. <cons {Item,ItemList} | nil Unit>
align@3 create@0 tmp3
  xs: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  tmp3: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
Components for compress:
  icons [(Int * List. <icons {Int,List} | inil Unit>)] -> List. <icons {Int,List} | inil Unit> 2
  inil [Bot] -> List. <icons {Int,List} | inil Unit> 2
  cons [((Int * Int) * ItemList. <cons {{Int,Int},ItemList} | nil Unit>)] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  max [Int,Int] -> Int 5
  nil [Bot] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1

Components for align:
  icons [(Int * List. <icons {Int,List} | inil Unit>)] -> List. <icons {Int,List} | inil Unit> 2
  maximum [List. <icons {Int,List} | inil Unit>] -> Int 12
  inil [Bot] -> List. <icons {Int,List} | inil Unit> 2
  cons [((Int * Int) * ItemList. <cons {{Int,Int},ItemList} | nil Unit>)] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  max [Int,Int] -> Int 5
  nil [Bot] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1

Components for comb:
  icons [(Int * List. <icons {Int,List} | inil Unit>)] -> List. <icons {Int,List} | inil Unit> 2
  inil [Bot] -> List. <icons {Int,List} | inil Unit> 2
  cons [((Int * Int) * ItemList. <cons {{Int,Int},ItemList} | nil Unit>)] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  max [Int,Int] -> Int 5
  nil [Bot] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1

align term #0: Int
align@0 match unlabel xs with nil _ -> tmp1 | cons {h,t} -> + (h.1) (f (create@0 t))
  xs: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  tmp1: Int
align term #1: Int
align@1 match unlabel xs with nil _ -> tmp2 | cons {h,t} -> + (h.2) (f (create@0 t))
  tmp2: Int
  xs: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align term #2: compress[0] ItemList. <cons {Item,ItemList} | nil Unit>
align@2 create@0 cons ({x,unlabel ys})
  ys: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  x: {Int,Int}
align term #3: compress[0] ItemList. <cons {Item,ItemList} | nil Unit>
align@3 create@0 tmp3
  xs: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  tmp3: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
num = 0
start: start
node: start
  Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>([Param0,Param1]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param0
num = 1
start: start
node: start
  Int([Param0,Param1]@Int)
  Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>([Param0,Param1]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
node: [Param0,Param1]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param1
node: [Param0,Param1]@Int
  Param0
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 2
start: start
node: start
  Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>([Param0,Param1]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@(Int * Int)
  Param1
  prod([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  access0([Param0,Param1]@(Int * Int))
  access1([Param0,Param1]@(Int * Int))
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param0
num = 3
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  0
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int]([Int@0,Int@1,Int@2]@Int []@Int [Param0]@ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
  max([Param0]@Int [Param0]@Int)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  max([]@Int []@Int)
node: [Param0]@ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param0


















  [] null
  [0] Param0 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] Param0 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [] null
  [0] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
  [0] Param0 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] Param0 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
  [2] Param1.0
  [3] Param1.1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: {Int,Int}
pass #0: 
xs.1
pass #1: 
xs.2
pass #2: 
let c0 = x.1 in 
    let c1 = x.2 in 
        {+ ys.1 c0, + ys.2 c1}
pass #3: 
{0, 0}

Item = {Int, Int};

Inductive ItemList;

Inductive List;

Plan = {Int, Int};

Inductive PlanList;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

sumw = fix (
    \f: Plan -> Int. \xs: Plan. 
    xs.1);

sumv = fix (
    \f: Plan -> Int. \xs: Plan. 
    xs.2);

mapP = \g: Plan -> Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      nilPlan _ -> nilPlan Unit
    | consPlan {h, t} -> consPlan {g h, f t}
    end
);

mapI = \g: Plan -> Int. 
    fix (
    \f: PlanList -> List. \xs: PlanList. 
    match xs with
      nilPlan _ -> inil Unit
    | consPlan {h, t} -> icons {g h, f t}
    end
);

filter = \g: Plan -> Bool. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      nilPlan _ -> nilPlan Unit
    | consPlan {h, t} -> if (g h) then consPlan {h, f t}
        else f t
    end
);

concat = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      nilPlan _ -> ys
    | consPlan {h, t} -> consPlan {h, f t ys}
    end
);

maximum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      inil _ -> 0
    | icons {h, t} -> max h (f t)
    end
);

extend = \x: Item. \ys: Plan. 
    let c0 = x.1 in 
        let c1 = x.2 in 
            {+ ys.1 c0, + ys.2 c1};

valid = \c: Int. \xs: Plan. 
    <= (sumw xs) c;

gen = fix (
    \f: ItemList -> PlanList. \xs: ItemList. 
    match xs with
      nil _ -> consPlan {{0, 0}, nilPlan Unit}
    | cons {h, t} -> 
        let res = (f t) in 
            concat res (mapP (extend h) res)
    end
);

knapsack = \cap: Int. \items: ItemList. 
    let sols = (gen items) in 
        let valid_sols = (filter (valid cap) sols) in 
            maximum (mapI sumv valid_sols);
syn-comb: 0.575253
collect: 5.83801
label: 0.014909
extend-component: 0.001247
execute: 1.01888
syn-align: 6.75855
comb-size: 26
align-size: 13
extract-size: 8
7.35819
Success

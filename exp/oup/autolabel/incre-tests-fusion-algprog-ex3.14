
Tree :: Tree. <tip Int | bin {Tree,Tree}>
 tip : Int -> Tree'. <tip Int | bin {Tree',Tree'}>
 bin : {Tree,Tree} -> Tree'. <tip Int | bin {Tree',Tree'}>
 PTree :: PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
ptip : {Int,Int} ->
       PTree'. <ptip {Int,Int} | pbin {PTree',PTree'}>
pbin : {PTree,PTree} ->
       PTree'. <ptip {Int,Int} | pbin {PTree',PTree'}>
tri : Tree -> PTree'. <ptip {Int,Int} | pbin {PTree',PTree'}>
tsum : PTree -> Int
main : Tree -> Int


Inductive Tree;

Inductive PTree;

tri = fix (
    \f: Tree -> Compress PTree. \t: Tree. 
    match t with
      tip w -> 
        let tmp1 = (ptip {0, w}) in 
            align (label tmp1 ) 
    | bin {l, r} -> 
        let step = (fix (
        \g: PTree -> PTree. \ys: PTree. 
        match ys with
          ptip {n, w} -> ptip {+ n 1, w}
        | pbin {l, r} -> pbin {g l, g r}
        end
    )) in 
            let tmp2 = (f l) in 
                let tmp3 = (f r) in 
                    align (label (pbin {step (unlabel tmp2 ), step (unlabel tmp3 )}) ) 
    end
);

tsum = fix (
    \f: PTree -> Int. \t: PTree. 
    match t with
      ptip {n, w} -> * n w
    | pbin {l, r} -> + (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (tri t) in 
        align (tsum (unlabel tmp4 )) ;
align term #0: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
align@0 create@0 tmp1
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp1: PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  w: Int
align term #1: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
align@1 create@0 pbin ({step (unlabel tmp2),step (unlabel tmp3)})
  l: Tree. <tip Int | bin {Tree,Tree}>
  tmp3: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp2: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  r: Tree. <tip Int | bin {Tree,Tree}>
align term #2: Int
align@2 tsum (unlabel tmp4)
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp4: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
Components for compress:
  ptip [(Int * Int)] -> PTree. <ptip {Int,Int} | pbin {PTree,PTree}> 1
  pbin [(PTree. <ptip {Int,Int} | pbin {PTree,PTree}> * PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)] -> PTree. <ptip {Int,Int} | pbin {PTree,PTree}> 1
  bin [(Tree. <tip Int | bin {Tree,Tree}> * Tree. <tip Int | bin {Tree,Tree}>)] -> Tree. <tip Int | bin {Tree,Tree}> 0
  tip [Int] -> Tree. <tip Int | bin {Tree,Tree}> 0

Components for align:
  tsum [PTree. <ptip {Int,Int} | pbin {PTree,PTree}>] -> Int 3
  ptip [(Int * Int)] -> PTree. <ptip {Int,Int} | pbin {PTree,PTree}> 1
  pbin [(PTree. <ptip {Int,Int} | pbin {PTree,PTree}> * PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)] -> PTree. <ptip {Int,Int} | pbin {PTree,PTree}> 1
  bin [(Tree. <tip Int | bin {Tree,Tree}> * Tree. <tip Int | bin {Tree,Tree}>)] -> Tree. <tip Int | bin {Tree,Tree}> 0
  tip [Int] -> Tree. <tip Int | bin {Tree,Tree}> 0

Components for comb:
  ptip [(Int * Int)] -> PTree. <ptip {Int,Int} | pbin {PTree,PTree}> 1
  pbin [(PTree. <ptip {Int,Int} | pbin {PTree,PTree}> * PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)] -> PTree. <ptip {Int,Int} | pbin {PTree,PTree}> 1
  bin [(Tree. <tip Int | bin {Tree,Tree}> * Tree. <tip Int | bin {Tree,Tree}>)] -> Tree. <tip Int | bin {Tree,Tree}> 0
  tip [Int] -> Tree. <tip Int | bin {Tree,Tree}> 0

align term #0: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
align@0 create@0 tmp1
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp1: PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  w: Int
align term #1: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
align@1 create@0 pbin ({step (unlabel tmp2),step (unlabel tmp3)})
  l: Tree. <tip Int | bin {Tree,Tree}>
  tmp3: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp2: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  r: Tree. <tip Int | bin {Tree,Tree}>
align term #2: Int
align@2 tsum (unlabel tmp4)
  t: Tree. <tip Int | bin {Tree,Tree}>
  tmp4: compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  Param1
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>([Param0,Param1]@Compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[PTree. <ptip {Int,Int} | pbin {PTree,PTree}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1]@Int [Param0]@PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)
  tsum([Param0]@PTree. <ptip {Int,Int} | pbin {PTree,PTree}>)
node: [Param0]@PTree. <ptip {Int,Int} | pbin {PTree,PTree}>
  Param0















  [0] tsum(Param0)
  [1] fold[PTree. <ptip {Int,Int} | pbin {PTree,PTree}>->Int](Int@1(),+(Int@0(),Int@1()),Param0)
  [0] Param2
  [0] tsum(Param0)
  [1] fold[PTree. <ptip {Int,Int} | pbin {PTree,PTree}>->Int](Int@1(),+(Int@0(),Int@1()),Param0)
  [0] Param1 -> tsum(Param0)
  [1] Param1 -> fold[PTree. <ptip {Int,Int} | pbin {PTree,PTree}>->Int](Int@1(),+(Int@0(),Int@1()),Param0)
  [2] Param3 -> tsum(Param0)
  [3] Param3 -> fold[PTree. <ptip {Int,Int} | pbin {PTree,PTree}>->Int](Int@1(),+(Int@0(),Int@1()),Param0)
  [] null
  [0] Param1 -> tsum(Param0)
  [1] Param1 -> fold[PTree. <ptip {Int,Int} | pbin {PTree,PTree}>->Int](Int@1(),+(Int@0(),Int@1()),Param0)
compress #0: {Int,Int}
pass #0: 
{0, w}
pass #1: 
{+ tmp3.1 (+ tmp3.2 (+ tmp2.1 tmp2.2)), + tmp3.2 tmp2.2}
pass #2: 
tmp4.1

Inductive Tree;

Inductive PTree;

tri = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      tip w -> {0, w}
    | bin {l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {+ tmp3.1 (+ tmp3.2 (+ tmp2.1 tmp2.2)), + tmp3.2 tmp2.2}
    end
);

tsum = fix (
    \f: PTree -> Int. \t: PTree. 
    match t with
      ptip {n, w} -> * n w
    | pbin {l, r} -> + (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (tri t) in 
        tmp4.1;
syn-comb: 1.09118
collect: 3.984
label: 0.010438
extend-component: 0.000282
execute: 1.73626
syn-align: 5.90214
comb-size: 30
align-size: 15
extract-size: 5
7.01024
Success

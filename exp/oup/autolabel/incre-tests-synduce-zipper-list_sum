
List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 Zipper :: Zipper. <zip {List,List}>
zip : {List,List} -> Zipper'. <zip {List,List}>
concat : List -> List -> List
rev : List -> List'. <nil Unit | cons {Int,List'}>
list_repr : List -> List'. <nil Unit | cons {Int,List'}>
sum : List -> Int
repr : Zipper -> List
main : Zipper -> Int


Inductive List;

Inductive Zipper;

concat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {h, t} -> cons {h, f t ys}
    end
);

rev = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            let tmp3 = (cons {h, nil Unit}) in 
                align (label (concat (unlabel tmp2 ) tmp3) ) 
    end
);

list_repr = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp4 = (nil Unit) in 
            align (label tmp4 ) 
    | cons {h, t} -> 
        let tmp5 = (f t) in 
            align (label (cons {h, unlabel tmp5 }) ) 
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

repr = \z: Zipper. 
    match z with
      zip {l, r} -> 
        let tmp6 = (rev l) in 
            let tmp7 = (list_repr r) in 
                align (label (concat (unlabel tmp6 ) (unlabel tmp7 )) ) 
    end
;

main = \z: Zipper. 
    let tmp8 = (repr z) in 
        align (sum (unlabel tmp8 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 concat (unlabel tmp2) (tmp3)
  h: Int
  tmp3: List. <nil Unit | cons {Int,List}>
  t: List. <nil Unit | cons {Int,List}>
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: compress[1] List. <nil Unit | cons {Int,List}>
align@2 create@1 tmp4
  tmp4: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #3: compress[1] List. <nil Unit | cons {Int,List}>
align@3 create@1 cons ({h,unlabel tmp5})
  h: Int
  tmp5: compress[1] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  t: List. <nil Unit | cons {Int,List}>
align term #4: compress[2] List. <nil Unit | cons {Int,List}>
align@4 create@2 concat (unlabel tmp6) (unlabel tmp7)
  l: List. <nil Unit | cons {Int,List}>
  z: Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}>
  r: List. <nil Unit | cons {Int,List}>
  tmp6: compress[0] List. <nil Unit | cons {Int,List}>
  tmp7: compress[1] List. <nil Unit | cons {Int,List}>
align term #5: Int
align@5 sum (unlabel tmp8)
  z: Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}>
  tmp8: compress[2] List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  zip [(List. <nil Unit | cons {Int,List}> * List. <nil Unit | cons {Int,List}>)] -> Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}> 1

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  sum [List. <nil Unit | cons {Int,List}>] -> Int 5
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  zip [(List. <nil Unit | cons {Int,List}> * List. <nil Unit | cons {Int,List}>)] -> Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}> 1
  concat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 2

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  zip [(List. <nil Unit | cons {Int,List}> * List. <nil Unit | cons {Int,List}>)] -> Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}> 1

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 concat (unlabel tmp2) (tmp3)
  h: Int
  tmp3: List. <nil Unit | cons {Int,List}>
  t: List. <nil Unit | cons {Int,List}>
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: compress[1] List. <nil Unit | cons {Int,List}>
align@2 create@1 tmp4
  tmp4: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #3: compress[1] List. <nil Unit | cons {Int,List}>
align@3 create@1 cons ({h,unlabel tmp5})
  h: Int
  tmp5: compress[1] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  t: List. <nil Unit | cons {Int,List}>
align term #4: compress[2] List. <nil Unit | cons {Int,List}>
align@4 create@2 concat (unlabel tmp6) (unlabel tmp7)
  l: List. <nil Unit | cons {Int,List}>
  z: Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}>
  r: List. <nil Unit | cons {Int,List}>
  tmp6: compress[0] List. <nil Unit | cons {Int,List}>
  tmp7: compress[1] List. <nil Unit | cons {Int,List}>
align term #5: Int
align@5 sum (unlabel tmp8)
  z: Zipper. <zip {List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>}>
  tmp8: compress[2] List. <nil Unit | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 2
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
  Compress[1] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[1] List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3]@Compress[1] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
num = 4
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Compress[1] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[1] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Compress[1] List. <nil Unit | cons {Int,List}>
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 5
start: start
node: start
  Compress[2] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[2] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[2] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  sum([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  concat([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)
num = 1
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  sum([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  concat([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)
num = 2
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  sum([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  concat([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)


















  [] sum(Param0)
  [] sum(Param0)
  [0] Param0
  [1] Param3 -> sum(Param0)
  [] sum(Param0)
  [] sum(Param0)
  [0] Param0
  [1] Param1 -> sum(Param0)
  [] sum(Param0)
  [0] Param3 -> sum(Param0)
  [1] Param4 -> sum(Param0)
  [] null
  [0] Param1 -> sum(Param0)
compress #0: Int
compress #1: Int
compress #2: Int
pass #0: 
0
pass #1: 
+ h tmp2
pass #2: 
0
pass #3: 
+ h tmp5
pass #4: 
+ tmp6 tmp7
pass #5: 
tmp8

Inductive List;

Inductive Zipper;

concat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {h, t} -> cons {h, f t ys}
    end
);

rev = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            + h tmp2
    end
);

list_repr = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp5 = (f t) in 
            + h tmp5
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

repr = \z: Zipper. 
    match z with
      zip {l, r} -> 
        let tmp6 = (rev l) in 
            let tmp7 = (list_repr r) in 
                + tmp6 tmp7
    end
;

main = \z: Zipper. 
    let tmp8 = (repr z) in 
        tmp8;
syn-comb: 0.899454
collect: 1.17215
label: 0.014594
extend-component: 5.4e-05
execute: 0.635116
syn-align: 1.92424
comb-size: 18
align-size: 9
extract-size: 10
2.84738
Success

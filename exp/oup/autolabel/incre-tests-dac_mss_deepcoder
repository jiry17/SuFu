
List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 fold : (Int->Int->Int) -> Int -> List -> Int
error : Int
inf : Int
plus : Int -> Int -> Int
minus : Int -> Int -> Int
min : Int -> Int -> Int
max : Int -> Int -> Int
sum : List -> Int
maximal : List -> Int
minimal : List -> Int
length : List -> Int
head : List -> Int
neg : Int -> Int
last : List -> Int
access : Int -> List -> Int
scanl : (Int->Int->Int) -> List -> List
scanr : (Int->Int->Int) -> List -> List
count : (Int->Bool) -> List -> Int
take : Int -> List -> List
drop : Int -> List -> List
rev : List -> List
map : (Int->Int) -> List -> List
filter : (Int->Bool) -> List -> List
zip : (Int->Int->Int) ->
      List -> List -> List'. <cons {Int,List'} | nil Unit>
concat : List -> List -> List
sort : List -> List
isneg : Int -> Bool
ispos : Int -> Bool
iseven : Int -> Bool
isodd : Int -> Bool
dac : List ->
      Int ->
      {List'. <cons {Int,List'} | nil Unit>,
       List'. <cons {Int,List'} | nil Unit>}
max : Int -> Int -> Int
mps : List -> Int
mss : List -> Int
compress_mss : List -> Int


Inductive List;

fold = \oplus: Int -> Int -> Int. \e: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      cons {h, t} -> oplus h (f t)
    | nil _ -> e
    end
);

error = 100;

@Combine inf = 100;

@Align plus = \a: Int. \b: Int. 
    + a b;

@Align minus = \a: Int. \b: Int. 
    - a b;

@Align min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

@Align max = \a: Int. \b: Int. 
    if (> a b) then a
    else b;

@Align sum = fold plus 0;

@Align maximal = fold max (- 0 inf);

@Align minimal = fold min inf;

@Align length = fold (\a: Int. \b: Int. 
    + b 1) 0;

@Align head = \xs: List. 
    match xs with
      nil _ -> error
    | cons {h, _} -> h
    end
;

@Align neg = \a: Int. 
    - 0 a;

@Align last = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> error
    | cons {h, nil _} -> h
    | cons {h, t} -> f t
    end
);

@Align access = \pos: Int. \xs: List. 
    let len = (length xs) in 
        let ind = (if (< pos 0) then + pos len
        else pos) in 
            if (or (< ind 0) (>= ind len)) then error
            else fix (
            \f: Int -> List -> Int. \i: Int. \ys: List. 
            match ys with
              cons {h, t} -> if (== i 0) then h
                else f (- i 1) t
            end
        ) ind xs;

@Align scanl = \oplus: Int -> Int -> Int. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let rec = (fix (
        \f: Int -> List -> List. \pre: Int. \xs: List. 
        match xs with
          cons {h, t} -> 
            let now = (oplus pre h) in 
                cons {now, f now t}
        | nil _ -> xs
        end
    )) in 
            cons {h, rec h t}
    end
;

@Align scanr = \oplus: Int -> Int -> Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, nil _} -> xs
    | cons {h, t} -> 
        let res = (f t) in 
            cons {oplus h (head res), res}
    end
);

@Align count = \p: Int -> Bool. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> if (p h) then + 1 (f t)
        else f t
    end
);

@Align take = \pos: Int. \xs: List. 
    let len = (length xs) in 
        let ind = (if (< pos 0) then + pos len
        else pos) in 
            fix (
            \f: Int -> List -> List. \i: Int. \ys: List. 
            match ys with
              nil _ -> ys
            | cons {h, t} -> if (< i 0) then nil unit
                else cons {h, f (- i 1) t}
            end
        ) ind xs;

@Align drop = \pos: Int. \xs: List. 
    let len = (length xs) in 
        let ind = (if (< pos 0) then + pos len
        else pos) in 
            fix (
            \f: Int -> List -> List. \i: Int. \ys: List. 
            match ys with
              nil _ -> ys
            | cons {h, t} -> if (>= i ind) then cons {h, f (+ i 1) t}
                else f (+ i 1) t
            end
        ) 0 xs;

@Align rev = fix (
    \f: List -> List -> List. \res: List. \xs: List. 
    match xs with
      nil _ -> res
    | cons {h, t} -> f (cons {h, res}) t
    end
) (nil unit);

@Align map = \op: Int -> Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> cons {op h, f t}
    end
);

@Align filter = \p: Int -> Bool. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> if (p h) then cons {h, f t}
        else f t
    end
);

@Align zip = \op: Int -> Int -> Int. 
    fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> nil unit
    | cons {h1, t1} -> 
        match ys with
          nil _ -> nil unit
        | cons {h2, t2} -> cons {op h1 h2, f t1 t2}
        end

    end
);

concat = \xs: List. \ys: List. 
    fix (
    \f: List -> List. \zs: List. 
    match zs with
      nil _ -> ys
    | cons {h, t} -> cons {h, f t}
    end
) xs;

@Align sort = fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let l = (filter (\a: Int. 
        < a h) t) in 
            let r = (filter (\a: Int. 
            <= h a) t) in 
                concat (f l) (cons {h, f r})
    end
);

@Align isneg = \a: Int. 
    < a 0;

@Align ispos = \a: Int. 
    > a 0;

@Align iseven = \a: Int. 
    == a (* (/ a 2) 2);

@Align isodd = \a: Int. 
    not (iseven a);

dac = fix (
    \f: List -> Int -> {List, Compress List}. \x: List. \len: Int. 
    if (== len 1) then match x with
      cons {h, t} -> {t, let tmp1 = (cons {h, nil unit}) in 
            align (label tmp1 ) }
    end

    else let llen = (/ len 2) in 
        let lres = (f x llen) in 
            let rres = (f lres.1 (- len llen)) in 
                {rres.1, let tmp2 = lres.2 in 
                    let tmp3 = rres.2 in 
                        align (label (concat (unlabel tmp2 ) (unlabel tmp3 )) ) });

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

mps = fix (
    \f: List -> Int. \l: List. 
    match l with
      nil _ -> 0
    | cons {h, t} -> 
        let res = (f t) in 
            max 0 (+ res h)
    end
);

@Align mss = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \l: List. 
    match l with
      nil _ -> {0, - 0 inf}
    | cons {h, t} -> 
        let res = (f t) in 
            let mps = (+ (max 0 res.1) h) in 
                {mps, max res.2 mps}
    end
) xs).2;

compress_mss = \x: List. 
    let tmp4 = (dac x (length x)).2 in 
        align (mss (unlabel tmp4 )) ;
align term #0: compress[0] List. <cons {Int,List} | nil Unit>
align@0 create@0 tmp1
  len: Int
  h: Int
  x: List. <cons {Int,List} | nil Unit>
  tmp1: List. <cons {Int,List} | nil Unit>
  t: List. <cons {Int,List} | nil Unit>
align term #1: compress[0] List
align@1 create@0 concat (unlabel tmp2) (unlabel tmp3)
  len: Int
  lres: {List. <cons {Int,List} | nil Unit>,compress[0] List. <cons {Int,List} | nil Unit>}
  tmp2: compress[0] List. <cons {Int,List} | nil Unit>
  tmp3: compress[0] List. <cons {Int,List} | nil Unit>
  llen: Int
  x: List. <cons {Int,List} | nil Unit>
  rres: {List. <cons {Int,List} | nil Unit>,compress[0] List. <cons {Int,List} | nil Unit>}
align term #2: Int
align@2 mss (unlabel tmp4)
  tmp4: compress[0] List. <cons {Int,List} | nil Unit>
  x: List. <cons {Int,List} | nil Unit>
Components for compress:
  ispos [Int] -> Bool 28
  isneg [Int] -> Bool 27
  error [] -> Int 2
  isodd [Int] -> Bool 30
  max [Int,Int] -> Int 32
  iseven [Int] -> Bool 29
  plus [Int,Int] -> Int 4
  min [Int,Int] -> Int 6
  minus [Int,Int] -> Int 5
  neg [Int] -> Int 13
  cons [(Int*List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  inf [] -> Int 3
  head [List. <cons {Int,List} | nil Unit>] -> Int 12
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0

Components for align:
  ispos [Int] -> Bool 28
  isneg [Int] -> Bool 27
  zip [[Int]->[Int]->Int,List. <cons {Int,List} | nil Unit>,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 24
  mss [List. <cons {Int,List} | nil Unit>] -> Int 34
  filter [[Int]->Bool,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 23
  map [[Int]->Int,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 22
  maximal [List. <cons {Int,List} | nil Unit>] -> Int 9
  error [] -> Int 2
  isodd [Int] -> Bool 30
  max [Int,Int] -> Int 32
  sort [List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 26
  drop [Int,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 20
  iseven [Int] -> Bool 29
  plus [Int,Int] -> Int 4
  concat [List. <cons {Int,List} | nil Unit>,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 25
  last [List. <cons {Int,List} | nil Unit>] -> Int 14
  mps [List. <cons {Int,List} | nil Unit>] -> Int 33
  min [Int,Int] -> Int 6
  minus [Int,Int] -> Int 5
  neg [Int] -> Int 13
  cons [(Int*List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  inf [] -> Int 3
  fold [[Int]->[Int]->Int,Int,List. <cons {Int,List} | nil Unit>] -> Int 1
  minimal [List. <cons {Int,List} | nil Unit>] -> Int 10
  length [List. <cons {Int,List} | nil Unit>] -> Int 11
  head [List. <cons {Int,List} | nil Unit>] -> Int 12
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0
  take [Int,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 19
  sum [List. <cons {Int,List} | nil Unit>] -> Int 8
  access [Int,List. <cons {Int,List} | nil Unit>] -> Int 15
  rev [List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 21
  scanl [[Int]->[Int]->Int,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 16
  scanr [[Int]->[Int]->Int,List. <cons {Int,List} | nil Unit>] -> List. <cons {Int,List} | nil Unit> 17
  count [[Int]->Bool,List. <cons {Int,List} | nil Unit>] -> Int 18

Components for comb:
  ispos [Int] -> Bool 28
  isneg [Int] -> Bool 27
  error [] -> Int 2
  isodd [Int] -> Bool 30
  max [Int,Int] -> Int 32
  iseven [Int] -> Bool 29
  plus [Int,Int] -> Int 4
  min [Int,Int] -> Int 6
  minus [Int,Int] -> Int 5
  neg [Int] -> Int 13
  cons [(Int*List. <cons {Int,List} | nil Unit>)] -> List. <cons {Int,List} | nil Unit> 0
  inf [] -> Int 3
  head [List. <cons {Int,List} | nil Unit>] -> Int 12
  nil [Bot] -> List. <cons {Int,List} | nil Unit> 0



Item :: {Int, Int}
 ItemList :: ItemList. <cons {Item,ItemList} | nil Unit>
cons : {Item,ItemList} ->
       ItemList'. <cons {Item,ItemList'} | nil Unit>
nil : Unit -> ItemList'. <cons {Item,ItemList'} | nil Unit>
Plan :: ItemList
PlanList :: PlanList. <consPlan {Plan,PlanList} | nilPlan Unit>
consPlan : {Plan,PlanList} ->
           PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
nilPlan : Unit ->
          PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
max : Int -> Int -> Int
step : Item ->
       PlanList ->
       PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
gen : ItemList ->
      PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
getbest : Int -> PlanList -> Int
knapsack : Int -> ItemList -> Int


Item = {Int, Int};

Inductive ItemList;

Plan = ItemList;

Inductive PlanList;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

step = \i: Item. 
    fix (
    \f: PlanList -> PlanList. \ps: PlanList. 
    match ps with
      consPlan {p, t} -> 
        let res = (f t) in 
            consPlan {align (label (cons {i, unlabel p }) ) , consPlan {p, res}}
    | nilPlan _ -> ps
    end
);

gen = fix (
    \f: ItemList -> PlanList. \items: ItemList. 
    match items with
      cons {i, t} -> 
        let res = (f t) in 
            step i res
    | nil _ -> consPlan {let tmp1 = (nil Unit) in 
            align (label tmp1 ) , nilPlan Unit}
    end
);

getbest = let sumw = (fix (
    \f: ItemList -> Int. \xs: ItemList. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h.1 (f t)
    end
)) in 
        let sumv = (fix (
        \f: ItemList -> Int. \xs: ItemList. 
        match xs with
          nil _ -> 0
        | cons {h, t} -> + h.2 (f t)
        end
    )) in 
            \lim: Int. 
            fix (
            \f: PlanList -> Int. \ps: PlanList. 
            match ps with
              consPlan {p, t} -> 
                let res = (f t) in 
                    if (< lim (align (sumw (unlabel p )) )) then res
                    else max (align (sumv (unlabel p )) ) res
            | nilPlan _ -> 0
            end
        );

knapsack = \w: Int. \is: ItemList. 
    getbest w (gen is);
align term #0: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align@0 create@0 cons ({i,unlabel p})
  res: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  p: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  t: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  i: {Int,Int}
  ps: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
align term #1: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align@1 create@0 tmp1
  items: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  tmp1: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align term #2: Int
align@2 sumw (unlabel p)
  res: Int
  p: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  lim: Int
  t: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  ps: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
align term #3: Int
align@3 sumv (unlabel p)
  res: Int
  p: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  lim: Int
  t: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  ps: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
Components for compress:
  nil [Bot] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  cons [((Int * Int) * ItemList. <cons {{Int,Int},ItemList} | nil Unit>)] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  max [Int,Int] -> Int 4

Components for align:
  nil [Bot] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  cons [((Int * Int) * ItemList. <cons {{Int,Int},ItemList} | nil Unit>)] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  max [Int,Int] -> Int 4

Components for comb:
  nil [Bot] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  cons [((Int * Int) * ItemList. <cons {{Int,Int},ItemList} | nil Unit>)] -> ItemList. <cons {{Int,Int},ItemList} | nil Unit> 1
  max [Int,Int] -> Int 4

align term #0: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align@0 create@0 cons ({i,unlabel p})
  res: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  p: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  t: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  i: {Int,Int}
  ps: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
align term #1: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align@1 create@0 tmp1
  items: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  tmp1: ItemList. <cons {{Int,Int},ItemList} | nil Unit>
align term #2: Int
align@2 sumw (unlabel p)
  res: Int
  p: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  lim: Int
  t: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  ps: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
align term #3: Int
align@3 sumv (unlabel p)
  res: Int
  p: compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  lim: Int
  t: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
  ps: PlanList. <consPlan {compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>,PlanList} | nilPlan Unit>
num = 0
start: start
node: start
  Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param1
node: [Param0,Param1,Param2,Param3,Param4]@(Int * Int)
  Param3
  prod([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  access0([Param0,Param1,Param2,Param3,Param4]@(Int * Int))
  access1([Param0,Param1,Param2,Param3,Param4]@(Int * Int))
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param1
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  Param2
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>([Param0,Param1,Param2,Param3,Param4]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param1
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  Param2
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  0
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int]([Int@0,Int@1,Int@2]@Int []@Int [Param0]@ItemList. <cons {{Int,Int},ItemList} | nil Unit>)
  max([Param0]@Int [Param0]@Int)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  max([]@Int []@Int)
node: [Param0]@ItemList. <cons {{Int,Int},ItemList} | nil Unit>
  Param0


















  [0] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
  [0] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
  [2] Param3.0
  [3] Param3.1
  [0] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
  [] null
  [0] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
  [] null
  [0] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@0(),Int@2()),0,Param0)
  [1] Param1 -> fold[ItemList. <cons {{Int,Int},ItemList} | nil Unit>->Int](+(Int@1(),Int@2()),0,Param0)
compress #0: {Int,Int}
pass #0: 
let c0 = i.1 in 
    let c1 = i.2 in 
        {+ p.1 c0, + p.2 c1}
pass #1: 
{0, 0}
pass #2: 
p.1
pass #3: 
p.2

Item = {Int, Int};

Inductive ItemList;

Plan = ItemList;

Inductive PlanList;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

step = \i: Item. 
    fix (
    \f: PlanList -> PlanList. \ps: PlanList. 
    match ps with
      consPlan {p, t} -> 
        let res = (f t) in 
            consPlan {let c0 = i.1 in 
                let c1 = i.2 in 
                    {+ p.1 c0, + p.2 c1}, consPlan {p, res}}
    | nilPlan _ -> ps
    end
);

gen = fix (
    \f: ItemList -> PlanList. \items: ItemList. 
    match items with
      cons {i, t} -> 
        let res = (f t) in 
            step i res
    | nil _ -> consPlan {{0, 0}, nilPlan Unit}
    end
);

getbest = \lim: Int. 
    fix (
    \f: PlanList -> Int. \ps: PlanList. 
    match ps with
      consPlan {p, t} -> 
        let res = (f t) in 
            if (< lim p.1) then res
            else max p.2 res
    | nilPlan _ -> 0
    end
);

knapsack = \w: Int. \is: ItemList. 
    getbest w (gen is);
syn-comb: 0.308768
collect: 57.7378
label: 0.014157
extend-component: 0.00605
execute: 0.939784
syn-align: 58.7739
comb-size: 26
align-size: 23
extract-size: 8
59.1042
Success

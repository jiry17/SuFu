
ArithExpr :: ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {
 ArithExpr,ArithExpr}>
 int : Int ->
       ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
       ArithExpr',ArithExpr'}>
 plus : {ArithExpr,ArithExpr} ->
        ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
        ArithExpr',ArithExpr'}>
 minus : {ArithExpr,ArithExpr} ->
         ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
         ArithExpr',ArithExpr'}>
 PsumExpr :: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {
PsumExpr,PsumExpr}>
nint : Int ->
       PsumExpr'. <nint Int | nplus {PsumExpr',PsumExpr'} | nminus {
       PsumExpr',PsumExpr'}>
nplus : {PsumExpr,PsumExpr} ->
        PsumExpr'. <nint Int | nplus {PsumExpr',PsumExpr'} | nminus {
        PsumExpr',PsumExpr'}>
nminus : {PsumExpr,PsumExpr} ->
         PsumExpr'. <nint Int | nplus {PsumExpr',PsumExpr'} | nminus {
         PsumExpr',PsumExpr'}>
max : Int -> Int -> Int
repr : PsumExpr ->
       ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
       ArithExpr',ArithExpr'}>
spec : ArithExpr -> Int
main : PsumExpr -> Int


Inductive ArithExpr;

Inductive PsumExpr;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

repr = fix (
    \f: PsumExpr -> Compress ArithExpr. \e: PsumExpr. 
    match e with
      nint i -> 
        let tmp1 = (int i) in 
            align (label tmp1 ) 
    | nplus {e1, e2} -> 
        let tmp2 = (f e1) in 
            let tmp3 = (f e2) in 
                align (label (plus {unlabel tmp2 , unlabel tmp3 }) ) 
    | nminus {e1, e2} -> 
        let tmp4 = (f e1) in 
            let tmp5 = (f e2) in 
                align (label (minus {unlabel tmp4 , unlabel tmp5 }) ) 
    end
);

spec = \e: ArithExpr. 
    (fix (
    \f: ArithExpr -> {Int, Int}. \e: ArithExpr. 
    match e with
      int i -> {i, i}
    | plus {e1, e2} -> 
        let r1 = (f e1) in 
            let r2 = (f e2) in 
                let sum = (+ r1.1 r2.1) in 
                    let m = (max sum (max r1.2 r2.2)) in 
                        {sum, m}
    | minus {e1, e2} -> 
        let r1 = (f e1) in 
            let r2 = (f e2) in 
                let sum = (- r1.1 r2.1) in 
                    let m = (max sum (max r1.2 r2.2)) in 
                        {sum, m}
    end
) e).2;

main = \e: PsumExpr. 
    let tmp6 = (repr e) in 
        align (spec (unlabel tmp6 )) ;
align term #0: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@0 create@0 tmp1
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp1: ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  i: Int
align term #1: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@1 create@0 plus ({unlabel tmp2,unlabel tmp3})
  tmp3: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e2: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp2: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e1: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
align term #2: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@2 create@0 minus ({unlabel tmp4,unlabel tmp5})
  e2: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  e1: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp5: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp4: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align term #3: Int
align@3 spec (unlabel tmp6)
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp6: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
Components for compress:
  max [Int,Int] -> Int 2
  nminus [(PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> * PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>)] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1
  plus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  minus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nint [Int] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1
  int [Int] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nplus [(PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> * PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>)] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1

Components for align:
  max [Int,Int] -> Int 2
  nminus [(PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> * PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>)] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1
  plus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  spec [ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>] -> Int 4
  minus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nint [Int] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1
  int [Int] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nplus [(PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> * PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>)] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1

Components for comb:
  max [Int,Int] -> Int 2
  nminus [(PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> * PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>)] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1
  plus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  minus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nint [Int] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1
  int [Int] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nplus [(PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> * PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>)] -> PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}> 1

align term #0: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@0 create@0 tmp1
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp1: ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  i: Int
align term #1: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@1 create@0 plus ({unlabel tmp2,unlabel tmp3})
  tmp3: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e2: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp2: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e1: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
align term #2: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@2 create@0 minus ({unlabel tmp4,unlabel tmp5})
  e2: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  e1: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp5: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp4: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align term #3: Int
align@3 spec (unlabel tmp6)
  e: PsumExpr. <nint Int | nplus {PsumExpr,PsumExpr} | nminus {PsumExpr,PsumExpr}>
  tmp6: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param0
  Param3
num = 2
start: start
node: start
  Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 3
start: start
node: start
  Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>([Param0,Param1]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Int@0,Int@1]@Int [Param0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  max([Param0]@Int [Param0]@Int)
  spec([Param0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
node: [Int@0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  int([Int@0]@Int)
node: [Int@0,Int@1]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  int([Int@0,Int@1]@Int)
node: [Param0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param0
  int([Param0]@Int)





















  [0] spec(Param0)
  [1] fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [0] Param2
  [0] spec(Param0)
  [1] fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [0] Param0 -> spec(Param0)
  [1] Param0 -> fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [2] Param3 -> spec(Param0)
  [3] Param3 -> fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [0] spec(Param0)
  [1] fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [0] Param2 -> spec(Param0)
  [1] Param2 -> fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [2] Param4 -> spec(Param0)
  [3] Param4 -> fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int](Int@0(),+(Int@0(),Int@1()),-(Int@0(),Int@1()),Param0)
compress #0: {Int,Int}
pass #0: 
{i, i}
pass #1: 
{if (and (< tmp3.1 tmp2.1) (< (+ tmp3.2 tmp2.2) tmp2.1)) then tmp2.1
else if (< (+ tmp3.2 tmp2.2) tmp3.1) then tmp3.1
else + tmp3.2 tmp2.2, + tmp3.2 tmp2.2}
pass #2: 
{if (< (- tmp4.2 tmp5.2) (max tmp5.1 tmp4.1)) then max tmp5.1 tmp4.1
else - tmp4.2 tmp5.2, + (* -1 tmp5.2) tmp4.2}
pass #3: 
tmp6.1

Inductive ArithExpr;

Inductive PsumExpr;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

repr = fix (
    \f: PsumExpr -> {Int, Int}. \e: PsumExpr. 
    match e with
      nint i -> {i, i}
    | nplus {e1, e2} -> 
        let tmp2 = (f e1) in 
            let tmp3 = (f e2) in 
                {if (and (< tmp3.1 tmp2.1) (< (+ tmp3.2 tmp2.2) tmp2.1)) then tmp2.1
                else if (< (+ tmp3.2 tmp2.2) tmp3.1) then tmp3.1
                else + tmp3.2 tmp2.2, + tmp3.2 tmp2.2}
    | nminus {e1, e2} -> 
        let tmp4 = (f e1) in 
            let tmp5 = (f e2) in 
                {if (< (- tmp4.2 tmp5.2) (max tmp5.1 tmp4.1)) then max tmp5.1 tmp4.1
                else - tmp4.2 tmp5.2, + (* -1 tmp5.2) tmp4.2}
    end
);

spec = \e: ArithExpr. 
    (fix (
    \f: ArithExpr -> {Int, Int}. \e: ArithExpr. 
    match e with
      int i -> {i, i}
    | plus {e1, e2} -> 
        let r1 = (f e1) in 
            let r2 = (f e2) in 
                let sum = (+ r1.1 r2.1) in 
                    let m = (max sum (max r1.2 r2.2)) in 
                        {sum, m}
    | minus {e1, e2} -> 
        let r1 = (f e1) in 
            let r2 = (f e2) in 
                let sum = (- r1.1 r2.1) in 
                    let m = (max sum (max r1.2 r2.2)) in 
                        {sum, m}
    end
) e).2;

main = \e: PsumExpr. 
    let tmp6 = (repr e) in 
        tmp6.1;
syn-comb: 2.28925
collect: 16.3226
label: 0.017828
extend-component: 1.49672
execute: 16.0758
syn-align: 34.2536
comb-size: 104
align-size: 21
extract-size: 8
36.5758
Success

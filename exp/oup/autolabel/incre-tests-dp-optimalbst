
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
Tree :: Tree. <leaf Unit | node {Int,Tree,Tree}>
leaf : Unit -> Tree'. <leaf Unit | node {Int,Tree',Tree'}>
node : {Int,Tree,Tree} ->
       Tree'. <leaf Unit | node {Int,Tree',Tree'}>
Plan :: Tree
PlanList :: PlanList. <pnil Unit | pcons {Plan,PlanList}>
pnil : Unit -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
pcons : {Plan,PlanList} ->
        PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
merge : PlanList -> PlanList -> PlanList
combine : Int -> PlanList -> PlanList -> PlanList
snoc : Int -> List -> List'. <nil Unit | cons {Int,List'}>
generate : List -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
eval : Tree -> Int
min : Int -> Int -> Int
get_best : PlanList -> Int
main : List -> Int


Inductive List;

Inductive Tree;

Plan = Compress Tree;

Inductive PlanList;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

combine = \w: Int. 
    let combine_single = (\l: Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {align (label (node {w, unlabel l , unlabel h }) ) , f t}
    end
)) in 
        fix (
        \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
        match xs with
          pnil _ -> xs
        | pcons {h, t} -> merge (combine_single h ys) (f t ys)
        end
    );

snoc = \w: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t}
    end
);

generate = fix (
    \f: List -> PlanList. \xs: List. 
    match xs with
      nil _ -> pcons {let tmp1 = (leaf Unit) in 
            align (label tmp1 ) , pnil Unit}
    | _ -> fix (
        \g: List -> List -> PlanList. \l: List. \r: List. 
        match r with
          nil _ -> pnil Unit
        | cons {root, newr} -> 
            let newl = (snoc root l) in 
                merge (combine root (f l) (f newr)) (g newl newr)
        end
    ) (nil Unit) xs
    end
);

eval = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf _ -> {0, 0}
    | node {w, l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                let sum = (+ w (+ lres.2 rres.2)) in 
                    {+ sum (+ lres.1 rres.1), sum}
    end
) t).1;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 1000
    | pcons {h, t} -> min (align (eval (unlabel h )) ) (f t)
    end
);

main = \xs: List. 
    get_best (generate xs);
align term #0: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
align@0 create@0 node ({w,unlabel l,unlabel h})
  w: Int
  l: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  h: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
align@1 create@0 tmp1
  tmp1: Tree. <leaf Unit | node {Int,Tree,Tree}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 eval (unlabel h)
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  h: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
Components for compress:
  min [Int,Int] -> Int 9
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  node [(Int * Tree. <leaf Unit | node {Int,Tree,Tree}> * Tree. <leaf Unit | node {Int,Tree,Tree}>)] -> Tree. <leaf Unit | node {Int,Tree,Tree}> 1
  leaf [Bot] -> Tree. <leaf Unit | node {Int,Tree,Tree}> 1

Components for align:
  min [Int,Int] -> Int 9
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  snoc [Int,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 6
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  node [(Int * Tree. <leaf Unit | node {Int,Tree,Tree}> * Tree. <leaf Unit | node {Int,Tree,Tree}>)] -> Tree. <leaf Unit | node {Int,Tree,Tree}> 1
  leaf [Bot] -> Tree. <leaf Unit | node {Int,Tree,Tree}> 1
  eval [Tree. <leaf Unit | node {Int,Tree,Tree}>] -> Int 8

Components for comb:
  min [Int,Int] -> Int 9
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  node [(Int * Tree. <leaf Unit | node {Int,Tree,Tree}> * Tree. <leaf Unit | node {Int,Tree,Tree}>)] -> Tree. <leaf Unit | node {Int,Tree,Tree}> 1
  leaf [Bot] -> Tree. <leaf Unit | node {Int,Tree,Tree}> 1

align term #0: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
align@0 create@0 node ({w,unlabel l,unlabel h})
  w: Int
  l: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  h: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
align@1 create@0 tmp1
  tmp1: Tree. <leaf Unit | node {Int,Tree,Tree}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 eval (unlabel h)
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>,PlanList}>
  h: compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
  Param1
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2]@Compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] Tree. <leaf Unit | node {Int,Tree,Tree}>
  Param2
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  0
  min([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  fold[Tree. <leaf Unit | node {Int,Tree,Tree}>->Int]([]@Int [Int@0,Int@1,Int@2]@Int [Param0]@Tree. <leaf Unit | node {Int,Tree,Tree}>)
  min([Param0]@Int [Param0]@Int)
  eval([Param0]@Tree. <leaf Unit | node {Int,Tree,Tree}>)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  min([]@Int []@Int)
node: [Param0]@Tree. <leaf Unit | node {Int,Tree,Tree}>
  Param0















  [0] eval(Param0)
  [1] fold[Tree. <leaf Unit | node {Int,Tree,Tree}>->Int](0,+(-(Int@1(),Int@0()),Int@2()),Param0)
  [0] Param0
  [1] Param1 -> eval(Param0)
  [2] Param1 -> fold[Tree. <leaf Unit | node {Int,Tree,Tree}>->Int](0,+(-(Int@1(),Int@0()),Int@2()),Param0)
  [3] Param4 -> eval(Param0)
  [4] Param4 -> fold[Tree. <leaf Unit | node {Int,Tree,Tree}>->Int](0,+(-(Int@1(),Int@0()),Int@2()),Param0)
  [0] eval(Param0)
  [1] fold[Tree. <leaf Unit | node {Int,Tree,Tree}>->Int](0,+(-(Int@1(),Int@0()),Int@2()),Param0)
  [] null
  [0] Param2 -> eval(Param0)
  [1] Param2 -> fold[Tree. <leaf Unit | node {Int,Tree,Tree}>->Int](0,+(-(Int@1(),Int@0()),Int@2()),Param0)
compress #0: {Int,Int}
pass #0: 
{- (+ (- (+ w l.1) l.2) h.1) h.2, + (+ (* -1 w) l.2) h.2}
pass #1: 
{0, 0}
pass #2: 
h.1

Inductive List;

Inductive Tree;

Plan = {Int, Int};

Inductive PlanList;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

combine = \w: Int. 
    let combine_single = (\l: Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {{- (+ (- (+ w l.1) l.2) h.1) h.2, + (+ (* -1 w) l.2) h.2}, f t}
    end
)) in 
        fix (
        \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
        match xs with
          pnil _ -> xs
        | pcons {h, t} -> merge (combine_single h ys) (f t ys)
        end
    );

snoc = \w: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t}
    end
);

generate = fix (
    \f: List -> PlanList. \xs: List. 
    match xs with
      nil _ -> pcons {{0, 0}, pnil Unit}
    | _ -> fix (
        \g: List -> List -> PlanList. \l: List. \r: List. 
        match r with
          nil _ -> pnil Unit
        | cons {root, newr} -> 
            let newl = (snoc root l) in 
                merge (combine root (f l) (f newr)) (g newl newr)
        end
    ) (nil Unit) xs
    end
);

eval = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf _ -> {0, 0}
    | node {w, l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                let sum = (+ w (+ lres.2 rres.2)) in 
                    {+ sum (+ lres.1 rres.1), sum}
    end
) t).1;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 1000
    | pcons {h, t} -> min h.1 (f t)
    end
);

main = \xs: List. 
    get_best (generate xs);
syn-comb: 1.40263
collect: 39.4365
label: 0.018596
extend-component: 0.244279
execute: 6.71727
syn-align: 46.8928
comb-size: 42
align-size: 19
extract-size: 5
48.3231
Success


List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 head : List -> Int
is_const : List -> Bool
w : Int
spec : List -> Int
target : List -> List'. <elt Int | cons {Int,List'}>
main : List -> Int


Inductive List;

head = \xs: List. 
    match xs with
      elt w -> w
    | cons {h, t} -> h
    end
;

is_const = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt x -> true
    | cons {h, t} -> and (== h (head t)) (f t)
    end
);

@Input w = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (== w x) then 1
        else 0
    | cons {h, t} -> if (== w h) then 1
        else f t
    end
);

target = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      elt a -> 
        let tmp1 = (elt a) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (cons {h, t}) in 
            align (label tmp2 ) 
    end
);

main = \xs: List. 
    if (is_const xs) then let tmp3 = (target xs) in 
        align (spec (unlabel tmp3 )) 
    else 0;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  a: Int
  xs: List. <elt Int | cons {Int,List}>
  tmp1: List. <elt Int | cons {Int,List}>
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 tmp2
  h: Int
  t: List. <elt Int | cons {Int,List}>
  tmp2: List. <elt Int | cons {Int,List}>
  xs: List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp3)
  xs: List. <elt Int | cons {Int,List}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  head [List. <elt Int | cons {Int,List}>] -> Int 1

Components for align:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  spec [List. <elt Int | cons {Int,List}>] -> Int 4
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  head [List. <elt Int | cons {Int,List}>] -> Int 1
  is_const [List. <elt Int | cons {Int,List}>] -> Bool 2

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  head [List. <elt Int | cons {Int,List}>] -> Int 1

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  a: Int
  xs: List. <elt Int | cons {Int,List}>
  tmp1: List. <elt Int | cons {Int,List}>
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 tmp2
  h: Int
  t: List. <elt Int | cons {Int,List}>
  tmp2: List. <elt Int | cons {Int,List}>
  xs: List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp3)
  xs: List. <elt Int | cons {Int,List}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@List. <elt Int | cons {Int,List}>
  Param1
  Param2
  elt([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  head([Param0,Param1,Param2,Param3]@List. <elt Int | cons {Int,List}>)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@List. <elt Int | cons {Int,List}>
  Param1
  Param2
  Param3
  elt([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  head([Param0,Param1,Param2,Param3,Param4]@List. <elt Int | cons {Int,List}>)
num = 2
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] List. <elt Int | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  head([Param0,Param1,Param2]@List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2]@List. <elt Int | cons {Int,List}>
  Param0
  elt([Param0,Param1,Param2]@Int)
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0,Param1]@Int [Int@0,Int@1,Param1]@Int [Param0,Param1]@List. <elt Int | cons {Int,List}>)
  spec([Param0,Param1]@List. <elt Int | cons {Int,List}>)
  head([Param0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@Int
  Param1
  Int@0
  +([Int@0,Param1]@Int [Int@0,Param1]@Int)
  -([Int@0,Param1]@Int [Int@0,Param1]@Int)
  ite([Int@0,Param1]@Bool [Int@0,Param1]@Int [Int@0,Param1]@Int)
  spec([Int@0,Param1]@List. <elt Int | cons {Int,List}>)
  head([Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Param1]@Int
  Param1
  Int@0
  Int@1
  +([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  -([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  ite([Int@0,Int@1,Param1]@Bool [Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  spec([Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>)
  head([Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Param1]@Int
  Param1
  Int@0
  +([Bool@0,Int@0,Param1]@Int [Bool@0,Int@0,Param1]@Int)
  -([Bool@0,Int@0,Param1]@Int [Bool@0,Int@0,Param1]@Int)
  ite([Bool@0,Int@0,Param1]@Bool [Bool@0,Int@0,Param1]@Int [Bool@0,Int@0,Param1]@Int)
  spec([Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
  head([Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Param1]@Bool
  Bool@0
  is_const([Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Param0,Param1]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0,Param1]@Bool [Bool@0,Int@0,Param1]@Bool [Param0,Param1]@List. <elt Int | cons {Int,List}>)
  is_const([Param0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@Bool
  is_const([Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Param1]@Bool
  is_const([Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Param1]@Int)
node: [Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1,Param1]@Int)
node: [Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0,Param1]@Int)
node: [Param0,Param1]@List. <elt Int | cons {Int,List}>
  Param0
  elt([Param0,Param1]@Int)









  [] spec(Param0)
  [0] -(Param0,Param3)
  [] spec(Param0)
  [0] -(Param0,Param4)
  [] null
  [0] Param1 -> spec(Param0)
compress #0: Int
pass #0: 
let c0 = (- a w) in 
    if (== c0 0) then 1
    else 0
pass #1: 
let c0 = (- h w) in 
    if (== c0 0) then 1
    else 0
pass #2: 
tmp3

Inductive List;

head = \xs: List. 
    match xs with
      elt w -> w
    | cons {h, t} -> h
    end
;

is_const = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt x -> true
    | cons {h, t} -> and (== h (head t)) (f t)
    end
);

@Input w = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (== w x) then 1
        else 0
    | cons {h, t} -> if (== w h) then 1
        else f t
    end
);

target = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt a -> 
        let c0 = (- a w) in 
            if (== c0 0) then 1
            else 0
    | cons {h, t} -> 
        let c0 = (- h w) in 
            if (== c0 0) then 1
            else 0
    end
);

main = \xs: List. 
    if (is_const xs) then let tmp3 = (target xs) in 
        tmp3
    else 0;
syn-comb: 0.455401
collect: 12.3817
label: 0.011446
extend-component: 0.000118
execute: 0.002946
syn-align: 12.3892
comb-size: 29
align-size: 3
extract-size: 11
12.8625
Success

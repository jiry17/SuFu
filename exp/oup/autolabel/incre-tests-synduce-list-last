
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 CList :: CList. <single Int | concat {CList,CList}>
single : Int -> CList'. <single Int | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <single Int | concat {CList',CList'}>
spec : List -> Int
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : CList -> List'. <elt Int | cons {Int,List'}>
main : CList -> Int


Inductive List;

Inductive CList;

spec = fix (
    \f: List -> Int. \x: List. 
    match x with
      elt a -> a
    | cons {h, t} -> f t
    end
);

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt a -> cons {a, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      single a -> 
        let tmp1 = (elt a) in 
            align (label tmp1 ) 
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                align (label (cat (unlabel tmp2 ) (unlabel tmp3 )) ) 
    end
);

main = \x: CList. 
    let tmp4 = (repr x) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <single Int | concat {CList,CList}>
  tmp1: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cat (unlabel tmp2) (unlabel tmp3)
  b: CList. <single Int | concat {CList,CList}>
  xs: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  a: CList. <single Int | concat {CList,CList}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp4)
  x: CList. <single Int | concat {CList,CList}>
  tmp4: compress[0] List. <elt Int | cons {Int,List}>
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

Components for align:
  cat [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 3
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  spec [List. <elt Int | cons {Int,List}>] -> Int 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <single Int | concat {CList,CList}>
  tmp1: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cat (unlabel tmp2) (unlabel tmp3)
  b: CList. <single Int | concat {CList,CList}>
  xs: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  a: CList. <single Int | concat {CList,CList}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp4)
  x: CList. <single Int | concat {CList,CList}>
  tmp4: compress[0] List. <elt Int | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <elt Int | cons {Int,List}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  cat([Int@0]@List. <elt Int | cons {Int,List}> [Int@0]@List. <elt Int | cons {Int,List}>)
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  cat([Int@0,Int@1]@List. <elt Int | cons {Int,List}> [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  elt([Int@0,Int@1]@Int)
node: [Param0]@List. <elt Int | cons {Int,List}>
  Param0
  cat([Param0]@List. <elt Int | cons {Int,List}> [Param0]@List. <elt Int | cons {Int,List}>)
  elt([Param0]@Int)









  [] spec(Param0)
  [0] Param2
  [] spec(Param0)
  [0] Param2 -> spec(Param0)
  [1] Param4 -> spec(Param0)
  [] null
  [0] Param1 -> spec(Param0)
compress #0: Int
pass #0: 
a
pass #1: 
tmp3
pass #2: 
tmp4

Inductive List;

Inductive CList;

spec = fix (
    \f: List -> Int. \x: List. 
    match x with
      elt a -> a
    | cons {h, t} -> f t
    end
);

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt a -> cons {a, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single a -> a
    | concat {a, b} -> 
        let tmp3 = (f b) in 
            tmp3
    end
);

main = \x: CList. 
    let tmp4 = (repr x) in 
        tmp4;
syn-comb: 0.493663
collect: 0.673355
label: 0.008852
extend-component: 0
execute: 0.120381
syn-align: 0.842215
comb-size: 3
align-size: 3
extract-size: 5
1.35154
Success

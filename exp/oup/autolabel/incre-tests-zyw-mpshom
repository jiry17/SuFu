
List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 CList :: CList. <cnil Unit | single Int | concat {CList,CList}>
cnil : Unit ->
       CList'. <cnil Unit | single Int | concat {CList',CList'}>
single : Int ->
         CList'. <cnil Unit | single Int | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <cnil Unit | single Int | concat {CList',CList'}>
max : Int -> Int -> Int
spec : List -> {Int, Int}
cat : List -> List -> List
repr : CList -> List'. <nil Unit | cons {Int,List'}>
main : CList -> {Int, Int}


Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_mps = (max 0 (+ hd result.1)) in 
                let new_sum = (+ hd result.2) in 
                    {new_mps, new_sum}
    end
);

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single a -> 
        let tmp2 = (cons {a, nil Unit}) in 
            align (label tmp2 ) 
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                align (label (cat (unlabel tmp3 ) (unlabel tmp4 )) ) 
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        align (spec (unlabel tmp5 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp2
  a: Int
  tmp2: List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
align term #2: compress[0] List
align@2 create@0 cat (unlabel tmp3) (unlabel tmp4)
  b: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  a: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
align term #3: {Int,Int}
align@3 spec (unlabel tmp5)
  x: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp5: compress[0] List. <nil Unit | cons {Int,List}>
Components for compress:
  max [Int,Int] -> Int 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1

Components for align:
  cat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 4
  max [Int,Int] -> Int 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  spec [List. <nil Unit | cons {Int,List}>] -> (Int * Int) 3
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1

Components for comb:
  max [Int,Int] -> Int 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  cnil [Bot] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  single [Int] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single Int | concat {CList,CList}> * CList. <cnil Unit | single Int | concat {CList,CList}>)] -> CList. <cnil Unit | single Int | concat {CList,CList}> 1

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp1: List. <nil Unit | cons {Int,List}>
  (0) {xs: Cnil Unit,tmp1: Nil Unit} @ {} -> compress[0] Nil Unit
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp2
  a: Int
  tmp2: List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  (1) {a: -1,tmp2: Cons (-1) (Nil Unit),xs: Single -1} @ {} -> compress[0] Cons (-1) (Nil Unit)
  (1) {a: -5,tmp2: Cons (-5) (Nil Unit),xs: Single -5} @ {} -> compress[0] Cons (-5) (Nil Unit)
  (1) {a: 1,tmp2: Cons (1) (Nil Unit),xs: Single 1} @ {} -> compress[0] Cons (1) (Nil Unit)
  (1) {a: 4,tmp2: Cons (4) (Nil Unit),xs: Single 4} @ {} -> compress[0] Cons (4) (Nil Unit)
  (1) {a: 2,tmp2: Cons (2) (Nil Unit),xs: Single 2} @ {} -> compress[0] Cons (2) (Nil Unit)
  (1) {a: -4,tmp2: Cons (-4) (Nil Unit),xs: Single -4} @ {} -> compress[0] Cons (-4) (Nil Unit)
  (1) {a: 3,tmp2: Cons (3) (Nil Unit),xs: Single 3} @ {} -> compress[0] Cons (3) (Nil Unit)
  (1) {a: -2,tmp2: Cons (-2) (Nil Unit),xs: Single -2} @ {} -> compress[0] Cons (-2) (Nil Unit)
align term #2: compress[0] List
align@2 create@0 cat (unlabel tmp3) (unlabel tmp4)
  b: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | single Int | concat {CList,CList}>
  a: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
  (2) {tmp4: compress[0] Cons (4) (Nil Unit),xs: Concat (Single 1) (Single 4),b: Single 4,tmp3: compress[0] Cons (1) (Nil Unit),a: Single 1} @ {} -> compress[0] Cons (1) (Cons (4) (Nil Unit))
  (2) {tmp4: compress[0] Cons (2) (Nil Unit),xs: Concat (Concat (Single 1) (Single 4)) (Single 2),b: Single 2,tmp3: compress[0] Cons (1) (Cons (4) (Nil Unit)),a: Concat (Single 1) (Single 4)} @ {} -> compress[0] Cons (1) (Cons (4) (Cons (2) (Nil Unit)))
  (2) {tmp4: compress[0] Cons (1) (Cons (4) (Cons (2) (Nil Unit))),xs: Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2)),b: Concat (Concat (Single 1) (Single 4)) (Single 2),tmp3: compress[0] Cons (-5) (Nil Unit),a: Single -5} @ {} -> compress[0] Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit))))
  (2) {tmp4: compress[0] Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit)))),xs: Concat (Single -1) (Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2))),b: Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2)),tmp3: compress[0] Cons (-1) (Nil Unit),a: Single -1} @ {} -> compress[0] Cons (-1) (Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit)))))
  (2) {tmp4: compress[0] Cons (-4) (Nil Unit),xs: Concat (Single 4) (Single -4),b: Single -4,tmp3: compress[0] Cons (4) (Nil Unit),a: Single 4} @ {} -> compress[0] Cons (4) (Cons (-4) (Nil Unit))
  (2) {tmp4: compress[0] Cons (2) (Nil Unit),xs: Concat (Single -1) (Single 2),b: Single 2,tmp3: compress[0] Cons (-1) (Nil Unit),a: Single -1} @ {} -> compress[0] Cons (-1) (Cons (2) (Nil Unit))
  (2) {tmp4: compress[0] Cons (-1) (Nil Unit),xs: Concat (Single -4) (Single -1),b: Single -1,tmp3: compress[0] Cons (-4) (Nil Unit),a: Single -4} @ {} -> compress[0] Cons (-4) (Cons (-1) (Nil Unit))
  (2) {tmp4: compress[0] Cons (-4) (Cons (-1) (Nil Unit)),xs: Concat (Concat (Single -1) (Single 2)) (Concat (Single -4) (Single -1)),b: Concat (Single -4) (Single -1),tmp3: compress[0] Cons (-1) (Cons (2) (Nil Unit)),a: Concat (Single -1) (Single 2)} @ {} -> compress[0] Cons (-1) (Cons (2) (Cons (-4) (Cons (-1) (Nil Unit))))
  (2) {tmp4: compress[0] Cons (4) (Nil Unit),xs: Concat (Concat (Concat (Single -1) (Single 2)) (Concat (Single -4) (Single -1))) (Single 4),b: Single 4,tmp3: compress[0] Cons (-1) (Cons (2) (Cons (-4) (Cons (-1) (Nil Unit)))),a: Concat (Concat (Single -1) (Single 2)) (Concat (Single -4) (Single -1))} @ {} -> compress[0] Cons (-1) (Cons (2) (Cons (-4) (Cons (-1) (Cons (4) (Nil Unit)))))
  (2) {tmp4: compress[0] Nil Unit,xs: Concat (Cnil Unit) (Cnil Unit),b: Cnil Unit,tmp3: compress[0] Nil Unit,a: Cnil Unit} @ {} -> compress[0] Nil Unit
align term #3: {Int,Int}
align@3 spec (unlabel tmp5)
  x: CList. <cnil Unit | single Int | concat {CList,CList}>
  tmp5: compress[0] List. <nil Unit | cons {Int,List}>
  (3) {x: Concat (Single -1) (Concat (Single -5) (Concat (Concat (Single 1) (Single 4)) (Single 2))),tmp5: compress[0] Cons (-1) (Cons (-5) (Cons (1) (Cons (4) (Cons (2) (Nil Unit)))))} @ {} -> (1) (1)
  (3) {x: Concat (Single 4) (Single -4),tmp5: compress[0] Cons (4) (Cons (-4) (Nil Unit))} @ {} -> (4) (0)
  (3) {x: Concat (Concat (Concat (Single -1) (Single 2)) (Concat (Single -4) (Single -1))) (Single 4),tmp5: compress[0] Cons (-1) (Cons (2) (Cons (-4) (Cons (-1) (Cons (4) (Nil Unit)))))} @ {} -> (1) (0)
  (3) {x: Single 3,tmp5: compress[0] Cons (3) (Nil Unit)} @ {} -> (3) (3)
  (3) {x: Concat (Concat (Single -2) (Concat (Cnil Unit) (Cnil Unit))) (Concat (Cnil Unit) (Cnil Unit)),tmp5: compress[0] Cons (-2) (Nil Unit)} @ {} -> (0) (-2)
  (3) {x: Concat (Concat (Cnil Unit) (Single -1)) (Cnil Unit),tmp5: compress[0] Cons (-1) (Nil Unit)} @ {} -> (0) (-1)
  (3) {x: Single 2,tmp5: compress[0] Cons (2) (Nil Unit)} @ {} -> (2) (2)
  (3) {x: Single 1,tmp5: compress[0] Cons (1) (Nil Unit)} @ {} -> (1) (1)
  (3) {x: Single -4,tmp5: compress[0] Cons (-4) (Nil Unit)} @ {} -> (0) (-4)
  (3) {x: Concat (Concat (Cnil Unit) (Cnil Unit)) (Cnil Unit),tmp5: compress[0] Nil Unit} @ {} -> (0) (0)
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 3
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  0
  access0([Int@0,Int@1]@(Int * Int))
  access1([Int@0,Int@1]@(Int * Int))
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  access0([Param0]@(Int * Int))
  access1([Param0]@(Int * Int))
  fold[List. <nil Unit | cons {Int,List}>->Int]([]@Int [Int@0,Int@1]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  access0([]@(Int * Int))
  access1([]@(Int * Int))
  max([]@Int []@Int)
node: [Param0]@(Int * Int)
  prod([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
node: []@(Int * Int)
  prod([]@Int []@Int)
node: [Int@0,Int@1]@(Int * Int)
  prod([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  cat([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)
























  [0] spec(Param0).0
  [1] spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param0
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> spec(Param0).1
  [2] Param4 -> spec(Param0).0
  [3] Param4 -> spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] null
  [1] null
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: {Int,Int}
pass #0: 
{0, 0}
pass #1: 
{max a 0, a}
pass #2: 
{+ tmp3.2 (max tmp4.1 (- tmp3.1 tmp3.2)), + tmp4.2 tmp3.2}
pass #3: 
{tmp5.1, tmp5.2}

Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_mps = (max 0 (+ hd result.1)) in 
                let new_sum = (+ hd result.2) in 
                    {new_mps, new_sum}
    end
);

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      cnil _ -> {0, 0}
    | single a -> {max a 0, a}
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                {+ tmp3.2 (max tmp4.1 (- tmp3.1 tmp3.2)), + tmp4.2 tmp3.2}
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        {tmp5.1, tmp5.2};
syn-comb: 1.39917
collect: 5.70465
label: 0.015826
extend-component: 0.000481
execute: 8.56951
syn-align: 14.9308
comb-size: 40
align-size: 7
extract-size: 5
16.3608
Success

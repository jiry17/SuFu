
Tree :: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
 nil : Unit ->
       Tree'. <nil Unit | single Int | node {Int,Tree',Tree'}>
 single : Int ->
          Tree'. <nil Unit | single Int | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <nil Unit | single Int | node {Int,Tree',Tree'}>
 max : Int -> Int -> Int
spec : Tree -> Int
repr : Tree ->
       Tree'. <nil Unit | single Int | node {Int,Tree',Tree'}>
main : Tree -> Int


Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \t: Tree. 
    (fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | single a -> {+ s.1 a, max s.2 (+ s.1 a)}
    | node {a, l, r} -> f (f {+ s.1 a, max s.2 (+ s.1 a)} l) r
    end
) {0, 0} t).2;

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single a -> 
        let tmp2 = (single a) in 
            align (label tmp2 ) 
    | node {a, l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                align (label (node {a, unlabel tmp3 , unlabel tmp4 }) ) 
    end
);

main = \t: Tree. 
    let tmp5 = (repr t) in 
        align (spec (unlabel tmp5 )) ;
align term #0: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp1: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align@1 create@0 tmp2
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp2: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  a: Int
align term #2: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align@2 create@0 node ({a,unlabel tmp3,unlabel tmp4})
  r: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  l: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  a: Int
align term #3: Int
align@3 spec (unlabel tmp5)
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp5: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
Components for compress:
  single [Int] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  nil [Bot] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <nil Unit | single Int | node {Int,Tree,Tree}> * Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 1

Components for align:
  single [Int] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  spec [Tree. <nil Unit | single Int | node {Int,Tree,Tree}>] -> Int 2
  nil [Bot] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <nil Unit | single Int | node {Int,Tree,Tree}> * Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 1

Components for comb:
  single [Int] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  nil [Bot] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <nil Unit | single Int | node {Int,Tree,Tree}> * Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | single Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 1

align term #0: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp1: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align@1 create@0 tmp2
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp2: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  a: Int
align term #2: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
align@2 create@0 node ({a,unlabel tmp3,unlabel tmp4})
  r: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  l: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  a: Int
align term #3: Int
align@3 spec (unlabel tmp5)
  t: Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  tmp5: compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 3
start: start
node: start
  Compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  0
  spec([Int@0]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  0
  spec([Int@0,Int@1,Int@2]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int]([]@Int [Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  spec([Param0]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  max([Param0]@Int [Param0]@Int)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int]([]@Int [Int@0]@Int [Int@0,Int@1,Int@2]@Int []@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  spec([]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>)
  max([]@Int []@Int)
node: []@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  single([]@Int)
node: [Int@0]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  single([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  single([Int@0,Int@1,Int@2]@Int)
node: [Param0]@Tree. <nil Unit | single Int | node {Int,Tree,Tree}>
  Param0
  single([Param0]@Int)






























  [0] spec(Param0)
  [1] fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(Int@1(),Int@2()),Param0)
  [2] fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(-(Int@1(),Int@0()),Int@2()),Param0)
  [0] spec(Param0)
  [1] fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(Int@1(),Int@2()),Param0)
  [2] fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(-(Int@1(),Int@0()),Int@2()),Param0)
  [0] Param2
  [0] spec(Param0)
  [1] fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(Int@1(),Int@2()),Param0)
  [2] fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(-(Int@1(),Int@0()),Int@2()),Param0)
  [0] Param5
  [1] Param2 -> spec(Param0)
  [2] Param2 -> fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(Int@1(),Int@2()),Param0)
  [3] Param2 -> fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(-(Int@1(),Int@0()),Int@2()),Param0)
  [4] Param4 -> spec(Param0)
  [5] Param4 -> fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(Int@1(),Int@2()),Param0)
  [6] Param4 -> fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(-(Int@1(),Int@0()),Int@2()),Param0)
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(Int@1(),Int@2()),Param0)
  [2] Param1 -> fold[Tree. <nil Unit | single Int | node {Int,Tree,Tree}>->Int](0,Int@0(),+(-(Int@1(),Int@0()),Int@2()),Param0)
compress #0: {Int,Int,Int}
pass #0: 
{0, 0, 0}
pass #1: 
{max a 0, a, a}
pass #2: 
{if (< (+ (- a (- tmp3.3 (+ tmp4.1 tmp3.2))) tmp3.2) (max (+ a tmp3.1) 0)) then max (+ a tmp3.1) 0
else + (- a (- tmp3.3 (+ tmp4.1 tmp3.2))) tmp3.2, + tmp4.2 tmp3.2, + (+ (* -1 a) tmp4.3) tmp3.3}
pass #3: 
tmp5.1

Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \t: Tree. 
    (fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | single a -> {+ s.1 a, max s.2 (+ s.1 a)}
    | node {a, l, r} -> f (f {+ s.1 a, max s.2 (+ s.1 a)} l) r
    end
) {0, 0} t).2;

repr = fix (
    \f: Tree -> {Int, Int, Int}. \t: Tree. 
    match t with
      nil _ -> {0, 0, 0}
    | single a -> {max a 0, a, a}
    | node {a, l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                {if (< (+ (- a (- tmp3.3 (+ tmp4.1 tmp3.2))) tmp3.2) (max (+ a tmp3.1) 0)) then max (+ a tmp3.1) 0
                else + (- a (- tmp3.3 (+ tmp4.1 tmp3.2))) tmp3.2, + tmp4.2 tmp3.2, + (+ (* -1 a) tmp4.3) tmp3.3}
    end
);

main = \t: Tree. 
    let tmp5 = (repr t) in 
        tmp5.1;
syn-comb: 125.329
collect: 4.44119
label: 0.012785
extend-component: 4.79629
execute: 18.3424
syn-align: 34.203
comb-size: 103
align-size: 34
extract-size: 6
159.551
Success


List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 CList :: CList. <single Int | concat {CList,CList}>
single : Int -> CList'. <single Int | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <single Int | concat {CList',CList'}>
min : Int -> Int -> Int
spec : List -> Int
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : CList -> List'. <elt Int | cons {Int,List'}>
main : CList -> Int


Inductive List;

Inductive CList;

min = \x: Int. \y: Int. 
    if (< x y) then x
    else y;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt a -> {a, 1}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_min = (min result.1 hd) in 
                let new_cnt = (if (< hd result.1) then 1
                else + result.2 (if (== hd result.1) then 1
                else 0)) in 
                    {new_min, new_cnt}
    end
) xs).2;

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      single a -> 
        let tmp1 = (elt a) in 
            align (label tmp1 ) 
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                align (label (cat (unlabel tmp2 ) (unlabel tmp3 )) ) 
    end
);

main = \x: CList. 
    let tmp4 = (repr x) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <single Int | concat {CList,CList}>
  tmp1: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cat (unlabel tmp2) (unlabel tmp3)
  b: CList. <single Int | concat {CList,CList}>
  xs: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  a: CList. <single Int | concat {CList,CList}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp4)
  x: CList. <single Int | concat {CList,CList}>
  tmp4: compress[0] List. <elt Int | cons {Int,List}>
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

Components for align:
  cat [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 4
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  spec [List. <elt Int | cons {Int,List}>] -> Int 3
  min [Int,Int] -> Int 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 2
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <single Int | concat {CList,CList}>
  tmp1: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cat (unlabel tmp2) (unlabel tmp3)
  b: CList. <single Int | concat {CList,CList}>
  xs: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  a: CList. <single Int | concat {CList,CList}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp4)
  x: CList. <single Int | concat {CList,CList}>
  tmp4: compress[0] List. <elt Int | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <elt Int | cons {Int,List}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
  min([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
  min([Param0]@Int [Param0]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  cat([Int@0]@List. <elt Int | cons {Int,List}> [Int@0]@List. <elt Int | cons {Int,List}>)
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  cat([Int@0,Int@1]@List. <elt Int | cons {Int,List}> [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  elt([Int@0,Int@1]@Int)
node: [Param0]@List. <elt Int | cons {Int,List}>
  Param0
  cat([Param0]@List. <elt Int | cons {Int,List}> [Param0]@List. <elt Int | cons {Int,List}>)
  elt([Param0]@Int)















  [0] spec(Param0)
  [1] fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),min(Int@0(),Int@1()),Param0)
  [0] Param2
  [0] spec(Param0)
  [1] fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),min(Int@0(),Int@1()),Param0)
  [0] Param2 -> spec(Param0)
  [1] Param2 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),min(Int@0(),Int@1()),Param0)
  [2] Param4 -> spec(Param0)
  [3] Param4 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),min(Int@0(),Int@1()),Param0)
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),min(Int@0(),Int@1()),Param0)
compress #0: {Int,Int}
pass #0: 
{1, a}
pass #1: 
{if (< tmp3.2 tmp2.2) then tmp3.1
else if (== tmp2.2 tmp3.2) then + tmp2.1 tmp3.1
else tmp2.1, min tmp2.2 tmp3.2}
pass #2: 
tmp4.1

Inductive List;

Inductive CList;

min = \x: Int. \y: Int. 
    if (< x y) then x
    else y;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt a -> {a, 1}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_min = (min result.1 hd) in 
                let new_cnt = (if (< hd result.1) then 1
                else + result.2 (if (== hd result.1) then 1
                else 0)) in 
                    {new_min, new_cnt}
    end
) xs).2;

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      single a -> {1, a}
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                {if (< tmp3.2 tmp2.2) then tmp3.1
                else if (== tmp2.2 tmp3.2) then + tmp2.1 tmp3.1
                else tmp2.1, min tmp2.2 tmp3.2}
    end
);

main = \x: CList. 
    let tmp4 = (repr x) in 
        tmp4.1;
syn-comb: 0.551223
collect: 2.85625
label: 0.013982
extend-component: 0.004169
execute: 2.19677
syn-align: 5.24076
comb-size: 40
align-size: 15
extract-size: 5
5.81338
Success

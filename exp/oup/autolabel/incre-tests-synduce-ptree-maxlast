
Tree :: Tree. <telt Int | tnode {Int,Tree,Tree}>
 telt : Int -> Tree'. <telt Int | tnode {Int,Tree',Tree'}>
 tnode : {Int,Tree,Tree} ->
         Tree'. <telt Int | tnode {Int,Tree',Tree'}>
 PTree :: PTree. <pelt Int | pnode {Int,
                                   List. <elt PTree | cons {
                                   PTree,List}>}>
pelt : Int ->
       PTree'. <pelt Int | pnode {Int,
                                  List. <elt PTree' | cons {
                                  PTree',List}>}>
pnode : {Int,List. <elt PTree | cons {PTree,List}>} ->
        PTree'. <pelt Int | pnode {Int,
                                   List. <elt PTree' | cons {
                                   PTree',List}>}>
List :: List. <elt PTree | cons {PTree,List}>
elt : PTree -> List'. <elt PTree | cons {PTree,List'}>
cons : {PTree,List} -> List'. <elt PTree | cons {PTree,List'}>
max : Int -> Int -> Int
last : Tree -> Int
repr : Tree ->
       PTree'. <pelt Int | pnode {Int,
                                  List'. <elt PTree' | cons {
                                  PTree',List'}>}>
spec : PTree -> Int
target : Tree -> Tree
main : Tree -> Int


Inductive Tree;

Inductive PTree;

Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

last = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      telt w -> w
    | tnode {_, _, r} -> f r
    end
);

repr = fix (
    \f: Tree -> PTree. \x: Tree. 
    match x with
      telt a -> pelt a
    | tnode {a, l, r} -> 
        let repr_list = (fix (
        \g: Tree -> List. \y: Tree. 
        match y with
          telt a -> 
            let z = (pelt a) in 
                elt z
        | tnode {a, l, r} -> cons {pelt a, cons {f l, g r}}
        end
    )) in 
            pnode {a, cons {f l, repr_list r}}
    end
);

spec = fix (
    \f: PTree -> Int. \x: PTree. 
    match x with
      pelt a -> a
    | pnode {a, l} -> 
        let maxh_aux = (fix (
        \g: List -> Int. \y: List. 
        match y with
          elt a -> f a
        | cons {hd, tl} -> g tl
        end
    )) in 
            max a (maxh_aux l)
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      telt w -> 
        align (label t ) 
    | tnode {w, l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                align (label (tnode {w, unlabel tmp1 , unlabel tmp2 }) ) 
    end
);

main = \t: Tree. 
    let tmp3 = (target t) in 
        align (spec (repr (unlabel tmp3 ))) ;
align term #0: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
align@0 create@0 t
  t: Tree. <telt Int | tnode {Int,Tree,Tree}>
  w: Int
align term #1: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
align@1 create@0 tnode ({w,unlabel tmp1,unlabel tmp2})
  l: Tree. <telt Int | tnode {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  t: Tree. <telt Int | tnode {Int,Tree,Tree}>
  w: Int
  tmp1: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  r: Tree. <telt Int | tnode {Int,Tree,Tree}>
align term #2: Int
align@2 spec (repr (unlabel tmp3))
  tmp3: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  t: Tree. <telt Int | tnode {Int,Tree,Tree}>
Components for compress:
  pnode [(Int * List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}>)] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 1
  cons [(PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> * List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}>)] -> List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}> 2
  elt [PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>] -> List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}> 2
  tnode [(Int * Tree. <telt Int | tnode {Int,Tree,Tree}> * Tree. <telt Int | tnode {Int,Tree,Tree}>)] -> Tree. <telt Int | tnode {Int,Tree,Tree}> 0
  telt [Int] -> Tree. <telt Int | tnode {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 3
  pelt [Int] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 1

Components for align:
  pnode [(Int * List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}>)] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 1
  cons [(PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> * List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}>)] -> List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}> 2
  elt [PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>] -> List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}> 2
  tnode [(Int * Tree. <telt Int | tnode {Int,Tree,Tree}> * Tree. <telt Int | tnode {Int,Tree,Tree}>)] -> Tree. <telt Int | tnode {Int,Tree,Tree}> 0
  telt [Int] -> Tree. <telt Int | tnode {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 3
  last [Tree. <telt Int | tnode {Int,Tree,Tree}>] -> Int 4
  repr [Tree. <telt Int | tnode {Int,Tree,Tree}>] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 5
  pelt [Int] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 1
  spec [PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>] -> Int 6

Components for comb:
  pnode [(Int * List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}>)] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 1
  cons [(PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> * List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}>)] -> List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}> 2
  elt [PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>] -> List. <elt PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> | cons {PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>,List}> 2
  tnode [(Int * Tree. <telt Int | tnode {Int,Tree,Tree}> * Tree. <telt Int | tnode {Int,Tree,Tree}>)] -> Tree. <telt Int | tnode {Int,Tree,Tree}> 0
  telt [Int] -> Tree. <telt Int | tnode {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 3
  pelt [Int] -> PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}> 1

align term #0: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
align@0 create@0 t
  t: Tree. <telt Int | tnode {Int,Tree,Tree}>
  w: Int
align term #1: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
align@1 create@0 tnode ({w,unlabel tmp1,unlabel tmp2})
  l: Tree. <telt Int | tnode {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  t: Tree. <telt Int | tnode {Int,Tree,Tree}>
  w: Int
  tmp1: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  r: Tree. <telt Int | tnode {Int,Tree,Tree}>
align term #2: Int
align@2 spec (repr (unlabel tmp3))
  tmp3: compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  t: Tree. <telt Int | tnode {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  Param1
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param3
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <telt Int | tnode {Int,Tree,Tree}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
  last([Int@0]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  spec([Int@0]@PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  last([Int@0,Int@1,Int@2]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  spec([Int@0,Int@1,Int@2]@PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[Tree. <telt Int | tnode {Int,Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  max([Param0]@Int [Param0]@Int)
  last([Param0]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  spec([Param0]@PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>)
node: [Param0]@PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>
  repr([Param0]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  pelt([Param0]@Int)
node: [Int@0]@PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>
  repr([Int@0]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  pelt([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@PTree. <pelt Int | pnode {Int,List. <elt PTree | cons {PTree,List}>}>
  repr([Int@0,Int@1,Int@2]@Tree. <telt Int | tnode {Int,Tree,Tree}>)
  pelt([Int@0,Int@1,Int@2]@Int)
node: [Int@0]@Tree. <telt Int | tnode {Int,Tree,Tree}>
  telt([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Tree. <telt Int | tnode {Int,Tree,Tree}>
  telt([Int@0,Int@1,Int@2]@Int)
node: [Param0]@Tree. <telt Int | tnode {Int,Tree,Tree}>
  Param0
  telt([Param0]@Int)















  [0] spec(repr(Param0))
  [1] last(Param0)
  [0] Param1
  [0] spec(repr(Param0))
  [1] last(Param0)
  [0] Param3
  [1] Param1 -> spec(repr(Param0))
  [2] Param1 -> last(Param0)
  [3] Param4 -> spec(repr(Param0))
  [4] Param4 -> last(Param0)
  [] null
  [0] Param0 -> spec(repr(Param0))
  [1] Param0 -> last(Param0)
compress #0: {Int,Int}
pass #0: 
{w, w}
pass #1: 
{max w tmp2.2, tmp2.2}
pass #2: 
tmp3.1

Inductive Tree;

Inductive PTree;

Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

last = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      telt w -> w
    | tnode {_, _, r} -> f r
    end
);

repr = fix (
    \f: Tree -> PTree. \x: Tree. 
    match x with
      telt a -> pelt a
    | tnode {a, l, r} -> 
        let repr_list = (fix (
        \g: Tree -> List. \y: Tree. 
        match y with
          telt a -> 
            let z = (pelt a) in 
                elt z
        | tnode {a, l, r} -> cons {pelt a, cons {f l, g r}}
        end
    )) in 
            pnode {a, cons {f l, repr_list r}}
    end
);

spec = fix (
    \f: PTree -> Int. \x: PTree. 
    match x with
      pelt a -> a
    | pnode {a, l} -> 
        let maxh_aux = (fix (
        \g: List -> Int. \y: List. 
        match y with
          elt a -> f a
        | cons {hd, tl} -> g tl
        end
    )) in 
            max a (maxh_aux l)
    end
);

target = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      telt w -> {w, w}
    | tnode {w, l, r} -> 
        let tmp2 = (f r) in 
            {max w tmp2.2, tmp2.2}
    end
);

main = \t: Tree. 
    let tmp3 = (target t) in 
        tmp3.1;
syn-comb: 0.301368
collect: 1.01931
label: 0.014153
extend-component: 0.000584
execute: 1.50978
syn-align: 2.75426
comb-size: 14
align-size: 9
extract-size: 6
3.08166
Success

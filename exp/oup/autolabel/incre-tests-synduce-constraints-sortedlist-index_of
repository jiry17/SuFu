
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 is_sorted : List -> Bool
key : Int
spec : List -> Int
target : List -> List
main : List -> Int


Inductive List;

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> <= pre x
    | cons {h, t} -> and (<= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

@Input key = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt w -> if (== w key) then 1
        else 0
    | cons {h, t} -> 
        let res = (f t) in 
            if (== key h) then 1
            else if (== res 0) then 0
            else + 1 res
    end
);

target = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      elt w -> 
        align (label xs ) 
    | cons {h, t} -> if (>= h key) then align (label xs ) 
        else let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target xs) in 
        align (spec (unlabel tmp2 )) 
    else 0;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 xs
  xs: List. <elt Int | cons {Int,List}>
  w: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 xs
  h: Int
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
align term #2: compress[0] List. <elt Int | cons {Int,List}>
align@2 create@0 cons ({h,unlabel tmp1})
  h: Int
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  tmp1: compress[0] List. <elt Int | cons {Int,List}>
align term #3: Int
align@3 spec (unlabel tmp2)
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  xs: List. <elt Int | cons {Int,List}>
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0

Components for align:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  is_sorted [List. <elt Int | cons {Int,List}>] -> Bool 1
  spec [List. <elt Int | cons {Int,List}>] -> Int 3

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 xs
  xs: List. <elt Int | cons {Int,List}>
  w: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 xs
  h: Int
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
align term #2: compress[0] List. <elt Int | cons {Int,List}>
align@2 create@0 cons ({h,unlabel tmp1})
  h: Int
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  tmp1: compress[0] List. <elt Int | cons {Int,List}>
align term #3: Int
align@3 spec (unlabel tmp2)
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  xs: List. <elt Int | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param1
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <elt Int | cons {Int,List}>
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 3
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
node: [Param0,Param1,Param2]@Compress[0] List. <elt Int | cons {Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0,Param1]@Int [Int@0,Int@1,Param1]@Int [Param0,Param1]@List. <elt Int | cons {Int,List}>)
  spec([Param0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@Int
  Param1
  Int@0
  +([Int@0,Param1]@Int [Int@0,Param1]@Int)
  -([Int@0,Param1]@Int [Int@0,Param1]@Int)
  ite([Int@0,Param1]@Bool [Int@0,Param1]@Int [Int@0,Param1]@Int)
  spec([Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Param1]@Int
  Param1
  Int@0
  Int@1
  +([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  -([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  ite([Int@0,Int@1,Param1]@Bool [Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  spec([Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Param1]@Int
  Param1
  Int@0
  +([Bool@0,Int@0,Param1]@Int [Bool@0,Int@0,Param1]@Int)
  -([Bool@0,Int@0,Param1]@Int [Bool@0,Int@0,Param1]@Int)
  ite([Bool@0,Int@0,Param1]@Bool [Bool@0,Int@0,Param1]@Int [Bool@0,Int@0,Param1]@Int)
  spec([Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Param1]@Bool
  Bool@0
  is_sorted([Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Param0,Param1]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0,Param1]@Bool [Bool@0,Int@0,Param1]@Bool [Param0,Param1]@List. <elt Int | cons {Int,List}>)
  is_sorted([Param0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@Bool
  is_sorted([Int@0,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Param1]@Bool
  is_sorted([Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Param1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Param1]@Int)
node: [Int@0,Int@1,Param1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1,Param1]@Int)
node: [Bool@0,Int@0,Param1]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0,Param1]@Int)
node: [Param0,Param1]@List. <elt Int | cons {Int,List}>
  Param0
  elt([Param0,Param1]@Int)












  [] spec(Param0)
  [0] -(Param1,Param2)
  [] spec(Param0)
  [0] -(Param0,Param3)
  [] spec(Param0)
  [0] Param3 -> spec(Param0)
  [] null
  [0] Param0 -> spec(Param0)
compress #0: Int
pass #0: 
let c0 = (- w key) in 
    if (== c0 0) then 1
    else 0
pass #1: 
let c0 = (- h key) in 
    if (== c0 0) then 1
    else 0
pass #2: 
if (< 0 tmp1) then + 1 tmp1
else tmp1
pass #3: 
tmp2

Inductive List;

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> <= pre x
    | cons {h, t} -> and (<= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

@Input key = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt w -> if (== w key) then 1
        else 0
    | cons {h, t} -> 
        let res = (f t) in 
            if (== key h) then 1
            else if (== res 0) then 0
            else + 1 res
    end
);

target = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt w -> 
        let c0 = (- w key) in 
            if (== c0 0) then 1
            else 0
    | cons {h, t} -> if (>= h key) then let c0 = (- h key) in 
            if (== c0 0) then 1
            else 0
        else let tmp1 = (f t) in 
            if (< 0 tmp1) then + 1 tmp1
            else tmp1
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target xs) in 
        tmp2
    else 0;
syn-comb: 1.38478
collect: 28.1341
label: 0.014513
extend-component: 0.000122
execute: 0.243646
syn-align: 28.4387
comb-size: 41
align-size: 3
extract-size: 12
29.8444
Success

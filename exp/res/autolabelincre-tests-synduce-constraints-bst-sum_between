
Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

@Input lo = Int;

@Input hi = Int;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf a -> if (and (> hi a) (> a lo)) then a
        else 0
    | node {a, l, r} -> + (if (and (> hi a) (> a lo)) then a
        else 0) (+ (f l) (f r))
    end
);

target = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf x -> if (or (<= hi x) (<= x lo)) then 0
        else x
    | node {a, l, r} -> if (< a lo) then let tmp2 = (f r) in 
            tmp2
        else if (> a hi) then let tmp3 = (f l) in 
            tmp3
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                if (or (== lo a) (== hi a)) then + tmp5 tmp4
                else + (+ a tmp5) tmp4
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp6 = (target t) in 
        tmp6
    else 0;

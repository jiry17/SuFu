
Inductive List;

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let r = (f t) in 
            {+ h r.1, max 0 (+ h r.2)}
    end
) xs).2;

snoc = fix (
    \f: List -> Int -> List. \xs: List. \w: Int. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t w}
    end
);

repr = fix (
    \f: ({Int, Int}) -> List -> {Int, Int}. \pre: {Int, Int}. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f {max pre.1 (+ h pre.2), + h pre.2} t
    end
) {0, 0};

main = \xs: List. 
    let tmp2 = (repr xs) in 
        tmp2.1;

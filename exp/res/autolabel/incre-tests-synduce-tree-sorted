
Inductive Tree;

spec = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Bool}. \t: Tree. 
    match t with
      leaf a -> {a, true}
    | node {a, l, r} -> 
        let r1 = (f l) in 
            let r2 = (f r) in 
                {a, and (and (and (< r1.1 a) (< a r2.1)) r1.2) r2.2}
    end
) t).2;

repr = fix (
    \f: Tree -> {Bool, Int}. \t: Tree. 
    match t with
      leaf a -> {true, a}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {and (and (and (< tmp2.2 a) tmp3.1) tmp2.1) (< a tmp3.2), a}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        tmp4.1;

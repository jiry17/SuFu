
Inductive List;

Inductive Pos;

Inductive Map;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (> a b) then a
    else b;

min_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> min (f l) (f r)
    end
);

max_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> max (f l) (f r)
    end
);

is_map = fix (
    \f: Map -> Bool. \m: Map. 
    match m with
      value {k, v} -> true
    | node {a, l, r} -> and (and (< (max_key l) a) (<= a (min_key r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | elt w -> cons {w, y}
    end
);

repeat = \w: Int. 
    fix (
    \f: Pos -> List. \n: Pos. 
    match n with
      one _ -> elt w
    | s n' -> cons {w, f n'}
    end
);

repr = fix (
    \f: Map -> List. \m: Map. 
    match m with
      value {k, v} -> repeat k v
    | node {a, l, r} -> cat (f l) (f r)
    end
);

count = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt h -> if (== h w) then 1
        else 0
    | cons {h, t} -> + (if (== h w) then 1
        else 0) (f t)
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \l: List. 
    match l with
      elt v -> {1, v}
    | cons {h, t} -> 
        let cnt = (count h l) in 
            let res = (f t) in 
                if (> cnt res.1) then {cnt, h}
                else res
    end
) xs).2;

p2i = fix (
    \f: Pos -> Int. \n: Pos. 
    match n with
      one _ -> 1
    | s m -> + 1 (f m)
    end
);

target = fix (
    \f: Map -> {Int, Int, Int}. \m: Map. 
    match m with
      value {k, v} -> 
        let cnt = (p2i v) in 
            {k, k, cnt}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {if (or (and (< tmp3.3 tmp2.3) (== tmp3.1 tmp3.2)) (and (< tmp2.1 tmp2.2) (== tmp3.3 tmp2.3))) then tmp2.1
                else tmp3.1, tmp3.2, tmp3.3}
    end
);

main = \m: Map. 
    if (is_map m) then let tmp4 = (target m) in 
        tmp4.1
    else 0;

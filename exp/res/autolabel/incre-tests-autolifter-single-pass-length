
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            + tmp1 1
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

main = single_pass length;

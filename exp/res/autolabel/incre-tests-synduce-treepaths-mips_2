
Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: ({Int, Int}) -> BTree -> {Int, Int}. \s: {Int, Int}. \t: BTree. 
    match t with
      empty _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ result.1 a, max result.2 (+ result.1 a)} r
    end
) {0, 0};

tree_repr = fix (
    \f: BTree -> {Int, Int}. \t: BTree. 
    match t with
      empty _ -> {0, 0}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {+ (+ tmp3.1 tmp2.1) a, if (< (+ (+ tmp3.2 tmp2.1) a) tmp2.2) then tmp2.2
                else + (+ tmp3.2 tmp2.1) a}
    end
);

repr = fix (
    \f: Zipper -> {Int, Int}. \z: Zipper. 
    match z with
      top _ -> {0, 0}
    | left {w, tree, zz} -> 
        let tmp5 = (tree_repr tree) in 
            let tmp6 = (f zz) in 
                {+ (+ w tmp6.1) tmp5.1, if (< (+ (+ w tmp6.2) tmp5.1) tmp5.2) then tmp5.2
                else + (+ w tmp6.2) tmp5.1}
    | right {w, tree, zz} -> 
        let tmp7 = (f zz) in 
            let tmp8 = (tree_repr tree) in 
                {+ (+ tmp8.1 w) tmp7.1, if (< (+ (+ tmp8.2 w) tmp7.1) tmp7.2) then tmp7.2
                else + (+ tmp8.2 w) tmp7.1}
    end
);

main = \z: Zipper. 
    let tmp9 = (repr z) in 
        {tmp9.1, tmp9.2};

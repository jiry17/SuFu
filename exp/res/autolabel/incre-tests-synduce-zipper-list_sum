
Inductive List;

Inductive Zipper;

concat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {h, t} -> cons {h, f t ys}
    end
);

rev = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            + h tmp2
    end
);

list_repr = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp5 = (f t) in 
            + h tmp5
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

repr = \z: Zipper. 
    match z with
      zip {l, r} -> 
        let tmp6 = (rev l) in 
            let tmp7 = (list_repr r) in 
                + tmp6 tmp7
    end
;

main = \z: Zipper. 
    let tmp8 = (repr z) in 
        tmp8;

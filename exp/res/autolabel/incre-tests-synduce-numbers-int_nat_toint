
Inductive Nat;

Inductive INat;

nsum = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

itoint = \n: INat. 
    match n with
      negative m -> - 0 (+ 1 (nsum m))
    | positive m -> nsum m
    end
;

Inductive EInt;

repr = fix (
    \f: EInt -> INat. \e: EInt. 
    match e with
      zero _ -> positive (z Unit)
    | sub1 e' -> 
        let res = (f e') in 
            match res with
              positive z _ -> negative (z Unit)
            | positive s n -> positive n
            | negative n -> negative (s n)
            end

    | add1 e' -> 
        let res = (f e') in 
            match res with
              positive n -> positive (s n)
            | negative z _ -> positive (z Unit)
            | negative s n -> negative n
            end

    end
);

target = fix (
    \f: EInt -> Int. \e: EInt. 
    match e with
      zero _ -> 0
    | add1 e' -> 
        let tmp2 = (f e') in 
            + tmp2 1
    | sub1 e' -> 
        let tmp3 = (f e') in 
            - tmp3 1
    end
);

main = \x: EInt. 
    let tmp4 = (target x) in 
        tmp4;

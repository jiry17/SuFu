
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (or (< tmp1.2 tmp1.1) (== h 0)) then tmp1.1
            else + 1 tmp1.1, if (== h 0) then 0
            else + 1 tmp1.2}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

max1s = fix (
    \f: Int -> Int -> List -> Int. \ma: Int. \l: Int. \xs: List. 
    match xs with
      nil _ -> max ma l
    | cons {h, t} -> if (== h 0) then f (max ma l) 0 t
        else f ma (+ l 1) t
    end
) 0 0;

main = single_pass max1s;

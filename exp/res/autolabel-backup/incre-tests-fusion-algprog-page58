
Inductive List;

tri = \op: Int -> Int. 
    fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tail = (let tmp3 = (f t) in 
            tmp3.2) in 
            {+ h tail, + (* h w) (* tail w)}
    end
);

@Input w = Int;

op = \x: Int. 
    * x w;

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

main = \xs: List. 
    let tmp4 = (tri op xs) in 
        tmp4.1;


Inductive Tree;

@Input x = Int;

spec = fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ result.1 (* result.2 a), * result.2 x} r
    end
) {0, 1};

repr = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      nil _ -> {0, 1}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {+ (+ tmp2.1 (* tmp2.2 a)) (* tmp3.1 x), * tmp2.2 (* tmp3.2 x)}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        {tmp4.1, tmp4.2};

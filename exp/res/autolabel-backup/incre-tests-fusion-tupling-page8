
Inductive Nat;

pred = \n: Nat. 
    match n with
      zero _ -> n
    | succ m -> m
    end
;

fib = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      zero _ -> 0
    | succ zero _ -> 1
    | succ succ m -> + (f m) (f (succ m))
    end
);

repr = fix (
    \f: Nat -> {Int, Int}. \n: Nat. 
    match n with
      zero _ -> {0, 1}
    | succ m -> 
        let tmp1 = (f m) in 
            {tmp1.2, + tmp1.1 tmp1.2}
    end
);

main = \n: Nat. 
    let tmp2 = (repr n) in 
        tmp2.1;

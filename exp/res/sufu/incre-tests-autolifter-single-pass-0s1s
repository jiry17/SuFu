
Inductive List;

single_pass = \v: List -> Bool. 
    let run = (fix (
    \f: List -> {Bool, Int}. \xs: List. 
    match xs with
      nil _ -> {true, - 0 al_inf}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {and tmp1.1 (<= tmp1.2 h), if (== tmp1.2 1) then tmp1.2
            else h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

inf = 100;

zsos = fix (
    \f: Bool -> List -> Bool. \an: Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> 
        let an = (and an (== h 1)) in 
            if (or (== h 0) an) then f an t
            else false
    end
) true;

main = single_pass zsos;

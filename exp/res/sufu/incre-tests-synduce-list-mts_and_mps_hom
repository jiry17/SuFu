
Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    let res = (fix (
    \f: List -> {Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0, 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_sum = (+ hd result.1) in 
                let new_mps = (max 0 (+ hd result.2)) in 
                    let new_mts = (max result.3 (+ hd result.1)) in 
                        {new_sum, new_mps, new_mts}
    end
) xs) in 
        {res.2, res.3};

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> {Int, Int, Int}. \xs: CList. 
    match xs with
      cnil _ -> {0, 0, 0}
    | single a -> {max a 0, max a 0, a}
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                {+ tmp3.3 (max tmp4.1 (- tmp3.1 tmp3.3)), max tmp4.2 (+ tmp4.3 tmp3.2), + tmp4.3 tmp3.3}
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        {tmp5.1, tmp5.2};

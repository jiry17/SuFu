
Inductive CList;

Inductive List;

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = fix (
    \f: CList -> Int. \cl: CList. 
    match cl with
      cnil _ -> 0
    | single h -> h
    | concat {l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                + tmp4 tmp3
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

@Start main = \cl: CList. 
    let tmp5 = (repr cl) in 
        tmp5;


Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 1
    | cons {hd, tl} -> * hd (f tl)
    end
);

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      cnil _ -> 1
    | single a -> a
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                * tmp4 tmp3
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        tmp5;


Inductive List;

Inductive NList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

interval = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt a -> {a, a}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {min hd result.1, max hd result.2}
    end
);

spec = \xs: NList. 
    (fix (
    \f: NList -> {Int, Int, Bool}. \xs: NList. 
    match xs with
      line a -> 
        let result = (interval a) in 
            {result.1, result.2, true}
    | ncons {hd, tl} -> 
        let r1 = (f tl) in 
            let r2 = (interval hd) in 
                {min r1.1 r2.1, max r1.2 r2.2, and r1.3 (and (<= r1.1 r2.1) (<= r1.2 r2.2))}
    end
) xs).3;

target = fix (
    \f: NList -> {Bool, Int, Int}. \xs: NList. 
    match xs with
      line x -> 
        let info = (interval x) in 
            let c0 = info.1 in 
                let c1 = info.2 in 
                    {true, c0, c1}
    | ncons {h, t} -> 
        let info = (interval h) in 
            let tmp1 = (f t) in 
                let c0 = info.2 in 
                    let c1 = info.1 in 
                        {and (and (<= tmp1.2 c1) tmp1.1) (<= tmp1.3 c0), tmp1.2, c0}
    end
);

main = \xs: NList. 
    let tmp2 = (target xs) in 
        tmp2.1;

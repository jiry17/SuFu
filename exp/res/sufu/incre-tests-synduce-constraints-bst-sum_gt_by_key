
Inductive List;

Inductive Map;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (> a b) then a
    else b;

min_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> min (f l) (f r)
    end
);

max_key = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> k
    | node {a, l, r} -> max (f l) (f r)
    end
);

is_map = fix (
    \f: Map -> Bool. \m: Map. 
    match m with
      value {k, v} -> true
    | node {a, l, r} -> and (and (< (max_key l) a) (<= a (min_key r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {k, v, t} -> cons {k, v, f t y}
    | elt {k, v} -> cons {k, v, y}
    end
);

repr = fix (
    \f: Map -> List. \m: Map. 
    match m with
      value {k, v} -> elt {k, v}
    | node {k, l, r} -> cat (f l) (f r)
    end
);

@Input key = Int;

spec = fix (
    \f: List -> Int. \l: List. 
    match l with
      elt {k, v} -> if (> k key) then v
        else 0
    | cons {k, v, t} -> + (if (> k key) then v
        else 0) (f t)
    end
);

target = fix (
    \f: Map -> Int. \m: Map. 
    match m with
      value {k, v} -> 
        let c0 = (- k key) in 
            if (< c0 1) then 0
            else v
    | node {a, l, r} -> if (> a key) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + tmp2 tmp3
        else let tmp4 = (f r) in 
            tmp4
    end
);

main = \m: Map. 
    if (is_map m) then let tmp5 = (target m) in 
        tmp5
    else 0;

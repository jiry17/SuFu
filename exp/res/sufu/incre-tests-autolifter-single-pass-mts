
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (< (+ h tmp1.2) tmp1.1) then tmp1.1
            else + h tmp1.2, + h tmp1.2}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mts = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max (+ res.2 h) res.1, + res.2 h}
    end
) xs).1;

main = single_pass mts;

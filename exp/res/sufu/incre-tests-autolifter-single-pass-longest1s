
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (< tmp1.2 tmp1.1) then tmp1.1
            else + h tmp1.1, if (== h 1) then + h tmp1.2
            else h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

longest1s = fix (
    \f: Int -> List -> Int. \len: Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let len = (if (== h 1) then + len 1
        else 0) in 
            max len (f len t)
    end
) 0;

main = single_pass longest1s;

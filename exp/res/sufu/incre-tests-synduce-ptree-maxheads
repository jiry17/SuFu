
Inductive Tree;

Inductive PTree;

Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

repr = fix (
    \f: Tree -> Int. \x: Tree. 
    match x with
      telt a -> a
    | tnode {a, l, r} -> 
        let tmp6 = (f l) in 
            max a tmp6
    end
);

spec = fix (
    \f: PTree -> Int. \x: PTree. 
    match x with
      pelt a -> a
    | pnode {a, l} -> 
        let maxh_aux = (fix (
        \g: List -> Int. \y: List. 
        match y with
          elt a -> f a
        | cons {hd, tl} -> f hd
        end
    )) in 
            max a (maxh_aux l)
    end
);

main = \x: Tree. 
    let tmp8 = (repr x) in 
        tmp8;


Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

@Input x = Int;

spec = fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ a (* x result.1), * x result.2} r
    end
) {0, 1};

repr = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      nil _ -> {0, 1}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {+ (+ tmp3.1 (* tmp3.2 a)) (* tmp2.1 (* tmp3.2 x)), * tmp2.2 (* tmp3.2 x)}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        {tmp4.1, tmp4.2};

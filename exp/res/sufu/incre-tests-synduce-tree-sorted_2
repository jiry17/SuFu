
Inductive Tree;

spec = fix (
    \f: Int -> Tree -> Bool. \y: Int. \t: Tree. 
    match t with
      leaf a -> > y a
    | node {a, l, r} -> 
        let r1 = (f a l) in 
            let r2 = (f a r) in 
                and r1 (and r2 (> y a))
    end
);

repr = fix (
    \f: ({Int, Tree}) -> {Bool, Int}. \t: {Int, Tree}. 
    match t with
      {pre, leaf a} -> 
        let c0 = (- a pre) in 
            {< c0 0, pre}
    | {pre, node {a, l, r}} -> 
        let lres = (f {a, l}) in 
            let rres = (f {a, r}) in 
                {and (and rres.1 (< rres.2 pre)) lres.1, pre}
    end
);

main = \key: Int. \t: Tree. 
    let res = (repr {key, t}) in 
        res.1;

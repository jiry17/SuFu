
Inductive List;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil unit, nil unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Bool. \xs: List. 
    let run = (fix (
    \f: List -> {Bool, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {true, 0, -100}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {<= 0 c0, c0, c0}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {and (and tmp1.1 (<= 0 (+ tmp2.2 tmp1.3))) (<= tmp2.3 (+ tmp2.2 tmp1.3)), + tmp2.2 tmp1.2, if (< (+ tmp2.2 tmp1.3) tmp2.3) then tmp2.3
                    else + tmp2.2 tmp1.3}
    end
)) in 
        let tmp3 = (run xs) in 
            tmp3.1;

inf = 100;

balanced = fix (
    \f: Int -> List -> Bool. \cnt: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> 
        let cnt = (+ cnt h) in 
            if (< cnt 0) then false
            else f cnt t
    end
) 0;

main = dac balanced;

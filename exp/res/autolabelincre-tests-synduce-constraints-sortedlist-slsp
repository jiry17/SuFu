
Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt w -> cons {w, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \c: CList. 
    match c with
      single w -> elt w
    | concat {w, l, r} -> cat (f l) (f r)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

is_parti = let lmax = (fix (
    \f: CList -> Int. \c: CList. 
    match c with
      single w -> w
    | concat {w, l, r} -> max (f l) (f r)
    end
)) in 
        let lmin = (fix (
        \f: CList -> Int. \c: CList. 
        match c with
          single w -> w
        | concat {w, l, r} -> min (f l) (f r)
        end
    )) in 
            fix (
            \f: CList -> Bool. \c: CList. 
            match c with
              single w -> true
            | concat {w, l, r} -> and (and (< (lmax l) w) (< w (lmin r))) (and (f l) (f r))
            end
        );

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Bool}. \xs: List. 
    match xs with
      elt w -> {max 0 w, >= w 0}
    | cons {h, t} -> 
        let res = (f t) in 
            let cond = (and (>= h 0) res.2) in 
                {if (cond) then + res.1 h
                else res.1, cond}
    end
) xs).1;

target = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single a -> max a 0
    | concat {w, l, r} -> if (<= w 0) then let tmp1 = (f r) in 
            tmp1
        else let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + tmp3 tmp2
    end
);

main = \xs: CList. 
    let inp = xs in 
        if (is_parti inp) then let tmp4 = (target inp) in 
            tmp4
        else 0;

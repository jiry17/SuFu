
Inductive Nat;

Inductive INat;

Inductive TwoInats;

Inductive EInt;

Inductive TwoInts;

nsum = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

itoint = \n: INat. 
    match n with
      negative m -> - 0 (+ 1 (nsum m))
    | positive m -> nsum m
    end
;

two_isum = \n: TwoInats. 
    match n with
      twoinats {n1, n2} -> + (itoint n1) (itoint n2)
    end
;

target_eint = fix (
    \f: EInt -> Int. \e: EInt. 
    match e with
      zero _ -> 0
    | add1 e' -> 
        let tmp2 = (f e') in 
            + 1 tmp2
    | sub1 e' -> 
        let tmp3 = (f e') in 
            + -1 tmp3
    end
);

target_twoints = \x: TwoInts. 
    match x with
      twoints {x1, x2} -> 
        let tmp4 = (target_eint x1) in 
            let tmp5 = (target_eint x2) in 
                + tmp5 tmp4
    end
;

irepr = fix (
    \f: EInt -> INat. \e: EInt. 
    match e with
      zero _ -> positive (z unit)
    | sub1 e' -> 
        let res = (f e') in 
            match res with
              positive z _ -> negative (z unit)
            | positive s n -> positive n
            | negative n -> negative (s n)
            end

    | add1 e' -> 
        let res = (f e') in 
            match res with
              positive n -> positive (s n)
            | negative z _ -> positive (z unit)
            | negative s n -> negative n
            end

    end
);

repr = \x: TwoInts. 
    match x with
      twoints {x1, x2} -> twoinats {irepr x1, irepr x2}
    end
;

main = \x: TwoInts. 
    let tmp6 = (target_twoints x) in 
        tmp6;

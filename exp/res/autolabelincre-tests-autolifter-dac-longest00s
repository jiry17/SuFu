
Inductive List;

is_even = \a: Int. 
    == a (* 2 (/ a 2));

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil unit, nil unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Int. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0, 0, 0}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {0, c0, 1, c0}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {if (and (and (is_even (+ (- (- (+ -1 tmp2.3) tmp2.4) tmp1.2) tmp1.3)) (< tmp2.1 (+ (- (- (+ -1 tmp2.3) tmp2.4) tmp1.2) tmp1.3))) (< tmp1.1 (+ (- (- (+ -1 tmp2.3) tmp2.4) tmp1.2) tmp1.3))) then + (- (- (+ -1 tmp2.3) tmp2.4) tmp1.2) tmp1.3
                    else if (and (< tmp2.1 tmp1.1) (<= (+ (- (- (+ -1 tmp2.3) tmp2.4) tmp1.2) tmp1.3) tmp1.1)) then tmp1.1
                    else if (<= (+ (- (- (+ -1 tmp2.3) tmp2.4) tmp1.2) tmp1.3) tmp2.1) then tmp2.1
                    else + (- (- tmp2.3 tmp2.4) tmp1.2) tmp1.3, if (== tmp2.2 0) then tmp1.2
                    else + tmp2.2 tmp1.3, if (false) then * 2 tmp2.3
                    else + tmp2.3 tmp1.3, if (== tmp2.3 (+ tmp2.3 tmp1.4)) then tmp2.4
                    else + tmp2.3 tmp1.4}
    end
)) in 
        let tmp3 = (run xs) in 
            tmp3.1;

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

longest00s = fix (
    \f: Int -> List -> Int. \len: Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let len = (if (== h 0) then + len 1
        else 0) in 
            if (is_even len) then max len (f len t)
            else f len t
    end
) 0;

main = dac longest00s;

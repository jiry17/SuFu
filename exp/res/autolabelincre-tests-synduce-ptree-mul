
Inductive Tree;

Inductive PTree;

Inductive PList;

repr = fix (
    \f: PTree -> Int. \pt: PTree. 
    match pt with
      pleaf _ -> 1
    | pnode {a, xs} -> 
        let l2t = (fix (
        \g: PList -> Int. \xs: PList. 
        match xs with
          pnil _ -> 1
        | pcons {h, t} -> 0
        end
    )) in 
            let tmp7 = (l2t xs) in 
                if (== tmp7 0) then 0
                else a
    end
);

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf _ -> 1
    | node {a, l, r} -> * a (* (f l) (f r))
    end
);

main = \x: PTree. 
    let tmp8 = (repr x) in 
        tmp8;

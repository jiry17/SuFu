
Inductive CList;

Inductive List;

allpos = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      cnil _ -> true
    | single w -> > w 0
    | concat {l, r} -> and (f l) (f r)
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = fix (
    \f: CList -> List. \cl: CList. 
    match cl with
      cnil _ -> nil unit
    | single h -> cons {h, nil unit}
    | concat {l, r} -> cat (f l) (f r)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {min h res.1, min res.2 (max res.1 h)}
    end
) xs).2;

target = fix (
    \f: CList -> Unit. \xs: CList. 
    match xs with
      cnil _ -> unit
    | single h -> unit
    | concat {l, r} -> unit
    end
);

main = \xs: CList. 
    if (allpos xs) then 0
    else 0;

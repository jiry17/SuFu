
Inductive List;

Inductive NList;

Inductive CNList;

cton = fix (
    \f: CNList -> NList. 
    let dec = (fix (
    \g: CNList -> CNList -> NList. \l: CNList. \c: CNList. 
    match c with
      sglt x -> ncons {x, f l}
    | cat {x, y} -> g (cat {y, l}) x
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> line x
        | cat {x, y} -> dec y x
        end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> + h (f t)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: NList. 
    let res = (fix (
    \f: NList -> {Int, Int, Int, Int}. \xs: NList. 
    match xs with
      line a -> 
        let s = (sum a) in 
            let ms = (max s 0) in 
                {ms, ms, ms, s}
    | ncons {h, t} -> 
        let hsum = (sum h) in 
            let res = (f t) in 
                {max (+ res.1 hsum) 0, max res.2 (+ res.1 hsum), max (+ res.4 hsum) res.3, + res.4 hsum}
    end
) xs) in 
        {res.1, res.2, res.3};

target = fix (
    \f: CNList -> {Int, Int, Int, Int}. 
    let list_repr = (fix (
    \g: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> 
        let tmp2 = (g t) in 
            + tmp2 h
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> 
            let tmp3 = (list_repr x) in 
                {max tmp3 0, max tmp3 0, max tmp3 0, tmp3}
        | cat {l, r} -> 
            let tmp4 = (f l) in 
                let tmp5 = (f r) in 
                    {max tmp4.1 (+ tmp4.4 tmp5.1), max tmp4.2 (max tmp5.2 (+ tmp4.3 tmp5.1)), + tmp5.4 (max tmp4.3 (- tmp5.3 tmp5.4)), + tmp4.4 tmp5.4}
        end
);

main = \c: CNList. 
    let tmp6 = (target c) in 
        {tmp6.1, tmp6.2, tmp6.3};


Inductive List;

Inductive IndexedList;

length = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + 1 (f t)
    end
);

@Input w = Int;

repr = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, w}
    | cons {h, t} -> 
        let tmp2 = (length t) in 
            let tmp3 = (f t) in 
                {if (== h tmp3.2) then tmp2
                else tmp3.1, tmp3.2}
    end
);

spec = fix (
    \f: IndexedList -> Int. \xs: IndexedList. 
    match xs with
      inil _ -> 0
    | icons {h, i, t} -> if (== h w) then i
        else f t
    end
);

main = \xs: List. 
    let tmp4 = (repr xs) in 
        tmp4.1;

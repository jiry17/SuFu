
Inductive Tree;

Inductive TreeMemo;

memo = \t: TreeMemo. 
    match t with
      mleaf {x, _} -> x
    | mnode {x, _, _, _} -> x
    end
;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmax = fix (
    \f: TreeMemo -> Int. \t: TreeMemo. 
    match t with
      mleaf {_, x} -> x
    | mnode {_, x, l, r} -> max x (max (f l) (f r))
    end
);

is_memo = fix (
    \f: TreeMemo -> Bool. \t: TreeMemo. 
    match t with
      mleaf {n, x} -> true
    | mnode {n, a, l, r} -> and (and (and (>= n (tmax l)) (>= n (tmax r))) (>= n a)) (and (f l) (f r))
    end
);

repr = fix (
    \f: TreeMemo -> Tree. \t: TreeMemo. 
    match t with
      mleaf {n, a} -> leaf a
    | mnode {n, a, l, r} -> node {a, f l, f r}
    end
);

@Input key = Int;

spec = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf a -> == a key
    | node {a, l, r} -> or (== a key) (or (f l) (f r))
    end
);

target = fix (
    \f: TreeMemo -> Bool. \t: TreeMemo. 
    match t with
      mleaf {n, a} -> == a key
    | mnode {n, a, l, r} -> if (> key n) then false
        else let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                or (or (== a key) tmp2) tmp1
    end
);

main = \mt: TreeMemo. 
    if (is_memo mt) then let tmp3 = (target mt) in 
        tmp3
    else false;

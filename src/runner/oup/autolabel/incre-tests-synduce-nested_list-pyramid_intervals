
List :: List. <elt Int | cons {Int,List}>
elt : Int -> List'. <elt Int | cons {Int,List'}>
cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
NList :: NList. <line List | ncons {List,NList}>
line : List -> NList'. <line List | ncons {List,NList'}>
ncons : {List,NList} -> NList'. <line List | ncons {List,NList'}>
max : Int -> Int -> Int
min : Int -> Int -> Int
interval : List -> {Int, Int}
spec : NList -> Bool
target : NList -> NList
main : NList -> Bool


Inductive List;

Inductive NList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

interval = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt a -> {a, a}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {min hd result.1, max hd result.2}
    end
);

spec = \xs: NList. 
    (fix (
    \f: NList -> {Int, Int, Bool}. \xs: NList. 
    match xs with
      line a -> 
        let result = (interval a) in 
            {result.1, result.2, true}
    | ncons {hd, tl} -> 
        let r1 = (f tl) in 
            let r2 = (interval hd) in 
                {min r1.1 r2.1, max r1.2 r2.2, and r1.3 (and (<= r1.1 r2.1) (<= r1.2 r2.2))}
    end
) xs).3;

target = fix (
    \f: NList -> Compress NList. \xs: NList. 
    match xs with
      line x -> 
        let info = (interval x) in 
            align (label xs ) 
    | ncons {h, t} -> 
        let info = (interval h) in 
            let tmp1 = (f t) in 
                align (label (ncons {h, unlabel tmp1 }) ) 
    end
);

main = \xs: NList. 
    let tmp2 = (target xs) in 
        align (spec (unlabel tmp2 )) ;
align term #0: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
align@0 create@0 xs
  info: {Int,Int}
  x: List. <elt Int | cons {Int,List}>
  xs: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
align term #1: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
align@1 create@0 ncons ({h,unlabel tmp1})
  info: {Int,Int}
  xs: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  t: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  tmp1: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  h: List. <elt Int | cons {Int,List}>
align term #2: Bool
align@2 spec (unlabel tmp2)
  xs: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  tmp2: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
Components for compress:
  min [Int,Int] -> Int 3
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 2

Components for align:
  interval [List. <elt Int | cons {Int,List}>] -> (Int * Int) 4
  spec [NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>] -> Bool 5
  min [Int,Int] -> Int 3
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 2

Components for comb:
  min [Int,Int] -> Int 3
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  ncons [(List. <elt Int | cons {Int,List}> * NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 2

align term #0: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
align@0 create@0 xs
  info: {Int,Int}
  x: List. <elt Int | cons {Int,List}>
  xs: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
align term #1: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
align@1 create@0 ncons ({h,unlabel tmp1})
  info: {Int,Int}
  xs: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  t: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  tmp1: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  h: List. <elt Int | cons {Int,List}>
align term #2: Bool
align@2 spec (unlabel tmp2)
  xs: NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  tmp2: compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  access0([Param0,Param1,Param2]@(Int * Int))
  access1([Param0,Param1,Param2]@(Int * Int))
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@(Int * Int)
  Param0
  prod([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  access0([Param0,Param1,Param2,Param3,Param4]@(Int * Int))
  access1([Param0,Param1,Param2,Param3,Param4]@(Int * Int))
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@(Int * Int)
  Param0
  prod([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>([Param0,Param1]@Compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  access0([Int@0]@(Int * Int))
  access1([Int@0]@(Int * Int))
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1,Int@2]@Int [Int@0]@List. <elt Int | cons {Int,List}>)
  min([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  access0([Int@0,Int@1]@(Int * Int))
  access1([Int@0,Int@1]@(Int * Int))
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  access0([Bool@0,Int@0]@(Int * Int))
  access1([Bool@0,Int@0]@(Int * Int))
  min([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  max([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
node: [Bool@0,Int@0]@Bool
  Bool@0
  spec([Bool@0,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>
  List. <elt Int | cons {Int,List}>@0
  elt([List. <elt Int | cons {Int,List}>@0]@Int)
node: [Int@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>
  List. <elt Int | cons {Int,List}>@0
  elt([Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
node: [Int@0,List. <elt Int | cons {Int,List}>@0]@Int
  Int@0
  +([Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
  -([Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
  ite([Int@0,List. <elt Int | cons {Int,List}>@0]@Bool [Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
  access0([Int@0,List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  access1([Int@0,List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1,Int@2]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  min([Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
  max([Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
node: [Bool@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>
  List. <elt Int | cons {Int,List}>@0
  elt([Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
node: [Bool@0,List. <elt Int | cons {Int,List}>@0]@Bool
  Bool@0
  fold[List. <elt Int | cons {Int,List}>->Bool]([Bool@0,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Bool@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  spec([Bool@0,List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  access0([Int@0,Int@1,Int@2]@(Int * Int))
  access1([Int@0,Int@1,Int@2]@(Int * Int))
  min([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  -([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  ite([Bool@0,Int@0,Int@1]@Bool [Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  access0([Bool@0,Int@0,Int@1]@(Int * Int))
  access1([Bool@0,Int@0,Int@1]@(Int * Int))
  min([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  max([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
node: [Bool@0,Int@0,Int@1]@Bool
  Bool@0
  spec([Bool@0,Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Bool@0,Bool@1,Int@0]@Bool
  Bool@0
  Bool@1
  spec([Bool@0,Bool@1,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Bool@0,Bool@1,Int@0]@Int
  Int@0
  +([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  -([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  ite([Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  access0([Bool@0,Bool@1,Int@0]@(Int * Int))
  access1([Bool@0,Bool@1,Int@0]@(Int * Int))
  min([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  max([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  access0([Param0]@(Int * Int))
  access1([Param0]@(Int * Int))
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int]([List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [List. <elt Int | cons {Int,List}>@0]@Int
  +([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  -([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  ite([List. <elt Int | cons {Int,List}>@0]@Bool [List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  access0([List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  access1([List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  min([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  max([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
node: [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int
  +([Bool@0,List. <elt Int | cons {Int,List}>@0]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
  -([Bool@0,List. <elt Int | cons {Int,List}>@0]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
  ite([Bool@0,List. <elt Int | cons {Int,List}>@0]@Bool [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
  access0([Bool@0,List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  access1([Bool@0,List. <elt Int | cons {Int,List}>@0]@(Int * Int))
  fold[List. <elt Int | cons {Int,List}>->Int]([Bool@0,Int@0]@Int [Bool@0,Int@0,Int@1]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  min([Bool@0,List. <elt Int | cons {Int,List}>@0]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
  max([Bool@0,List. <elt Int | cons {Int,List}>@0]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
node: [Param0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@List. <elt Int | cons {Int,List}>)
  fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Bool]([List. <elt Int | cons {Int,List}>@0]@Bool [Bool@0,List. <elt Int | cons {Int,List}>@0]@Bool [Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
  spec([Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0,Int@1]@Bool [Bool@0,Int@0,Int@1]@Bool [Int@0]@List. <elt Int | cons {Int,List}>)
  spec([Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0,Int@1]@Bool
  spec([Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [List. <elt Int | cons {Int,List}>@0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  spec([List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0,List. <elt Int | cons {Int,List}>@0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0,Int@1]@Bool [Bool@0,Int@0,Int@1]@Bool [Int@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
  spec([Int@0,List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Int@0,Int@1,Int@2]@Bool
  spec([Int@0,Int@1,Int@2]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)
node: [Param0]@(Int * Int)
  prod([Param0]@Int [Param0]@Int)
  interval([Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@(Int * Int)
  prod([Int@0]@Int [Int@0]@Int)
  interval([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@(Int * Int)
  prod([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  interval([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@(Int * Int)
  prod([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  interval([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [List. <elt Int | cons {Int,List}>@0]@(Int * Int)
  prod([List. <elt Int | cons {Int,List}>@0]@Int [List. <elt Int | cons {Int,List}>@0]@Int)
  interval([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,List. <elt Int | cons {Int,List}>@0]@(Int * Int)
  prod([Int@0,List. <elt Int | cons {Int,List}>@0]@Int [Int@0,List. <elt Int | cons {Int,List}>@0]@Int)
  interval([Int@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,List. <elt Int | cons {Int,List}>@0]@(Int * Int)
  prod([Bool@0,List. <elt Int | cons {Int,List}>@0]@Int [Bool@0,List. <elt Int | cons {Int,List}>@0]@Int)
  interval([Bool@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2]@(Int * Int)
  prod([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  interval([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Int@1]@(Int * Int)
  prod([Bool@0,Int@0,Int@1]@Int [Bool@0,Int@0,Int@1]@Int)
  interval([Bool@0,Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0]@(Int * Int)
  prod([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  interval([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  elt([Param0]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0]@Int)
node: [Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0,Int@1]@Int)
node: [Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Bool@1,Int@0]@Int)
node: [Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Int@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,List. <elt Int | cons {Int,List}>@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Bool@0,List. <elt Int | cons {Int,List}>@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Int@0,Int@1,Int@2]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0,Int@1]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Bool@0,Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  line([Bool@0,Bool@1,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>
  Param0
  line([Param0]@List. <elt Int | cons {Int,List}>)





















  [0] spec(Param0)
  [1] fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).0,Int@0(),Param0)
  [2] fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).1,interval(List. <elt Int | cons {Int,List}>@0()).1,Param0)
  [0] Param0.0
  [1] Param0.1
  [0] spec(Param0)
  [1] fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).0,Int@0(),Param0)
  [2] fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).1,interval(List. <elt Int | cons {Int,List}>@0()).1,Param0)
  [0] Param0.1
  [1] Param3 -> spec(Param0)
  [2] Param3 -> fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).0,Int@0(),Param0)
  [3] Param3 -> fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).1,interval(List. <elt Int | cons {Int,List}>@0()).1,Param0)
  [4] Param0.0
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).0,Int@0(),Param0)
  [2] Param1 -> fold[NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>->Int](interval(List. <elt Int | cons {Int,List}>@0()).1,interval(List. <elt Int | cons {Int,List}>@0()).1,Param0)
compress #0: {Bool,Int,Int}
pass #0: 
let c0 = info.1 in 
    let c1 = info.2 in 
        {true, c0, c1}
pass #1: 
let c0 = info.2 in 
    let c1 = info.1 in 
        {and (and (<= tmp1.2 c1) tmp1.1) (<= tmp1.3 c0), tmp1.2, c0}
pass #2: 
tmp2.1

Inductive List;

Inductive NList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

interval = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt a -> {a, a}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {min hd result.1, max hd result.2}
    end
);

spec = \xs: NList. 
    (fix (
    \f: NList -> {Int, Int, Bool}. \xs: NList. 
    match xs with
      line a -> 
        let result = (interval a) in 
            {result.1, result.2, true}
    | ncons {hd, tl} -> 
        let r1 = (f tl) in 
            let r2 = (interval hd) in 
                {min r1.1 r2.1, max r1.2 r2.2, and r1.3 (and (<= r1.1 r2.1) (<= r1.2 r2.2))}
    end
) xs).3;

target = fix (
    \f: NList -> {Bool, Int, Int}. \xs: NList. 
    match xs with
      line x -> 
        let info = (interval x) in 
            let c0 = info.1 in 
                let c1 = info.2 in 
                    {true, c0, c1}
    | ncons {h, t} -> 
        let info = (interval h) in 
            let tmp1 = (f t) in 
                let c0 = info.2 in 
                    let c1 = info.1 in 
                        {and (and (<= tmp1.2 c1) tmp1.1) (<= tmp1.3 c0), tmp1.2, c0}
    end
);

main = \xs: NList. 
    let tmp2 = (target xs) in 
        tmp2.1;
syn-comb: 2.0149
collect: 3.2789
label: 0.019687
extend-component: 1.28391
execute: 8.50924
syn-align: 13.3693
comb-size: 42
align-size: 27
extract-size: 12
15.4146
Success

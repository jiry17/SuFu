
Nat :: Nat. <z Unit | s Nat>
z : Unit -> Nat'. <z Unit | s Nat'>
s : Nat -> Nat'. <z Unit | s Nat'>
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
CList :: CList. <cnil Unit | ccons {Nat,Int,CList}>
cnil : Unit -> CList'. <cnil Unit | ccons {Nat,Int,CList'}>
ccons : {Nat,Int,CList} ->
        CList'. <cnil Unit | ccons {Nat,Int,CList'}>
repeat : Int -> List -> Nat -> List
value : Nat -> Int
spec : List -> Int
repr : CList -> List'. <nil Unit | cons {Int,List'}>
main : CList -> Int


Inductive Nat;

Inductive List;

Inductive CList;

repeat = \w: Int. \xs: List. 
    fix (
    \f: Nat -> List. \n: Nat. 
    match n with
      z _ -> xs
    | s m -> cons {w, f m}
    end
);

value = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | ccons {n, h, t} -> 
        let w = (value n) in 
            let tmp2 = (repeat h) in 
                let tmp3 = (f t) in 
                    align (label (tmp2 (unlabel tmp3 ) n) ) 
    end
);

main = \xs: CList. 
    let tmp4 = (repr xs) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp2 (unlabel tmp3) (n)
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
  n: Nat. <z Unit | s Nat>
  w: Int
  xs: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
  t: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
align term #2: Int
align@2 spec (unlabel tmp4)
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
Components for compress:
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 0
  ccons [(Nat. <z Unit | s Nat> * Int * CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>)] -> CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}> 2
  cnil [Bot] -> CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}> 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  z [Bot] -> Nat. <z Unit | s Nat> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1

Components for align:
  repeat [Int,List. <nil Unit | cons {Int,List}>,Nat. <z Unit | s Nat>] -> List. <nil Unit | cons {Int,List}> 3
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 0
  ccons [(Nat. <z Unit | s Nat> * Int * CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>)] -> CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}> 2
  cnil [Bot] -> CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}> 2
  value [Nat. <z Unit | s Nat>] -> Int 4
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  z [Bot] -> Nat. <z Unit | s Nat> 0
  spec [List. <nil Unit | cons {Int,List}>] -> Int 5
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1

Components for comb:
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 0
  ccons [(Nat. <z Unit | s Nat> * Int * CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>)] -> CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}> 2
  cnil [Bot] -> CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}> 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  z [Bot] -> Nat. <z Unit | s Nat> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp2 (unlabel tmp3) (n)
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
  n: Nat. <z Unit | s Nat>
  w: Int
  xs: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
  t: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
align term #2: Int
align@2 spec (unlabel tmp4)
  tmp4: compress[0] List. <nil Unit | cons {Int,List}>
  xs: CList. <cnil Unit | ccons {Nat. <z Unit | s Nat>,Int,CList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param3
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0









  [] spec(Param0)
  [] spec(Param0)
  [0] Param3
  [1] Param0 -> spec(Param0)
  [2] Param1
  [] null
  [0] Param0 -> spec(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
+ (* w h) tmp3
pass #2: 
tmp4

Inductive Nat;

Inductive List;

Inductive CList;

repeat = \w: Int. \xs: List. 
    fix (
    \f: Nat -> List. \n: Nat. 
    match n with
      z _ -> xs
    | s m -> cons {w, f m}
    end
);

value = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

repr = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      cnil _ -> 0
    | ccons {n, h, t} -> 
        let w = (value n) in 
            let tmp3 = (f t) in 
                + (* w h) tmp3
    end
);

main = \xs: CList. 
    let tmp4 = (repr xs) in 
        tmp4;
syn-comb: 0.236563
collect: 3.37649
label: 0.009959
extend-component: 0.001739
execute: 0.166689
syn-align: 3.61343
comb-size: 11
align-size: 3
extract-size: 5
3.86818
Success

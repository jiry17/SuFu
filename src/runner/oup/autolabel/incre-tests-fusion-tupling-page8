
Nat :: Nat. <zero Unit | succ Nat>
 zero : Unit -> Nat'. <zero Unit | succ Nat'>
 succ : Nat -> Nat'. <zero Unit | succ Nat'>
 pred : Nat -> Nat
fib : Nat -> Int
repr : Nat -> Nat
main : Nat -> Int


Inductive Nat;

pred = \n: Nat. 
    match n with
      zero _ -> n
    | succ m -> m
    end
;

fib = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      zero _ -> 0
    | succ zero _ -> 1
    | succ succ m -> + (f m) (f (succ m))
    end
);

repr = fix (
    \f: Nat -> Compress Nat. \n: Nat. 
    match n with
      zero _ -> 
        align (label n ) 
    | succ m -> 
        let tmp1 = (f m) in 
            align (label (succ (unlabel tmp1 )) ) 
    end
);

main = \n: Nat. 
    let tmp2 = (repr n) in 
        align (fib (unlabel tmp2 )) ;
align term #0: compress[0] Nat. <zero Unit | succ Nat>
align@0 create@0 n
  n: Nat. <zero Unit | succ Nat>
align term #1: compress[0] Nat. <zero Unit | succ Nat>
align@1 create@0 succ (unlabel tmp1)
  tmp1: compress[0] Nat. <zero Unit | succ Nat>
  m: Nat. <zero Unit | succ Nat>
  n: Nat. <zero Unit | succ Nat>
align term #2: Int
align@2 fib (unlabel tmp2)
  tmp2: compress[0] Nat. <zero Unit | succ Nat>
  n: Nat. <zero Unit | succ Nat>
Components for compress:
  succ [Nat. <zero Unit | succ Nat>] -> Nat. <zero Unit | succ Nat> 0
  zero [Bot] -> Nat. <zero Unit | succ Nat> 0
  pred [Nat. <zero Unit | succ Nat>] -> Nat. <zero Unit | succ Nat> 1

Components for align:
  succ [Nat. <zero Unit | succ Nat>] -> Nat. <zero Unit | succ Nat> 0
  zero [Bot] -> Nat. <zero Unit | succ Nat> 0
  pred [Nat. <zero Unit | succ Nat>] -> Nat. <zero Unit | succ Nat> 1
  fib [Nat. <zero Unit | succ Nat>] -> Int 2

Components for comb:
  succ [Nat. <zero Unit | succ Nat>] -> Nat. <zero Unit | succ Nat> 0
  zero [Bot] -> Nat. <zero Unit | succ Nat> 0
  pred [Nat. <zero Unit | succ Nat>] -> Nat. <zero Unit | succ Nat> 1

align term #0: compress[0] Nat. <zero Unit | succ Nat>
align@0 create@0 n
  n: Nat. <zero Unit | succ Nat>
align term #1: compress[0] Nat. <zero Unit | succ Nat>
align@1 create@0 succ (unlabel tmp1)
  tmp1: compress[0] Nat. <zero Unit | succ Nat>
  m: Nat. <zero Unit | succ Nat>
  n: Nat. <zero Unit | succ Nat>
align term #2: Int
align@2 fib (unlabel tmp2)
  tmp2: compress[0] Nat. <zero Unit | succ Nat>
  n: Nat. <zero Unit | succ Nat>
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] Nat. <zero Unit | succ Nat>([Param0,Param1,Param2]@Compress[0] Nat. <zero Unit | succ Nat>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
node: [Param0,Param1,Param2]@Compress[0] Nat. <zero Unit | succ Nat>
  Param0
num = 2
start: start
node: start
  Compress[0] Nat. <zero Unit | succ Nat>([Param0,Param1]@Compress[0] Nat. <zero Unit | succ Nat>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
node: [Param0,Param1]@Compress[0] Nat. <zero Unit | succ Nat>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fib([Param0]@Nat. <zero Unit | succ Nat>)
node: [Param0]@Nat. <zero Unit | succ Nat>
  Param0
  succ([Param0]@Nat. <zero Unit | succ Nat>)
  pred([Param0]@Nat. <zero Unit | succ Nat>)















  [0] fib(Param0)
  [1] fib(succ(Param0))
  [0] fib(Param0)
  [1] fib(succ(Param0))
  [0] Param0 -> fib(Param0)
  [1] Param0 -> fib(succ(Param0))
  [] null
  [0] Param0 -> fib(Param0)
  [1] Param0 -> fib(succ(Param0))
compress #0: {Int,Int}
pass #0: 
{0, 1}
pass #1: 
{tmp1.2, + tmp1.1 tmp1.2}
pass #2: 
tmp2.1

Inductive Nat;

pred = \n: Nat. 
    match n with
      zero _ -> n
    | succ m -> m
    end
;

fib = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      zero _ -> 0
    | succ zero _ -> 1
    | succ succ m -> + (f m) (f (succ m))
    end
);

repr = fix (
    \f: Nat -> {Int, Int}. \n: Nat. 
    match n with
      zero _ -> {0, 1}
    | succ m -> 
        let tmp1 = (f m) in 
            {tmp1.2, + tmp1.1 tmp1.2}
    end
);

main = \n: Nat. 
    let tmp2 = (repr n) in 
        tmp2.1;
syn-comb: 0.801698
collect: 0.056469
label: 0.010104
extend-component: 1e-06
execute: 0.002481
syn-align: 0.059766
comb-size: 15
align-size: 9
extract-size: 2
0.889349
Success

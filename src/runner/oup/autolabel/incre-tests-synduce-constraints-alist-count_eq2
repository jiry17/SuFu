
List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 Nat :: Nat. <z Unit | s Nat>
z : Unit -> Nat'. <z Unit | s Nat'>
s : Nat -> Nat'. <z Unit | s Nat'>
AList :: AList. <anil Unit | acons {Int,Nat,AList}>
anil : Unit -> AList'. <anil Unit | acons {Int,Nat,AList'}>
acons : {Int,Nat,AList} ->
        AList'. <anil Unit | acons {Int,Nat,AList'}>
is_unique : AList -> Bool
w : Int
spec : List -> Int
repr : AList -> List'. <nil Unit | cons {Int,List'}>
n2i : Nat -> Int
target : AList -> AList'. <anil Unit | acons {Int,Nat,AList'}>
main : AList -> Int


Inductive List;

Inductive Nat;

Inductive AList;

is_unique = let key_differ = (\key: Int. 
    fix (
    \f: AList -> Bool. \xs: AList. 
    match xs with
      anil _ -> true
    | acons {h, _, t} -> and (not (== h key)) (f t)
    end
)) in 
        fix (
        \f: AList -> Bool. \xs: AList. 
        match xs with
          anil _ -> true
        | acons {h, _, t} -> and (key_differ h t) (f t)
        end
    );

@Input w = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> if (== h w) then + 1 (f t)
        else f t
    end
);

repr = let repeat = (\w: Int. \suf: List. 
    fix (
    \f: Nat -> List. \n: Nat. 
    match n with
      z _ -> suf
    | s m -> cons {w, f m}
    end
)) in 
        fix (
        \f: AList -> List. \xs: AList. 
        match xs with
          anil _ -> nil Unit
        | acons {h, n, t} -> repeat h (f t) n
        end
    );

n2i = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

target = fix (
    \f: AList -> Compress AList. \xs: AList. 
    match xs with
      anil _ -> 
        let tmp1 = (anil Unit) in 
            align (label tmp1 ) 
    | acons {h, n, t} -> if (== h w) then let num = (n2i n) in 
            let tmp2 = (acons {h, n, t}) in 
                align (label tmp2 ) 
        else let tmp3 = (f t) in 
            align (label (acons {h, n, unlabel tmp3 }) ) 
    end
);

main = \xs: AList. 
    if (is_unique xs) then let tmp4 = (target xs) in 
        align (spec (repr (unlabel tmp4 ))) 
    else 0;
align term #0: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align@0 create@0 tmp1
  tmp1: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align term #1: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align@1 create@0 tmp2
  tmp2: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  n: Nat. <z Unit | s Nat>
  num: Int
  h: Int
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  t: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align term #2: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align@2 create@0 acons ({h,n,unlabel tmp3})
  tmp3: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  t: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  n: Nat. <z Unit | s Nat>
  h: Int
align term #3: Int
align@3 spec (repr (unlabel tmp4))
  tmp4: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
Components for compress:
  anil [Bot] -> AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}> 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  acons [(Int * Nat. <z Unit | s Nat> * AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)] -> AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}> 2
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 1
  z [Bot] -> Nat. <z Unit | s Nat> 1

Components for align:
  anil [Bot] -> AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}> 2
  n2i [Nat. <z Unit | s Nat>] -> Int 7
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  acons [(Int * Nat. <z Unit | s Nat> * AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)] -> AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}> 2
  spec [List. <nil Unit | cons {Int,List}>] -> Int 5
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 1
  is_unique [AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>] -> Bool 3
  z [Bot] -> Nat. <z Unit | s Nat> 1
  repr [AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>] -> List. <nil Unit | cons {Int,List}> 6

Components for comb:
  anil [Bot] -> AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}> 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  acons [(Int * Nat. <z Unit | s Nat> * AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)] -> AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}> 2
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 1
  z [Bot] -> Nat. <z Unit | s Nat> 1

align term #0: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align@0 create@0 tmp1
  tmp1: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align term #1: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align@1 create@0 tmp2
  tmp2: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  n: Nat. <z Unit | s Nat>
  num: Int
  h: Int
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  t: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align term #2: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
align@2 create@0 acons ({h,n,unlabel tmp3})
  tmp3: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  t: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  n: Nat. <z Unit | s Nat>
  h: Int
align term #3: Int
align@3 spec (repr (unlabel tmp4))
  tmp4: compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  xs: AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int
  Param2
  Param3
  Param6
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param4
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  Param0
num = 3
start: start
node: start
  Compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>([Param0,Param1,Param2]@Compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
node: [Param0,Param1,Param2]@Compress[0] AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  Param0
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  fold[AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>->Int]([Param1]@Int [Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Int [Param0,Param1]@AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)
  spec([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
node: [Param1]@Int
  Param1
  +([Param1]@Int [Param1]@Int)
  -([Param1]@Int [Param1]@Int)
node: [Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Int
  Param1
  Int@0
  Int@1
  +([Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Int [Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Int)
  -([Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Int [Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Int)
  fold[Nat. <z Unit | s Nat>->Int]([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Nat. <z Unit | s Nat>)
  n2i([Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Nat. <z Unit | s Nat>)
node: [Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Nat. <z Unit | s Nat>
  Nat. <z Unit | s Nat>@0
  s([Int@0,Int@1,Nat. <z Unit | s Nat>@0,Param1]@Nat. <z Unit | s Nat>)
node: [Int@0,Int@1,Param1]@Int
  Param1
  Int@0
  Int@1
  +([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
  -([Int@0,Int@1,Param1]@Int [Int@0,Int@1,Param1]@Int)
node: [Int@0,Int@1,Int@2,Param1]@Int
  Param1
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  -([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
node: [Param0,Param1]@Bool
  is_unique([Param0,Param1]@AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)
node: [Param0,Param1]@List. <nil Unit | cons {Int,List}>
  repr([Param0,Param1]@AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>)
node: [Param0,Param1]@AList. <anil Unit | acons {Int,Nat. <z Unit | s Nat>,AList}>
  Param0












  [] spec(repr(Param0))
  [] spec(repr(Param0))
  [0] Param2
  [] spec(repr(Param0))
  [0] Param0 -> spec(repr(Param0))
  [] null
  [0] Param0 -> spec(repr(Param0))
compress #0: Int
pass #0: 
0
pass #1: 
num
pass #2: 
tmp3
pass #3: 
tmp4

Inductive List;

Inductive Nat;

Inductive AList;

is_unique = let key_differ = (\key: Int. 
    fix (
    \f: AList -> Bool. \xs: AList. 
    match xs with
      anil _ -> true
    | acons {h, _, t} -> and (not (== h key)) (f t)
    end
)) in 
        fix (
        \f: AList -> Bool. \xs: AList. 
        match xs with
          anil _ -> true
        | acons {h, _, t} -> and (key_differ h t) (f t)
        end
    );

@Input w = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> if (== h w) then + 1 (f t)
        else f t
    end
);

repr = let repeat = (\w: Int. \suf: List. 
    fix (
    \f: Nat -> List. \n: Nat. 
    match n with
      z _ -> suf
    | s m -> cons {w, f m}
    end
)) in 
        fix (
        \f: AList -> List. \xs: AList. 
        match xs with
          anil _ -> nil Unit
        | acons {h, n, t} -> repeat h (f t) n
        end
    );

n2i = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

target = fix (
    \f: AList -> Int. \xs: AList. 
    match xs with
      anil _ -> 0
    | acons {h, n, t} -> if (== h w) then let num = (n2i n) in 
            num
        else let tmp3 = (f t) in 
            tmp3
    end
);

main = \xs: AList. 
    if (is_unique xs) then let tmp4 = (target xs) in 
        tmp4
    else 0;
syn-comb: 0.703778
collect: 4.57055
label: 0.016115
extend-component: 3e-06
execute: 0.389266
syn-align: 5.04985
comb-size: 4
align-size: 5
extract-size: 3
5.78143
Success

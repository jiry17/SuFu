
AExpr :: AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,
                                                        AExpr}>
 int : Int ->
       AExpr'. <int Int | plus {AExpr',AExpr'} | minus {AExpr',
                                                        AExpr'}>
 plus : {AExpr,AExpr} ->
        AExpr'. <int Int | plus {AExpr',AExpr'} | minus {AExpr',
                                                         AExpr'}>
 minus : {AExpr,AExpr} ->
         AExpr'. <int Int | plus {AExpr',AExpr'} | minus {
         AExpr',AExpr'}>
 NExpr :: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {
Int,NExpr,NExpr}>
nint : Int ->
       NExpr'. <nint Int | nplus {Int,NExpr',NExpr'} | nminus {
       Int,NExpr',NExpr'}>
nplus : {Int,NExpr,NExpr} ->
        NExpr'. <nint Int | nplus {Int,NExpr',NExpr'} | nminus {
        Int,NExpr',NExpr'}>
nminus : {Int,NExpr,NExpr} ->
         NExpr'. <nint Int | nplus {Int,NExpr',NExpr'} | nminus {
         Int,NExpr',NExpr'}>
repr : NExpr ->
       AExpr'. <int Int | plus {AExpr',AExpr'} | minus {AExpr',
                                                        AExpr'}>
memo : NExpr -> Int
is_memo : NExpr -> Bool
spec : AExpr -> Int
target : NExpr ->
         NExpr'. <nint Int | nplus {Int,NExpr',NExpr'} | nminus {
         Int,NExpr',NExpr'}>
gen : AExpr ->
      NExpr'. <nint Int | nplus {Int,NExpr',NExpr'} | nminus {
      Int,NExpr',NExpr'}>
main : AExpr -> Int


Inductive AExpr;

Inductive NExpr;

repr = fix (
    \f: NExpr -> AExpr. \e: NExpr. 
    match e with
      nint a -> int a
    | nplus {_, a, b} -> plus {f a, f b}
    | nminus {_, a, b} -> minus {f a, f b}
    end
);

memo = \e: NExpr. 
    match e with
      nint a -> a
    | nplus {a, _, _} -> a
    | nminus {a, _, _} -> a
    end
;

is_memo = fix (
    \f: NExpr -> Bool. \e: NExpr. 
    match e with
      nint a -> true
    | nplus {n, e1, e2} -> and (== n (+ (memo e1) (memo e2))) (and (f e1) (f e2))
    | nminus {n, e1, e2} -> and (== n (- (memo e1) (memo e2))) (and (f e1) (f e2))
    end
);

spec = fix (
    \f: AExpr -> Int. \e: AExpr. 
    match e with
      int a -> a
    | plus {e1, e2} -> + (f e1) (f e2)
    | minus {e1, e2} -> - (f e1) (f e2)
    end
);

target = fix (
    \f: NExpr -> Compress NExpr. \e: NExpr. 
    match e with
      nint a -> 
        let tmp1 = (nint a) in 
            align (label tmp1 ) 
    | nplus {s, _, _} -> 
        align (label e ) 
    | nminus {s, _, _} -> 
        align (label e ) 
    end
);

gen = fix (
    \f: AExpr -> NExpr. \e: AExpr. 
    match e with
      int a -> nint a
    | plus {a, b} -> 
        let res = {f a, f b} in 
            nplus {+ (memo res.1) (memo res.2), res.1, res.2}
    | minus {a, b} -> 
        let res = {f a, f b} in 
            nminus {- (memo res.1) (memo res.2), res.1, res.2}
    end
);

main = \e: AExpr. 
    let inp = (gen e) in 
        if (is_memo inp) then let tmp2 = (target inp) in 
            align (spec (repr (unlabel tmp2 ))) 
        else 0;
align term #0: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align@0 create@0 tmp1
  a: Int
  tmp1: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  e: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align term #1: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align@1 create@0 e
  e: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  s: Int
align term #2: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align@2 create@0 e
  e: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  s: Int
align term #3: Int
align@3 spec (repr (unlabel tmp2))
  e: AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>
  tmp2: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  inp: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
Components for compress:
  int [Int] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  nint [Int] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  nplus [(Int * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  minus [(AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> * AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  nminus [(Int * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  memo [NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>] -> Int 3
  plus [(AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> * AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0

Components for align:
  gen [AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 7
  int [Int] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  nint [Int] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  spec [AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>] -> Int 5
  nplus [(Int * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  minus [(AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> * AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  nminus [(Int * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  memo [NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>] -> Int 3
  repr [NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 2
  plus [(AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> * AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  is_memo [NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>] -> Bool 4

Components for comb:
  int [Int] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  nint [Int] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  nplus [(Int * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  minus [(AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> * AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0
  nminus [(Int * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> * NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)] -> NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}> 1
  memo [NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>] -> Int 3
  plus [(AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> * AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)] -> AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}> 0

align term #0: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align@0 create@0 tmp1
  a: Int
  tmp1: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  e: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align term #1: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align@1 create@0 e
  e: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  s: Int
align term #2: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
align@2 create@0 e
  e: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  s: Int
align term #3: Int
align@3 spec (repr (unlabel tmp2))
  e: AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>
  tmp2: compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  inp: NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  Param1
  Param2
  nint([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  memo([Param0,Param1,Param2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
num = 1
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  memo([Param0,Param1]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Param0,Param1]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  Param0
  nint([Param0,Param1]@Int)
num = 2
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  memo([Param0,Param1]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Param0,Param1]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  Param0
  nint([Param0,Param1]@Int)
num = 3
start: start
node: start
  Compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>([Param0,Param1,Param2]@Compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  Param1
node: [Param0,Param1,Param2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  Param2
  nint([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  memo([Param0,Param1,Param2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  spec([Int@0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  memo([Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  spec([Int@0,Int@1,Int@2]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  memo([Int@0,Int@1,Int@2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Bool@0,Bool@1,Int@0]@Int
  Int@0
  +([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  -([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  ite([Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  spec([Bool@0,Bool@1,Int@0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  memo([Bool@0,Bool@1,Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Bool@0,Bool@1,Int@0]@Bool
  Bool@0
  Bool@1
  is_memo([Bool@0,Bool@1,Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int [Param0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
  spec([Param0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  memo([Param0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Param0]@Bool
  fold[NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>->Bool]([Int@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Param0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
  is_memo([Param0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Int@0]@Bool
  is_memo([Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Int@0,Int@1,Int@2]@Bool
  is_memo([Int@0,Int@1,Int@2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  gen([Int@0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  nint([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  gen([Int@0,Int@1,Int@2]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  nint([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  gen([Bool@0,Bool@1,Int@0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  nint([Bool@0,Bool@1,Int@0]@Int)
node: [Param0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>
  int([Param0]@Int)
  repr([Param0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Int@0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>
  int([Int@0]@Int)
  repr([Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Int@0,Int@1,Int@2]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>
  int([Int@0,Int@1,Int@2]@Int)
  repr([Int@0,Int@1,Int@2]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Bool@0,Bool@1,Int@0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>
  int([Bool@0,Bool@1,Int@0]@Int)
  repr([Bool@0,Bool@1,Int@0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>)
node: [Param0]@NExpr. <nint Int | nplus {Int,NExpr,NExpr} | nminus {Int,NExpr,NExpr}>
  Param0
  gen([Param0]@AExpr. <int Int | plus {AExpr,AExpr} | minus {AExpr,AExpr}>)
  nint([Param0]@Int)



  [] null
  [0] memo(Param2)
compress #0: Unit
pass #0: 
Unit
pass #1: 
Unit
pass #2: 
Unit
pass #3: 
let c0 = (memo inp) in 
    c0

Inductive AExpr;

Inductive NExpr;

repr = fix (
    \f: NExpr -> AExpr. \e: NExpr. 
    match e with
      nint a -> int a
    | nplus {_, a, b} -> plus {f a, f b}
    | nminus {_, a, b} -> minus {f a, f b}
    end
);

memo = \e: NExpr. 
    match e with
      nint a -> a
    | nplus {a, _, _} -> a
    | nminus {a, _, _} -> a
    end
;

is_memo = fix (
    \f: NExpr -> Bool. \e: NExpr. 
    match e with
      nint a -> true
    | nplus {n, e1, e2} -> and (== n (+ (memo e1) (memo e2))) (and (f e1) (f e2))
    | nminus {n, e1, e2} -> and (== n (- (memo e1) (memo e2))) (and (f e1) (f e2))
    end
);

spec = fix (
    \f: AExpr -> Int. \e: AExpr. 
    match e with
      int a -> a
    | plus {e1, e2} -> + (f e1) (f e2)
    | minus {e1, e2} -> - (f e1) (f e2)
    end
);

target = fix (
    \f: NExpr -> Unit. \e: NExpr. 
    match e with
      nint a -> Unit
    | nplus {s, _, _} -> Unit
    | nminus {s, _, _} -> Unit
    end
);

gen = fix (
    \f: AExpr -> NExpr. \e: AExpr. 
    match e with
      int a -> nint a
    | plus {a, b} -> 
        let res = {f a, f b} in 
            nplus {+ (memo res.1) (memo res.2), res.1, res.2}
    | minus {a, b} -> 
        let res = {f a, f b} in 
            nminus {- (memo res.1) (memo res.2), res.1, res.2}
    end
);

main = \e: AExpr. 
    let inp = (gen e) in 
        if (is_memo inp) then let c0 = (memo inp) in 
            c0
        else 0;
syn-comb: 0.009624
collect: 0.202591
label: 0.017614
extend-component: 0
execute: 0.004867
syn-align: 0.217517
comb-size: 8
align-size: 0
extract-size: 3
0.255869
Success


Tree :: Tree. <leaf Int | node {Int,Tree,Tree}>
 leaf : Int -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <leaf Int | node {Int,Tree',Tree'}>
 is_sym_pair : Tree -> Tree -> Bool
is_sym : Tree -> Bool
min : Int -> Int -> Int
spec : Tree -> Int
target : Tree -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
main : Tree -> Int


Inductive Tree;

is_sym_pair = fix (
    \f: Tree -> Tree -> Bool. \l: Tree. \r: Tree. 
    match {l, r} with
      {leaf x1, leaf x2} -> == x1 x2
    | {node {x1, l1, r1}, node {x2, l2, r2}} -> and (== x1 x2) (and (f r1 l2) (f l1 r1))
    | _ -> false
    end
);

is_sym = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf _ -> true
    | node {_, l, r} -> and (is_sym_pair l r) (and (f l) (f r))
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf w -> 
        let tmp1 = (leaf w) in 
            align (label tmp1 ) 
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            align (label (node {w, unlabel tmp2 , r}) ) 
    end
);

main = \t: Tree. 
    if (is_sym t) then let tmp3 = (target t) in 
        align (spec (unlabel tmp3 )) 
    else 0;
align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  w: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({w,unlabel tmp2,r})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  w: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: Int
align@2 spec (unlabel tmp3)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
Components for compress:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 3

Components for align:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  is_sym_pair [Tree. <leaf Int | node {Int,Tree,Tree}>,Tree. <leaf Int | node {Int,Tree,Tree}>] -> Bool 1
  is_sym [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Bool 2
  spec [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 4
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 3

Components for comb:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 3

align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  w: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({w,unlabel tmp2,r})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  w: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: Int
align@2 spec (unlabel tmp3)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param1
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param3
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  spec([Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  ite([Int@0,Int@1,Int@2]@Bool [Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  spec([Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@Int
  Int@0
  +([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  -([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  ite([Bool@0,Bool@1,Int@0]@Bool [Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
  spec([Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Bool@0,Bool@1,Int@0]@Int [Bool@0,Bool@1,Int@0]@Int)
node: [Bool@0,Bool@1,Int@0]@Bool
  Bool@0
  Bool@1
  is_sym_pair([Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}> [Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  is_sym([Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Bool]([Int@0]@Bool [Bool@0,Bool@1,Int@0]@Bool [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  is_sym_pair([Param0]@Tree. <leaf Int | node {Int,Tree,Tree}> [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  is_sym([Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0]@Bool
  is_sym_pair([Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}> [Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  is_sym([Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2]@Bool
  is_sym_pair([Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}> [Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  is_sym([Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Int@1,Int@2]@Int)
node: [Bool@0,Bool@1,Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Bool@0,Bool@1,Int@0]@Int)
node: [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  Param0
  leaf([Param0]@Int)









  [] spec(Param0)
  [0] Param0
  [] spec(Param0)
  [0] Param1
  [1] Param3 -> spec(Param0)
  [] null
  [0] Param1 -> spec(Param0)
compress #0: Int
pass #0: 
w
pass #1: 
min w tmp2
pass #2: 
tmp3

Inductive Tree;

is_sym_pair = fix (
    \f: Tree -> Tree -> Bool. \l: Tree. \r: Tree. 
    match {l, r} with
      {leaf x1, leaf x2} -> == x1 x2
    | {node {x1, l1, r1}, node {x2, l2, r2}} -> and (== x1 x2) (and (f r1 l2) (f l1 r1))
    | _ -> false
    end
);

is_sym = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf _ -> true
    | node {_, l, r} -> and (is_sym_pair l r) (and (f l) (f r))
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

target = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            min w tmp2
    end
);

main = \t: Tree. 
    if (is_sym t) then let tmp3 = (target t) in 
        tmp3
    else 0;
syn-comb: 0.003179
collect: 0.538886
label: 0.014142
extend-component: 1.5e-05
execute: 0.00212
syn-align: 0.544508
comb-size: 7
align-size: 3
extract-size: 5
0.568998
Success

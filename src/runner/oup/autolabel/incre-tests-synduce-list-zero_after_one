
BList :: BList. <nil Unit | cons {Bool,BList}>
 nil : Unit -> BList'. <nil Unit | cons {Bool,BList'}>
 cons : {Bool,BList} -> BList'. <nil Unit | cons {Bool,BList'}>
 CList :: CList. <emp Unit | single Bool | concat {CList,CList}>
emp : Unit ->
      CList'. <emp Unit | single Bool | concat {CList',CList'}>
single : Bool ->
         CList'. <emp Unit | single Bool | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <emp Unit | single Bool | concat {CList',CList'}>
const_true : Bool
const_false : Bool
op_and : Bool -> Bool -> Bool
op_or : Bool -> Bool -> Bool
cat_list : BList -> BList -> BList
repr : CList -> BList'. <nil Unit | cons {Bool,BList'}>
spec : BList -> Bool
main : CList -> Bool


Inductive BList;

Inductive CList;

const_true = true;

const_false = false;

op_and = \x: Bool. \y: Bool. 
    and x y;

op_or = \x: Bool. \y: Bool. 
    or x y;

cat_list = fix (
    \f: BList -> BList -> BList. \xs: BList. \ys: BList. 
    match xs with
      nil _ -> ys
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CList -> Compress BList. \xs: CList. 
    match xs with
      emp _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single a -> 
        let tmp2 = (cons {a, nil Unit}) in 
            align (label tmp2 ) 
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                align (label (cat_list (unlabel tmp3 ) (unlabel tmp4 )) ) 
    end
);

spec = \xs: BList. 
    (fix (
    \f: BList -> {Bool, Bool, Bool}. \xs: BList. 
    match xs with
      nil _ -> {false, false, false}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_seen1 = (or result.1 hd) in 
                let new_res = (or result.2 (and result.1 (not hd))) in 
                    let new_aux = (or result.3 (not hd)) in 
                        {new_seen1, new_res, new_aux}
    end
) xs).2;

main = \xs: CList. 
    let tmp5 = (repr xs) in 
        align (spec (unlabel tmp5 )) ;
align term #0: compress[0] BList. <nil Unit | cons {Bool,BList}>
align@0 create@0 tmp1
  tmp1: BList. <nil Unit | cons {Bool,BList}>
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
align term #1: compress[0] BList. <nil Unit | cons {Bool,BList}>
align@1 create@0 tmp2
  a: Bool
  tmp2: BList. <nil Unit | cons {Bool,BList}>
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
align term #2: compress[0] BList. <nil Unit | cons {Bool,BList}>
align@2 create@0 cat_list (unlabel tmp3) (unlabel tmp4)
  b: CList. <emp Unit | single Bool | concat {CList,CList}>
  tmp4: compress[0] BList. <nil Unit | cons {Bool,BList}>
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
  a: CList. <emp Unit | single Bool | concat {CList,CList}>
  tmp3: compress[0] BList. <nil Unit | cons {Bool,BList}>
align term #3: Bool
align@3 spec (unlabel tmp5)
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
  tmp5: compress[0] BList. <nil Unit | cons {Bool,BList}>
Components for compress:
  concat [(CList. <emp Unit | single Bool | concat {CList,CList}> * CList. <emp Unit | single Bool | concat {CList,CList}>)] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  single [Bool] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  const_true [] -> Bool 2
  emp [Bot] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  cons [(Bool * BList. <nil Unit | cons {Bool,BList}>)] -> BList. <nil Unit | cons {Bool,BList}> 0
  const_false [] -> Bool 3
  op_or [Bool,Bool] -> Bool 5
  op_and [Bool,Bool] -> Bool 4
  nil [Bot] -> BList. <nil Unit | cons {Bool,BList}> 0

Components for align:
  spec [BList. <nil Unit | cons {Bool,BList}>] -> Bool 8
  concat [(CList. <emp Unit | single Bool | concat {CList,CList}> * CList. <emp Unit | single Bool | concat {CList,CList}>)] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  single [Bool] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  const_true [] -> Bool 2
  emp [Bot] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  cons [(Bool * BList. <nil Unit | cons {Bool,BList}>)] -> BList. <nil Unit | cons {Bool,BList}> 0
  const_false [] -> Bool 3
  op_or [Bool,Bool] -> Bool 5
  op_and [Bool,Bool] -> Bool 4
  nil [Bot] -> BList. <nil Unit | cons {Bool,BList}> 0
  cat_list [BList. <nil Unit | cons {Bool,BList}>,BList. <nil Unit | cons {Bool,BList}>] -> BList. <nil Unit | cons {Bool,BList}> 6

Components for comb:
  concat [(CList. <emp Unit | single Bool | concat {CList,CList}> * CList. <emp Unit | single Bool | concat {CList,CList}>)] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  single [Bool] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  const_true [] -> Bool 2
  emp [Bot] -> CList. <emp Unit | single Bool | concat {CList,CList}> 1
  cons [(Bool * BList. <nil Unit | cons {Bool,BList}>)] -> BList. <nil Unit | cons {Bool,BList}> 0
  const_false [] -> Bool 3
  op_or [Bool,Bool] -> Bool 5
  op_and [Bool,Bool] -> Bool 4
  nil [Bot] -> BList. <nil Unit | cons {Bool,BList}> 0

align term #0: compress[0] BList. <nil Unit | cons {Bool,BList}>
align@0 create@0 tmp1
  tmp1: BList. <nil Unit | cons {Bool,BList}>
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
align term #1: compress[0] BList. <nil Unit | cons {Bool,BList}>
align@1 create@0 tmp2
  a: Bool
  tmp2: BList. <nil Unit | cons {Bool,BList}>
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
align term #2: compress[0] BList. <nil Unit | cons {Bool,BList}>
align@2 create@0 cat_list (unlabel tmp3) (unlabel tmp4)
  b: CList. <emp Unit | single Bool | concat {CList,CList}>
  tmp4: compress[0] BList. <nil Unit | cons {Bool,BList}>
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
  a: CList. <emp Unit | single Bool | concat {CList,CList}>
  tmp3: compress[0] BList. <nil Unit | cons {Bool,BList}>
align term #3: Bool
align@3 spec (unlabel tmp5)
  xs: CList. <emp Unit | single Bool | concat {CList,CList}>
  tmp5: compress[0] BList. <nil Unit | cons {Bool,BList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Bool
  const_true
  const_false
  op_or([Param0,Param1]@Bool [Param0,Param1]@Bool)
  op_and([Param0,Param1]@Bool [Param0,Param1]@Bool)
num = 1
start: start
node: start
  Bool([Param0,Param1,Param2]@Bool)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  ite([Param0,Param1,Param2]@Bool [Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Bool
  Param0
  const_true
  const_false
  op_or([Param0,Param1,Param2]@Bool [Param0,Param1,Param2]@Bool)
  op_and([Param0,Param1,Param2]@Bool [Param0,Param1,Param2]@Bool)
num = 2
start: start
node: start
  Compress[0] BList. <nil Unit | cons {Bool,BList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] BList. <nil Unit | cons {Bool,BList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Bool([Param0,Param1,Param2,Param3,Param4]@Bool)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] BList. <nil Unit | cons {Bool,BList}>
  Param1
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  ite([Param0,Param1,Param2,Param3,Param4]@Bool [Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Bool
  const_true
  const_false
  op_or([Param0,Param1,Param2,Param3,Param4]@Bool [Param0,Param1,Param2,Param3,Param4]@Bool)
  op_and([Param0,Param1,Param2,Param3,Param4]@Bool [Param0,Param1,Param2,Param3,Param4]@Bool)
num = 3
start: start
node: start
  Compress[0] BList. <nil Unit | cons {Bool,BList}>([Param0,Param1]@Compress[0] BList. <nil Unit | cons {Bool,BList}>)
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Compress[0] BList. <nil Unit | cons {Bool,BList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Bool
  const_true
  const_false
  op_or([Param0,Param1]@Bool [Param0,Param1]@Bool)
  op_and([Param0,Param1]@Bool [Param0,Param1]@Bool)
num = 0
start: start
node: start
  Bool([Param0]@Bool)
node: [Bool@0,Bool@1]@Bool
  Bool@0
  Bool@1
  const_true
  const_false
  op_or([Bool@0,Bool@1]@Bool [Bool@0,Bool@1]@Bool)
  op_and([Bool@0,Bool@1]@Bool [Bool@0,Bool@1]@Bool)
node: [Param0]@Bool
  fold[BList. <nil Unit | cons {Bool,BList}>->Bool]([]@Bool [Bool@0,Bool@1]@Bool [Param0]@BList. <nil Unit | cons {Bool,BList}>)
  spec([Param0]@BList. <nil Unit | cons {Bool,BList}>)
  const_true
  const_false
  op_or([Param0]@Bool [Param0]@Bool)
  op_and([Param0]@Bool [Param0]@Bool)
node: []@Bool
  const_true
  const_false
  op_or([]@Bool []@Bool)
  op_and([]@Bool []@Bool)
node: [Param0]@BList. <nil Unit | cons {Bool,BList}>
  Param0
  cat_list([Param0]@BList. <nil Unit | cons {Bool,BList}> [Param0]@BList. <nil Unit | cons {Bool,BList}>)







































  [0] spec(Param0)
  [1] fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),Bool@0(),Param0)
  [2] fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),const_false(),Param0)
  [3] spec(cat_list(Param0,Param0))
  [0] spec(Param0)
  [1] fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),Bool@0(),Param0)
  [2] fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),const_false(),Param0)
  [3] spec(cat_list(Param0,Param0))
  [0] Param0
  [0] spec(Param0)
  [1] fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),Bool@0(),Param0)
  [2] fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),const_false(),Param0)
  [3] spec(cat_list(Param0,Param0))
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),Bool@0(),Param0)
  [2] Param1 -> fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),const_false(),Param0)
  [3] Param1 -> spec(cat_list(Param0,Param0))
  [4] Param4 -> spec(Param0)
  [5] Param4 -> fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),Bool@0(),Param0)
  [6] Param4 -> fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),const_false(),Param0)
  [7] Param4 -> spec(cat_list(Param0,Param0))
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),Bool@0(),Param0)
  [2] Param1 -> fold[BList. <nil Unit | cons {Bool,BList}>->Bool](const_true(),const_false(),Param0)
  [3] Param1 -> spec(cat_list(Param0,Param0))
compress #0: {Bool,Bool,Bool,Bool}
pass #0: 
{false, true, true, false}
pass #1: 
{false, a, false, false}
pass #2: 
{or (or (and (and (not tmp3.2) (not tmp4.3)) (op_or tmp4.1 tmp4.2)) (and (and (op_or tmp4.1 tmp3.4) (not tmp4.3)) (op_or tmp4.1 tmp4.2))) (op_or tmp4.1 tmp3.1), or (and tmp4.2 tmp3.2) (and tmp3.2 (not tmp3.3)), and tmp4.3 tmp3.3, or (or (and (and (not tmp4.2) (not tmp3.3)) (op_or tmp4.2 tmp3.2)) (and (and (not tmp3.2) (not tmp4.3)) (op_or tmp4.2 tmp4.4))) (op_or tmp4.4 tmp3.4)}
pass #3: 
tmp5.1

Inductive BList;

Inductive CList;

const_true = true;

const_false = false;

op_and = \x: Bool. \y: Bool. 
    and x y;

op_or = \x: Bool. \y: Bool. 
    or x y;

cat_list = fix (
    \f: BList -> BList -> BList. \xs: BList. \ys: BList. 
    match xs with
      nil _ -> ys
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CList -> {Bool, Bool, Bool, Bool}. \xs: CList. 
    match xs with
      emp _ -> {false, true, true, false}
    | single a -> {false, a, false, false}
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                {or (or (and (and (not tmp3.2) (not tmp4.3)) (op_or tmp4.1 tmp4.2)) (and (and (op_or tmp4.1 tmp3.4) (not tmp4.3)) (op_or tmp4.1 tmp4.2))) (op_or tmp4.1 tmp3.1), or (and tmp4.2 tmp3.2) (and tmp3.2 (not tmp3.3)), and tmp4.3 tmp3.3, or (or (and (and (not tmp4.2) (not tmp3.3)) (op_or tmp4.2 tmp3.2)) (and (and (not tmp3.2) (not tmp4.3)) (op_or tmp4.2 tmp4.4))) (op_or tmp4.4 tmp3.4)}
    end
);

spec = \xs: BList. 
    (fix (
    \f: BList -> {Bool, Bool, Bool}. \xs: BList. 
    match xs with
      nil _ -> {false, false, false}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_seen1 = (or result.1 hd) in 
                let new_res = (or result.2 (and result.1 (not hd))) in 
                    let new_aux = (or result.3 (not hd)) in 
                        {new_seen1, new_res, new_aux}
    end
) xs).2;

main = \xs: CList. 
    let tmp5 = (repr xs) in 
        tmp5.1;
syn-comb: 0.263505
collect: 2.11852
label: 0.014604
extend-component: 0.023647
execute: 0.764023
syn-align: 2.77769
comb-size: 152
align-size: 25
extract-size: 5
3.064
Success

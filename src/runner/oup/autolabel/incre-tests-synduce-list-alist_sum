
List :: List. <nil Unit | cons {{Int,Int},List}>
 nil : Unit -> List'. <nil Unit | cons {{Int,Int},List'}>
 cons : {{Int,Int},List} ->
        List'. <nil Unit | cons {{Int,Int},List'}>
 CList :: CList. <cnil Unit | single {Int,Int} | concat {CList,
                                                        CList}>
cnil : Unit ->
       CList'. <cnil Unit | single {Int,Int} | concat {CList',
                                                       CList'}>
single : {Int,Int} ->
         CList'. <cnil Unit | single {Int,Int} | concat {CList',
                                                         CList'}>
concat : {CList,CList} ->
         CList'. <cnil Unit | single {Int,Int} | concat {CList',
                                                         CList'}>
cat : List -> List -> List
repr : CList -> List'. <nil Unit | cons {{Int,Int},List'}>
x : Int
spec : List -> Int
main : CList -> Int


Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single x -> 
        let tmp2 = (cons {x, nil Unit}) in 
            align (label tmp2 ) 
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                align (label (cat (unlabel tmp3 ) (unlabel tmp4 )) ) 
    end
);

@Input x = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let key = h.1 in 
            let value = h.2 in 
                if (== x key) then + value (f t)
                else f t
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        align (spec (unlabel tmp5 )) ;
align term #0: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp1: List. <nil Unit | cons {{Int,Int},List}>
align term #1: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align@1 create@0 tmp2
  x: {Int,Int}
  tmp2: List. <nil Unit | cons {{Int,Int},List}>
  xs: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
align term #2: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align@2 create@0 cat (unlabel tmp3) (unlabel tmp4)
  b: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp4: compress[0] List. <nil Unit | cons {{Int,Int},List}>
  xs: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  a: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp3: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align term #3: Int
align@3 spec (unlabel tmp5)
  x: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp5: compress[0] List. <nil Unit | cons {{Int,Int},List}>
Components for compress:
  cons [((Int * Int) * List. <nil Unit | cons {{Int,Int},List}>)] -> List. <nil Unit | cons {{Int,Int},List}> 0
  cnil [Bot] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1
  nil [Bot] -> List. <nil Unit | cons {{Int,Int},List}> 0
  single [(Int * Int)] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> * CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>)] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1

Components for align:
  cat [List. <nil Unit | cons {{Int,Int},List}>,List. <nil Unit | cons {{Int,Int},List}>] -> List. <nil Unit | cons {{Int,Int},List}> 2
  cons [((Int * Int) * List. <nil Unit | cons {{Int,Int},List}>)] -> List. <nil Unit | cons {{Int,Int},List}> 0
  cnil [Bot] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1
  spec [List. <nil Unit | cons {{Int,Int},List}>] -> Int 5
  nil [Bot] -> List. <nil Unit | cons {{Int,Int},List}> 0
  single [(Int * Int)] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> * CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>)] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1

Components for comb:
  cons [((Int * Int) * List. <nil Unit | cons {{Int,Int},List}>)] -> List. <nil Unit | cons {{Int,Int},List}> 0
  cnil [Bot] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1
  nil [Bot] -> List. <nil Unit | cons {{Int,Int},List}> 0
  single [(Int * Int)] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1
  concat [(CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> * CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>)] -> CList. <cnil Unit | single {Int,Int} | concat {CList,CList}> 1

align term #0: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align@0 create@0 tmp1
  xs: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp1: List. <nil Unit | cons {{Int,Int},List}>
align term #1: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align@1 create@0 tmp2
  x: {Int,Int}
  tmp2: List. <nil Unit | cons {{Int,Int},List}>
  xs: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
align term #2: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align@2 create@0 cat (unlabel tmp3) (unlabel tmp4)
  b: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp4: compress[0] List. <nil Unit | cons {{Int,Int},List}>
  xs: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  a: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp3: compress[0] List. <nil Unit | cons {{Int,Int},List}>
align term #3: Int
align@3 spec (unlabel tmp5)
  x: CList. <cnil Unit | single {Int,Int} | concat {CList,CList}>
  tmp5: compress[0] List. <nil Unit | cons {{Int,Int},List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  access0([Param0,Param1,Param2,Param3]@(Int * Int))
  access1([Param0,Param1,Param2,Param3]@(Int * Int))
node: [Param0,Param1,Param2,Param3]@(Int * Int)
  Param0
  prod([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {{Int,Int},List}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <nil Unit | cons {{Int,Int},List}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <nil Unit | cons {{Int,Int},List}>
  Param1
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
num = 3
start: start
node: start
  Compress[0] List. <nil Unit | cons {{Int,Int},List}>([Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {{Int,Int},List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {{Int,Int},List}>
  Param1
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  fold[List. <nil Unit | cons {{Int,Int},List}>->Int]([Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int [Param0,Param1]@List. <nil Unit | cons {{Int,Int},List}>)
  spec([Param0,Param1]@List. <nil Unit | cons {{Int,Int},List}>)
node: [Param1]@Int
  Param1
  +([Param1]@Int [Param1]@Int)
  -([Param1]@Int [Param1]@Int)
node: [Int@0,Int@1,Int@2,Param1]@Int
  Param1
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  -([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
node: [Param0,Param1]@List. <nil Unit | cons {{Int,Int},List}>
  Param0
  cat([Param0,Param1]@List. <nil Unit | cons {{Int,Int},List}> [Param0,Param1]@List. <nil Unit | cons {{Int,Int},List}>)












  [] spec(Param0)
  [] spec(Param0)
  [0] Param0.1
  [1] -(Param3,Param0.0)
  [] spec(Param0)
  [0] Param1 -> spec(Param0)
  [1] Param4 -> spec(Param0)
  [] null
  [0] Param1 -> spec(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
let c0 = x.2 in 
    let c1 = (- x x.1) in 
        if (or (< 0 c1) (< c1 0)) then 0
        else c0
pass #2: 
+ tmp4 tmp3
pass #3: 
tmp5

Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      cnil _ -> 0
    | single x -> 
        let c0 = x.2 in 
            let c1 = (- x x.1) in 
                if (or (< 0 c1) (< c1 0)) then 0
                else c0
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                + tmp4 tmp3
    end
);

@Input x = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let key = h.1 in 
            let value = h.2 in 
                if (== x key) then + value (f t)
                else f t
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        tmp5;
syn-comb: 0.977894
collect: 0.896822
label: 0.011478
extend-component: 0.00173
execute: 0.182274
syn-align: 1.14541
comb-size: 33
align-size: 3
extract-size: 13
2.14275
Success

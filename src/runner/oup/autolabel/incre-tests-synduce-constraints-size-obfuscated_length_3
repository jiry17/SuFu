
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 insert : Int -> List -> List'. <elt Int | cons {Int,List'}>
sort : List -> List'. <elt Int | cons {Int,List'}>
len : List -> Int
is_length_gt2 : List -> Bool
target : List -> List'. <elt Int | cons {Int,List'}>
main : List -> Int


Inductive List;

insert = \y: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> if (< y x) then cons {y, elt x}
        else cons {x, elt y}
    | cons {h, t} -> if (< y h) then cons {y, xs}
        else cons {h, f t}
    end
);

sort = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> elt x
    | cons {h, t} -> insert h (f t)
    end
);

len = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt _ -> 0
    | cons {_, t} -> + 1 (f t)
    end
);

is_length_gt2 = \xs: List. 
    >= (len xs) 2;

target = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      elt x -> 
        let tmp1 = (elt x) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            align (label (cons {h, unlabel tmp2 }) ) 
    end
);

main = \xs: List. 
    if (is_length_gt2 xs) then let tmp3 = (target xs) in 
        align (len (sort (unlabel tmp3 ))) 
    else 0;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <elt Int | cons {Int,List}>
  x: Int
  tmp1: List. <elt Int | cons {Int,List}>
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  h: Int
  t: List. <elt Int | cons {Int,List}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  xs: List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 len (sort (unlabel tmp3))
  xs: List. <elt Int | cons {Int,List}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0

Components for align:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  insert [Int,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 1
  is_length_gt2 [List. <elt Int | cons {Int,List}>] -> Bool 4
  sort [List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 2
  len [List. <elt Int | cons {Int,List}>] -> Int 3

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <elt Int | cons {Int,List}>
  x: Int
  tmp1: List. <elt Int | cons {Int,List}>
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  h: Int
  t: List. <elt Int | cons {Int,List}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  xs: List. <elt Int | cons {Int,List}>
align term #2: Int
align@2 len (sort (unlabel tmp3))
  xs: List. <elt Int | cons {Int,List}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param1
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <elt Int | cons {Int,List}>
  Param2
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  len([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  len([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  len([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@Bool
  Bool@0
  is_length_gt2([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  len([Param0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@List. <elt Int | cons {Int,List}>)
  is_length_gt2([Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@Bool
  is_length_gt2([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@Bool
  is_length_gt2([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
  insert([Int@0]@Int [Int@0]@List. <elt Int | cons {Int,List}>)
  sort([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
  insert([Int@0,Int@1]@Int [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  sort([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0]@Int)
  insert([Bool@0,Int@0]@Int [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
  sort([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  Param0
  elt([Param0]@Int)
  insert([Param0]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  sort([Param0]@List. <elt Int | cons {Int,List}>)









  [] len(Param0)
  [] len(Param0)
  [0] Param2 -> len(Param0)
  [] null
  [0] Param1 -> len(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
+ 1 tmp2
pass #2: 
tmp3

Inductive List;

insert = \y: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> if (< y x) then cons {y, elt x}
        else cons {x, elt y}
    | cons {h, t} -> if (< y h) then cons {y, xs}
        else cons {h, f t}
    end
);

sort = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> elt x
    | cons {h, t} -> insert h (f t)
    end
);

len = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt _ -> 0
    | cons {_, t} -> + 1 (f t)
    end
);

is_length_gt2 = \xs: List. 
    >= (len xs) 2;

target = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> 0
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            + 1 tmp2
    end
);

main = \xs: List. 
    if (is_length_gt2 xs) then let tmp3 = (target xs) in 
        tmp3
    else 0;
syn-comb: 0.468762
collect: 0.507039
label: 0.012278
extend-component: 1.3e-05
execute: 0.159422
syn-align: 0.692938
comb-size: 7
align-size: 3
extract-size: 2
1.18084
Success


ArithExpr :: ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {
 ArithExpr,ArithExpr}>
 int : Int ->
       ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
       ArithExpr',ArithExpr'}>
 plus : {ArithExpr,ArithExpr} ->
        ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
        ArithExpr',ArithExpr'}>
 minus : {ArithExpr,ArithExpr} ->
         ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
         ArithExpr',ArithExpr'}>
 NormExpr :: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
nint : Int -> NormExpr'. <nint Int | nplus {NormExpr',NormExpr'}>
nplus : {NormExpr,NormExpr} ->
        NormExpr'. <nint Int | nplus {NormExpr',NormExpr'}>
repr : NormExpr ->
       ArithExpr'. <int Int | plus {ArithExpr',ArithExpr'} | minus {
       ArithExpr',ArithExpr'}>
spec : ArithExpr -> Int
main : NormExpr -> Int


Inductive ArithExpr;

Inductive NormExpr;

repr = fix (
    \f: NormExpr -> Compress ArithExpr. \e: NormExpr. 
    match e with
      nint i -> 
        let tmp1 = (int i) in 
            align (label tmp1 ) 
    | nplus {e1, e2} -> 
        let tmp2 = (f e1) in 
            let tmp3 = (f e2) in 
                align (label (plus {unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

spec = fix (
    \f: ArithExpr -> Int. \e: ArithExpr. 
    match e with
      int i -> i
    | plus {e1, e2} -> + (f e1) (f e2)
    | minus {e1, e2} -> - (f e1) (f e2)
    end
);

main = \e: NormExpr. 
    let tmp4 = (repr e) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@0 create@0 tmp1
  i: Int
  tmp1: ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
align term #1: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@1 create@0 plus ({unlabel tmp2,unlabel tmp3})
  e1: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  e2: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  e: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  tmp2: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  tmp3: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align term #2: Int
align@2 spec (unlabel tmp4)
  e: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  tmp4: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
Components for compress:
  plus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  minus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nint [Int] -> NormExpr. <nint Int | nplus {NormExpr,NormExpr}> 1
  int [Int] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nplus [(NormExpr. <nint Int | nplus {NormExpr,NormExpr}> * NormExpr. <nint Int | nplus {NormExpr,NormExpr}>)] -> NormExpr. <nint Int | nplus {NormExpr,NormExpr}> 1

Components for align:
  plus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  spec [ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>] -> Int 3
  minus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nint [Int] -> NormExpr. <nint Int | nplus {NormExpr,NormExpr}> 1
  int [Int] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nplus [(NormExpr. <nint Int | nplus {NormExpr,NormExpr}> * NormExpr. <nint Int | nplus {NormExpr,NormExpr}>)] -> NormExpr. <nint Int | nplus {NormExpr,NormExpr}> 1

Components for comb:
  plus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  minus [(ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> * ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nint [Int] -> NormExpr. <nint Int | nplus {NormExpr,NormExpr}> 1
  int [Int] -> ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}> 0
  nplus [(NormExpr. <nint Int | nplus {NormExpr,NormExpr}> * NormExpr. <nint Int | nplus {NormExpr,NormExpr}>)] -> NormExpr. <nint Int | nplus {NormExpr,NormExpr}> 1

align term #0: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@0 create@0 tmp1
  i: Int
  tmp1: ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  e: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
align term #1: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align@1 create@0 plus ({unlabel tmp2,unlabel tmp3})
  e1: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  e2: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  e: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  tmp2: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  tmp3: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
align term #2: Int
align@2 spec (unlabel tmp4)
  e: NormExpr. <nint Int | nplus {NormExpr,NormExpr}>
  tmp4: compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param3
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>([Param0,Param1]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Int@0,Int@1]@Int [Param0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
  spec([Param0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>)
node: [Int@0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  int([Int@0]@Int)
node: [Int@0,Int@1]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  int([Int@0,Int@1]@Int)
node: [Param0]@ArithExpr. <int Int | plus {ArithExpr,ArithExpr} | minus {ArithExpr,ArithExpr}>
  Param0
  int([Param0]@Int)









  [] spec(Param0)
  [0] Param0
  [] spec(Param0)
  [0] Param3 -> spec(Param0)
  [1] Param4 -> spec(Param0)
  [] null
  [0] Param1 -> spec(Param0)
compress #0: Int
pass #0: 
i
pass #1: 
+ tmp2 tmp3
pass #2: 
tmp4

Inductive ArithExpr;

Inductive NormExpr;

repr = fix (
    \f: NormExpr -> Int. \e: NormExpr. 
    match e with
      nint i -> i
    | nplus {e1, e2} -> 
        let tmp2 = (f e1) in 
            let tmp3 = (f e2) in 
                + tmp2 tmp3
    end
);

spec = fix (
    \f: ArithExpr -> Int. \e: ArithExpr. 
    match e with
      int i -> i
    | plus {e1, e2} -> + (f e1) (f e2)
    | minus {e1, e2} -> - (f e1) (f e2)
    end
);

main = \e: NormExpr. 
    let tmp4 = (repr e) in 
        tmp4;
syn-comb: 0.470126
collect: 0.64651
label: 0.008998
extend-component: 0
execute: 0.25143
syn-align: 0.946048
comb-size: 7
align-size: 3
extract-size: 5
1.43217
Success

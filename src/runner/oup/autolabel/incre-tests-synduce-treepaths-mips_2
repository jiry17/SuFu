
BTree :: BTree. <empty Unit | node {Int,BTree,BTree}>
empty : Unit -> BTree'. <empty Unit | node {Int,BTree',BTree'}>
node : {Int,BTree,BTree} ->
       BTree'. <empty Unit | node {Int,BTree',BTree'}>
Zipper :: Zipper. <top Unit | left {Int,BTree,Zipper} | right {
Int,BTree,Zipper}>
top : Unit ->
      Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
      Int,BTree,Zipper'}>
left : {Int,BTree,Zipper} ->
       Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
       Int,BTree,Zipper'}>
right : {Int,BTree,Zipper} ->
        Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
        Int,BTree,Zipper'}>
max : Int -> Int -> Int
spec : BTree -> {Int, Int}
tree_repr : BTree ->
            BTree'. <empty Unit | node {Int,BTree',BTree'}>
repr : Zipper -> BTree'. <empty Unit | node {Int,BTree',BTree'}>
main : Zipper -> {Int, Int}


Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: ({Int, Int}) -> BTree -> {Int, Int}. \s: {Int, Int}. \t: BTree. 
    match t with
      empty _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ result.1 a, max result.2 (+ result.1 a)} r
    end
) {0, 0};

tree_repr = fix (
    \f: BTree -> Compress BTree. \t: BTree. 
    match t with
      empty _ -> 
        let tmp1 = (empty unit) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

repr = fix (
    \f: Zipper -> Compress BTree. \z: Zipper. 
    match z with
      top _ -> 
        let tmp4 = (empty unit) in 
            align (label tmp4 ) 
    | left {w, tree, zz} -> 
        let tmp5 = (tree_repr tree) in 
            let tmp6 = (f zz) in 
                align (label (node {w, unlabel tmp5 , unlabel tmp6 }) ) 
    | right {w, tree, zz} -> 
        let tmp7 = (f zz) in 
            let tmp8 = (tree_repr tree) in 
                align (label (node {w, unlabel tmp7 , unlabel tmp8 }) ) 
    end
);

main = \z: Zipper. 
    let tmp9 = (repr z) in 
        align (spec (unlabel tmp9 )) ;
align term #0: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@0 create@0 tmp1
  tmp1: BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
align term #1: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp3: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  a: Int
  l: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
align term #2: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align@2 create@1 tmp4
  tmp4: BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #3: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align@3 create@1 node ({w,unlabel tmp5,unlabel tmp6})
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tmp6: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp5: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #4: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align@4 create@1 node ({w,unlabel tmp7,unlabel tmp8})
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp8: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp7: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #5: {Int,Int}
align@5 spec (unlabel tmp9)
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp9: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
Components for compress:
  node [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  max [Int,Int] -> Int 2
  right [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

Components for align:
  spec [BTree. <empty Unit | node {Int,BTree,BTree}>] -> (Int*Int) 3
  node [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  max [Int,Int] -> Int 2
  right [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

Components for comb:
  node [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  max [Int,Int] -> Int 2
  right [(Int*BTree. <empty Unit | node {Int,BTree,BTree}>*Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

align term #0: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@0 create@0 tmp1
  tmp1: BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
  (0) {tmp1: empty unit,t: empty unit} @ {} -> compress empty unit
align term #1: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp3: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  a: Int
  l: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
  (1) {tmp2: compress empty unit,tmp3: compress empty unit,a: -3,l: empty unit,t: node (-3,empty unit,empty unit),r: empty unit} @ {} -> compress node (-3,empty unit,empty unit)
  (1) {tmp2: compress empty unit,tmp3: compress empty unit,a: 3,l: empty unit,t: node (3,empty unit,empty unit),r: empty unit} @ {} -> compress node (3,empty unit,empty unit)
  (1) {tmp2: compress empty unit,tmp3: compress node (3,empty unit,empty unit),a: -2,l: empty unit,t: node (-2,empty unit,node (3,empty unit,empty unit)),r: node (3,empty unit,empty unit)} @ {} -> compress node (-2,empty unit,node (3,empty unit,empty unit))
  (1) {tmp2: compress empty unit,tmp3: compress empty unit,a: -4,l: empty unit,t: node (-4,empty unit,empty unit),r: empty unit} @ {} -> compress node (-4,empty unit,empty unit)
  (1) {tmp2: compress empty unit,tmp3: compress node (-4,empty unit,empty unit),a: -3,l: empty unit,t: node (-3,empty unit,node (-4,empty unit,empty unit)),r: node (-4,empty unit,empty unit)} @ {} -> compress node (-3,empty unit,node (-4,empty unit,empty unit))
align term #2: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align@2 create@1 tmp4
  tmp4: BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  (2) {tmp4: empty unit,z: top unit} @ {} -> compress empty unit
align term #3: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align@3 create@1 node ({w,unlabel tmp5,unlabel tmp6})
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tmp6: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp5: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  (3) {zz: right (1,empty unit,right (0,empty unit,top unit)),tmp5: compress node (-3,empty unit,empty unit),z: left (0,node (-3,empty unit,empty unit),right (1,empty unit,right (0,empty unit,top unit))),tmp6: compress node (1,node (0,empty unit,empty unit),empty unit),tree: node (-3,empty unit,empty unit),w: 0} @ {} -> compress node (0,node (-3,empty unit,empty unit),node (1,node (0,empty unit,empty unit),empty unit))
  (3) {zz: right (-4,empty unit,top unit),tmp5: compress node (-2,empty unit,node (3,empty unit,empty unit)),z: left (5,node (-2,empty unit,node (3,empty unit,empty unit)),right (-4,empty unit,top unit)),tmp6: compress node (-4,empty unit,empty unit),tree: node (-2,empty unit,node (3,empty unit,empty unit)),w: 5} @ {} -> compress node (5,node (-2,empty unit,node (3,empty unit,empty unit)),node (-4,empty unit,empty unit))
  (3) {zz: top unit,tmp5: compress empty unit,z: left (4,empty unit,top unit),tmp6: compress empty unit,tree: empty unit,w: 4} @ {} -> compress node (4,empty unit,empty unit)
  (3) {zz: right (0,empty unit,top unit),tmp5: compress empty unit,z: left (-4,empty unit,right (0,empty unit,top unit)),tmp6: compress node (0,empty unit,empty unit),tree: empty unit,w: -4} @ {} -> compress node (-4,empty unit,node (0,empty unit,empty unit))
  (3) {zz: left (-4,empty unit,right (0,empty unit,top unit)),tmp5: compress node (-4,empty unit,empty unit),z: left (-3,node (-4,empty unit,empty unit),left (-4,empty unit,right (0,empty unit,top unit))),tmp6: compress node (-4,empty unit,node (0,empty unit,empty unit)),tree: node (-4,empty unit,empty unit),w: -3} @ {} -> compress node (-3,node (-4,empty unit,empty unit),node (-4,empty unit,node (0,empty unit,empty unit)))
align term #4: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
align@4 create@1 node ({w,unlabel tmp7,unlabel tmp8})
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp8: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp7: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
  (4) {tmp8: compress empty unit,z: right (0,empty unit,top unit),tree: empty unit,w: 0,tmp7: compress empty unit,zz: top unit} @ {} -> compress node (0,empty unit,empty unit)
  (4) {tmp8: compress empty unit,z: right (1,empty unit,right (0,empty unit,top unit)),tree: empty unit,w: 1,tmp7: compress node (0,empty unit,empty unit),zz: right (0,empty unit,top unit)} @ {} -> compress node (1,node (0,empty unit,empty unit),empty unit)
  (4) {tmp8: compress empty unit,z: right (2,empty unit,top unit),tree: empty unit,w: 2,tmp7: compress empty unit,zz: top unit} @ {} -> compress node (2,empty unit,empty unit)
  (4) {tmp8: compress empty unit,z: right (-4,empty unit,top unit),tree: empty unit,w: -4,tmp7: compress empty unit,zz: top unit} @ {} -> compress node (-4,empty unit,empty unit)
  (4) {tmp8: compress empty unit,z: right (-2,empty unit,top unit),tree: empty unit,w: -2,tmp7: compress empty unit,zz: top unit} @ {} -> compress node (-2,empty unit,empty unit)
  (4) {tmp8: compress node (-3,empty unit,node (-4,empty unit,empty unit)),z: right (-5,node (-3,empty unit,node (-4,empty unit,empty unit)),right (-2,empty unit,top unit)),tree: node (-3,empty unit,node (-4,empty unit,empty unit)),w: -5,tmp7: compress node (-2,empty unit,empty unit),zz: right (-2,empty unit,top unit)} @ {} -> compress node (-5,node (-2,empty unit,empty unit),node (-3,empty unit,node (-4,empty unit,empty unit)))
  (4) {tmp8: compress empty unit,z: right (2,empty unit,left (4,empty unit,top unit)),tree: empty unit,w: 2,tmp7: compress node (4,empty unit,empty unit),zz: left (4,empty unit,top unit)} @ {} -> compress node (2,node (4,empty unit,empty unit),empty unit)
align term #5: {Int,Int}
align@5 spec (unlabel tmp9)
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp9: compress[1] BTree. <empty Unit | node {Int,BTree,BTree}>
  (5) {z: left (0,node (-3,empty unit,empty unit),right (1,empty unit,right (0,empty unit,top unit))),tmp9: compress node (0,node (-3,empty unit,empty unit),node (1,node (0,empty unit,empty unit),empty unit))} @ {} -> (-2,0)
  (5) {z: right (2,empty unit,top unit),tmp9: compress node (2,empty unit,empty unit)} @ {} -> (2,2)
  (5) {z: left (5,node (-2,empty unit,node (3,empty unit,empty unit)),right (-4,empty unit,top unit)),tmp9: compress node (5,node (-2,empty unit,node (3,empty unit,empty unit)),node (-4,empty unit,empty unit))} @ {} -> (2,6)
  (5) {z: right (-5,node (-3,empty unit,node (-4,empty unit,empty unit)),right (-2,empty unit,top unit)),tmp9: compress node (-5,node (-2,empty unit,empty unit),node (-3,empty unit,node (-4,empty unit,empty unit)))} @ {} -> (-14,0)
  (5) {z: top unit,tmp9: compress empty unit} @ {} -> (0,0)
  (5) {z: right (2,empty unit,left (4,empty unit,top unit)),tmp9: compress node (2,node (4,empty unit,empty unit),empty unit)} @ {} -> (6,6)
  (5) {z: left (-3,node (-4,empty unit,empty unit),left (-4,empty unit,right (0,empty unit,top unit))),tmp9: compress node (-3,node (-4,empty unit,empty unit),node (-4,empty unit,node (0,empty unit,empty unit)))} @ {} -> (-11,0)




































  [0] spec(Param0).0
  [1] spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> spec(Param0).1
  [2] Param4 -> spec(Param0).0
  [3] Param4 -> spec(Param0).1
  [4] Param2
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0).0
  [1] spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param2
  [1] Param3 -> spec(Param0).0
  [2] Param3 -> spec(Param0).1
  [3] Param5 -> spec(Param0).0
  [4] Param5 -> spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> spec(Param0).1
  [2] Param3
  [3] Param5 -> spec(Param0).0
  [4] Param5 -> spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] null
  [1] null
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> spec(Param0).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: {Int,Int}
compress #1: {Int,Int}
pass #0: 
{0, 0}
pass #1: 
{+ (+ tmp3.1 tmp2.1) a, if (< (+ (+ tmp3.2 tmp2.1) a) tmp2.2) then tmp2.2
else + (+ tmp3.2 tmp2.1) a}
pass #2: 
{0, 0}
pass #3: 
{+ (+ w tmp6.1) tmp5.1, if (< (+ (+ w tmp6.2) tmp5.1) tmp5.2) then tmp5.2
else + (+ w tmp6.2) tmp5.1}
pass #4: 
{+ (+ tmp8.1 w) tmp7.1, if (< (+ (+ tmp8.2 w) tmp7.1) tmp7.2) then tmp7.2
else + (+ tmp8.2 w) tmp7.1}
pass #5: 
{tmp9.1, tmp9.2}

Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: ({Int, Int}) -> BTree -> {Int, Int}. \s: {Int, Int}. \t: BTree. 
    match t with
      empty _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ result.1 a, max result.2 (+ result.1 a)} r
    end
) {0, 0};

tree_repr = fix (
    \f: BTree -> {Int, Int}. \t: BTree. 
    match t with
      empty _ -> {0, 0}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {+ (+ tmp3.1 tmp2.1) a, if (< (+ (+ tmp3.2 tmp2.1) a) tmp2.2) then tmp2.2
                else + (+ tmp3.2 tmp2.1) a}
    end
);

repr = fix (
    \f: Zipper -> {Int, Int}. \z: Zipper. 
    match z with
      top _ -> {0, 0}
    | left {w, tree, zz} -> 
        let tmp5 = (tree_repr tree) in 
            let tmp6 = (f zz) in 
                {+ (+ w tmp6.1) tmp5.1, if (< (+ (+ w tmp6.2) tmp5.1) tmp5.2) then tmp5.2
                else + (+ w tmp6.2) tmp5.1}
    | right {w, tree, zz} -> 
        let tmp7 = (f zz) in 
            let tmp8 = (tree_repr tree) in 
                {+ (+ tmp8.1 w) tmp7.1, if (< (+ (+ tmp8.2 w) tmp7.1) tmp7.2) then tmp7.2
                else + (+ tmp8.2 w) tmp7.1}
    end
);

main = \z: Zipper. 
    let tmp9 = (repr z) in 
        {tmp9.1, tmp9.2};
syn-comb: 1.50455
collect: 11.5162
label: 0.017069
extend-component: 0.002741
execute: 5.03638
syn-align: 16.6565
18.1907
Success

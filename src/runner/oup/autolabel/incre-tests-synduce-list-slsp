
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 CnList :: CnList. <sglt Int | cat {CnList,Int,CnList}>
sglt : Int -> CnList'. <sglt Int | cat {CnList',Int,CnList'}>
cat : {CnList,Int,CnList} ->
      CnList'. <sglt Int | cat {CnList',Int,CnList'}>
max : Int -> Int -> Int
cat_list : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : CnList -> List'. <elt Int | cons {Int,List'}>
spec : List -> Int
main : CnList -> Int


Inductive List;

Inductive CnList;

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

cat_list = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      elt a -> cons {a, ys}
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CnList -> Compress List. \xs: CnList. 
    match xs with
      sglt a -> 
        let tmp1 = (elt a) in 
            align (label tmp1 ) 
    | cat {a, b, c} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f c) in 
                align (label (cat_list (unlabel tmp2 ) (unlabel tmp3 )) ) 
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Bool}. \xs: List. 
    match xs with
      elt a -> {max 0 a, >= a 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_cond = (and result.2 (>= hd 0)) in 
                {if (new_cond) then + hd result.1
                else result.1, new_cond}
    end
) xs).1;

main = \x: CnList. 
    let tmp4 = (repr x) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: CnList. <sglt Int | cat {CnList,Int,CnList}>
  tmp1: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cat_list (unlabel tmp2) (unlabel tmp3)
  xs: CnList. <sglt Int | cat {CnList,Int,CnList}>
  b: Int
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
  a: CnList. <sglt Int | cat {CnList,Int,CnList}>
  c: CnList. <sglt Int | cat {CnList,Int,CnList}>
align term #2: Int
align@2 spec (unlabel tmp4)
  tmp4: compress[0] List. <elt Int | cons {Int,List}>
  x: CnList. <sglt Int | cat {CnList,Int,CnList}>
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  sglt [Int] -> CnList. <sglt Int | cat {CnList,Int,CnList}> 1
  cat [(CnList. <sglt Int | cat {CnList,Int,CnList}> * Int * CnList. <sglt Int | cat {CnList,Int,CnList}>)] -> CnList. <sglt Int | cat {CnList,Int,CnList}> 1
  max [Int,Int] -> Int 2

Components for align:
  spec [List. <elt Int | cons {Int,List}>] -> Int 5
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  sglt [Int] -> CnList. <sglt Int | cat {CnList,Int,CnList}> 1
  cat_list [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 3
  cat [(CnList. <sglt Int | cat {CnList,Int,CnList}> * Int * CnList. <sglt Int | cat {CnList,Int,CnList}>)] -> CnList. <sglt Int | cat {CnList,Int,CnList}> 1
  max [Int,Int] -> Int 2

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  sglt [Int] -> CnList. <sglt Int | cat {CnList,Int,CnList}> 1
  cat [(CnList. <sglt Int | cat {CnList,Int,CnList}> * Int * CnList. <sglt Int | cat {CnList,Int,CnList}>)] -> CnList. <sglt Int | cat {CnList,Int,CnList}> 1
  max [Int,Int] -> Int 2

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: CnList. <sglt Int | cat {CnList,Int,CnList}>
  tmp1: List. <elt Int | cons {Int,List}>
  a: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cat_list (unlabel tmp2) (unlabel tmp3)
  xs: CnList. <sglt Int | cat {CnList,Int,CnList}>
  b: Int
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
  a: CnList. <sglt Int | cat {CnList,Int,CnList}>
  c: CnList. <sglt Int | cat {CnList,Int,CnList}>
align term #2: Int
align@2 spec (unlabel tmp4)
  tmp4: compress[0] List. <elt Int | cons {Int,List}>
  x: CnList. <sglt Int | cat {CnList,Int,CnList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] List. <elt Int | cons {Int,List}>
  Param2
  Param3
num = 2
start: start
node: start
  Compress[0] List. <elt Int | cons {Int,List}>([Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <elt Int | cons {Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
  max([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
  cat_list([Int@0]@List. <elt Int | cons {Int,List}> [Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
  cat_list([Int@0,Int@1]@List. <elt Int | cons {Int,List}> [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  Param0
  elt([Param0]@Int)
  cat_list([Param0]@List. <elt Int | cons {Int,List}> [Param0]@List. <elt Int | cons {Int,List}>)



























  [0] spec(Param0)
  [1] spec(cat_list(Param0,Param0))
  [2] fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),+(Int@0(),Int@1()),Param0)
  [3] fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),max(Int@0(),Int@1()),Param0)
  [0] Param2
  [0] spec(Param0)
  [1] spec(cat_list(Param0,Param0))
  [2] fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),+(Int@0(),Int@1()),Param0)
  [3] fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),max(Int@0(),Int@1()),Param0)
  [0] Param2 -> spec(Param0)
  [1] Param2 -> spec(cat_list(Param0,Param0))
  [2] Param2 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),+(Int@0(),Int@1()),Param0)
  [3] Param2 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),max(Int@0(),Int@1()),Param0)
  [4] Param3 -> spec(Param0)
  [5] Param3 -> spec(cat_list(Param0,Param0))
  [6] Param3 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),+(Int@0(),Int@1()),Param0)
  [7] Param3 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),max(Int@0(),Int@1()),Param0)
  [] null
  [0] Param0 -> spec(Param0)
  [1] Param0 -> spec(cat_list(Param0,Param0))
  [2] Param0 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),+(Int@0(),Int@1()),Param0)
  [3] Param0 -> fold[List. <elt Int | cons {Int,List}>->Int](Int@0(),max(Int@0(),Int@1()),Param0)
compress #0: {Int,Int,Int,Int}
pass #0: 
{max a 0, * 2 (max a 0), a, a}
pass #1: 
{if (or (and (== tmp3.4 0) (== tmp3.1 tmp3.3)) (< tmp3.1 tmp3.2)) then + tmp2.1 tmp3.1
else tmp3.1, if (or (or (and (< tmp2.1 tmp2.2) (< tmp3.1 tmp3.2)) (and (== tmp2.4 0) (== tmp2.1 tmp2.3))) (and (== tmp3.4 0) (== tmp3.1 tmp3.3))) then + tmp2.2 tmp3.2
else if (or (and (== tmp3.1 tmp3.2) (< 0 tmp3.4)) (< tmp3.3 tmp3.1)) then tmp3.1
else + tmp2.1 tmp3.1, + tmp2.3 tmp3.3, max tmp2.4 tmp3.4}
pass #2: 
tmp4.1

Inductive List;

Inductive CnList;

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

cat_list = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      elt a -> cons {a, ys}
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CnList -> {Int, Int, Int, Int}. \xs: CnList. 
    match xs with
      sglt a -> {max a 0, * 2 (max a 0), a, a}
    | cat {a, b, c} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f c) in 
                {if (or (and (== tmp3.4 0) (== tmp3.1 tmp3.3)) (< tmp3.1 tmp3.2)) then + tmp2.1 tmp3.1
                else tmp3.1, if (or (or (and (< tmp2.1 tmp2.2) (< tmp3.1 tmp3.2)) (and (== tmp2.4 0) (== tmp2.1 tmp2.3))) (and (== tmp3.4 0) (== tmp3.1 tmp3.3))) then + tmp2.2 tmp3.2
                else if (or (and (== tmp3.1 tmp3.2) (< 0 tmp3.4)) (< tmp3.3 tmp3.1)) then tmp3.1
                else + tmp2.1 tmp3.1, + tmp2.3 tmp3.3, max tmp2.4 tmp3.4}
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Bool}. \xs: List. 
    match xs with
      elt a -> {max 0 a, >= a 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_cond = (and result.2 (>= hd 0)) in 
                {if (new_cond) then + hd result.1
                else result.1, new_cond}
    end
) xs).1;

main = \x: CnList. 
    let tmp4 = (repr x) in 
        tmp4.1;
syn-comb: 3.12858
collect: 3.27487
label: 0.013756
extend-component: 0.21049
execute: 13.6644
syn-align: 17.7985
comb-size: 169
align-size: 33
extract-size: 5
20.9483
Success

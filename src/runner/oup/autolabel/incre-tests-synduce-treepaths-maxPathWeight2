
BTree :: BTree. <empty Unit | node {Int,BTree,BTree}>
 empty : Unit -> BTree'. <empty Unit | node {Int,BTree',BTree'}>
 node : {Int,BTree,BTree} ->
        BTree'. <empty Unit | node {Int,BTree',BTree'}>
 Zipper :: Zipper. <top Unit | left {Int,BTree,Zipper} | right {
Int,BTree,Zipper}>
top : Unit ->
      Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
      Int,BTree,Zipper'}>
left : {Int,BTree,Zipper} ->
       Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
       Int,BTree,Zipper'}>
right : {Int,BTree,Zipper} ->
        Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
        Int,BTree,Zipper'}>
max : Int -> Int -> Int
mpath : BTree -> Int
repr : Zipper -> BTree'. <empty Unit | node {Int,BTree',BTree'}>
tree_rec : BTree ->
           BTree'. <empty Unit | node {Int,BTree',BTree'}>
zip_rec : Zipper ->
          Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
          Int,BTree,Zipper'}>
main : Zipper -> Int


Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mpath = fix (
    \f: BTree -> Int. \t: BTree. 
    match t with
      empty _ -> 0
    | node {a, l, r} -> + a (max (f l) (f r))
    end
);

repr = fix (
    \f: Zipper -> BTree. \z: Zipper. 
    match z with
      top _ -> empty Unit
    | left {w, tree, zz} -> node {w, tree, f zz}
    | right {w, tree, zz} -> node {w, f zz, tree}
    end
);

tree_rec = fix (
    \f: BTree -> Compress BTree. \t: BTree. 
    match t with
      empty _ -> 
        let tmp1 = (empty Unit) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

zip_rec = fix (
    \f: Zipper -> Compress Zipper. \z: Zipper. 
    match z with
      top _ -> 
        let tmp4 = (top Unit) in 
            align (label tmp4 ) 
    | left {w, tree, zz} -> 
        let tmp5 = (tree_rec tree) in 
            let tmp6 = (f zz) in 
                align (label (left {w, unlabel tmp5 , unlabel tmp6 }) ) 
    | right {w, tree, zz} -> 
        let tmp7 = (tree_rec tree) in 
            let tmp8 = (f zz) in 
                align (label (right {w, unlabel tmp7 , unlabel tmp8 }) ) 
    end
);

main = \z: Zipper. 
    let tmp9 = (zip_rec z) in 
        align (mpath (repr (unlabel tmp9 ))) ;
align term #0: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@0 create@0 tmp1
  tmp1: BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
align term #1: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp3: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  a: Int
  l: BTree. <empty Unit | node {Int,BTree,BTree}>
align term #2: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align@2 create@1 tmp4
  tmp4: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #3: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align@3 create@1 left ({w,unlabel tmp5,unlabel tmp6})
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp6: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp5: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #4: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align@4 create@1 right ({w,unlabel tmp7,unlabel tmp8})
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp8: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp7: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #5: Int
align@5 mpath (repr (unlabel tmp9))
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp9: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
Components for compress:
  node [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  max [Int,Int] -> Int 2
  right [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

Components for align:
  mpath [BTree. <empty Unit | node {Int,BTree,BTree}>] -> Int 3
  repr [Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>] -> BTree. <empty Unit | node {Int,BTree,BTree}> 4
  node [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  max [Int,Int] -> Int 2
  right [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

Components for comb:
  node [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  max [Int,Int] -> Int 2
  right [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

align term #0: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@0 create@0 tmp1
  tmp1: BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
align term #1: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: BTree. <empty Unit | node {Int,BTree,BTree}>
  t: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp3: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  a: Int
  l: BTree. <empty Unit | node {Int,BTree,BTree}>
align term #2: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align@2 create@1 tmp4
  tmp4: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #3: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align@3 create@1 left ({w,unlabel tmp5,unlabel tmp6})
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp6: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp5: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #4: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align@4 create@1 right ({w,unlabel tmp7,unlabel tmp8})
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tmp8: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp7: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #5: Int
align@5 mpath (repr (unlabel tmp9))
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp9: compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  Param2
  Param3
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param4
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 2
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)
  Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  Param3
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  Param5
num = 4
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)
  Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  Param3
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  Param5
num = 5
start: start
node: start
  Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>([Param0,Param1]@Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[1] Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  mpath([Param0]@BTree. <empty Unit | node {Int,BTree,BTree}>)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@BTree. <empty Unit | node {Int,BTree,BTree}>
  Param0
num = 1
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  mpath([Param0]@BTree. <empty Unit | node {Int,BTree,BTree}>)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@BTree. <empty Unit | node {Int,BTree,BTree}>
  repr([Param0]@Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)
node: [Param0]@Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  Param0


















  [] mpath(Param0)
  [] mpath(Param0)
  [0] Param2 -> mpath(Param0)
  [1] Param3 -> mpath(Param0)
  [2] Param4
  [] mpath(repr(Param0))
  [] mpath(repr(Param0))
  [0] Param1
  [1] Param3 -> mpath(repr(Param0))
  [2] Param5 -> mpath(Param0)
  [] mpath(repr(Param0))
  [0] Param5 -> mpath(Param0)
  [1] Param1
  [2] Param3 -> mpath(repr(Param0))
  [] null
  [0] Param1 -> mpath(repr(Param0))
compress #0: Int
compress #1: Int
pass #0: 
0
pass #1: 
+ a (max tmp2 tmp3)
pass #2: 
0
pass #3: 
+ w (max tmp6 tmp5)
pass #4: 
+ w (max tmp7 tmp8)
pass #5: 
tmp9

Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mpath = fix (
    \f: BTree -> Int. \t: BTree. 
    match t with
      empty _ -> 0
    | node {a, l, r} -> + a (max (f l) (f r))
    end
);

repr = fix (
    \f: Zipper -> BTree. \z: Zipper. 
    match z with
      top _ -> empty Unit
    | left {w, tree, zz} -> node {w, tree, f zz}
    | right {w, tree, zz} -> node {w, f zz, tree}
    end
);

tree_rec = fix (
    \f: BTree -> Int. \t: BTree. 
    match t with
      empty _ -> 0
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + a (max tmp2 tmp3)
    end
);

zip_rec = fix (
    \f: Zipper -> Int. \z: Zipper. 
    match z with
      top _ -> 0
    | left {w, tree, zz} -> 
        let tmp5 = (tree_rec tree) in 
            let tmp6 = (f zz) in 
                + w (max tmp6 tmp5)
    | right {w, tree, zz} -> 
        let tmp7 = (tree_rec tree) in 
            let tmp8 = (f zz) in 
                + w (max tmp7 tmp8)
    end
);

main = \z: Zipper. 
    let tmp9 = (zip_rec z) in 
        tmp9;
syn-comb: 0.363827
collect: 16.7328
label: 0.014538
extend-component: 0.001619
execute: 1.49553
syn-align: 18.4722
comb-size: 30
align-size: 8
extract-size: 13
18.87
Success

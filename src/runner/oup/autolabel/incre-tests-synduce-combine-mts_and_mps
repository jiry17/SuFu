
List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 max : Int -> Int -> Int
mts : Int -> List -> Int
mps : List -> Int
spec : List -> {Int, Int}
repr : List -> List'. <nil Unit | cons {Int,List'}>
main : List -> {Int, Int}


Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mts = fix (
    \f: Int -> List -> Int. \pre: Int. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (max 0 (+ h pre)) t
    end
);

mps = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> max (+ h (f t)) 0
    end
);

spec = \xs: List. 
    {mts 0 xs, mps xs};

repr = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            align (label (cons {h, unlabel tmp2 }) ) 
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        align (spec (unlabel tmp3 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
align term #2: {Int,Int}
align@2 spec (unlabel tmp3)
  xs: List. <nil Unit | cons {Int,List}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 1

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  spec [List. <nil Unit | cons {Int,List}>] -> (Int * Int) 4
  mps [List. <nil Unit | cons {Int,List}>] -> Int 3
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  mts [Int,List. <nil Unit | cons {Int,List}>] -> Int 2
  max [Int,Int] -> Int 1

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 1

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
align term #2: {Int,Int}
align@2 spec (unlabel tmp3)
  xs: List. <nil Unit | cons {Int,List}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param2
node: [Param0,Param1,Param2,Param3]@Int
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  0
  access0([Int@0,Int@1]@(Int * Int))
  access1([Int@0,Int@1]@(Int * Int))
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  access0([Param0]@(Int * Int))
  access1([Param0]@(Int * Int))
  fold[List. <nil Unit | cons {Int,List}>->Int]([]@Int [Int@0,Int@1]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  mps([Param0]@List. <nil Unit | cons {Int,List}>)
  mts([Param0]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  0
  access0([]@(Int * Int))
  access1([]@(Int * Int))
  max([]@Int []@Int)
node: [Param0]@(Int * Int)
  prod([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
node: []@(Int * Int)
  prod([]@Int []@Int)
node: [Int@0,Int@1]@(Int * Int)
  prod([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
























  [0] spec(Param0).0
  [1] mps(Param0)
  [2] fold[List. <nil Unit | cons {Int,List}>->Int](0,+(Int@0(),Int@1()),Param0)
  [0] spec(Param0).0
  [1] mps(Param0)
  [2] fold[List. <nil Unit | cons {Int,List}>->Int](0,+(Int@0(),Int@1()),Param0)
  [0] Param3
  [1] Param2 -> spec(Param0).0
  [2] Param2 -> mps(Param0)
  [3] Param2 -> fold[List. <nil Unit | cons {Int,List}>->Int](0,+(Int@0(),Int@1()),Param0)
  [0] null
  [1] null
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> mps(Param0)
  [2] Param1 -> fold[List. <nil Unit | cons {Int,List}>->Int](0,+(Int@0(),Int@1()),Param0)
compress #0: {Int,Int,Int}
pass #0: 
{0, 0, 0}
pass #1: 
{max tmp2.1 (+ h tmp2.3), + tmp2.2 (max h (- 0 tmp2.2)), + h tmp2.3}
pass #2: 
{tmp3.1, tmp3.2}

Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mts = fix (
    \f: Int -> List -> Int. \pre: Int. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (max 0 (+ h pre)) t
    end
);

mps = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> max (+ h (f t)) 0
    end
);

spec = \xs: List. 
    {mts 0 xs, mps xs};

repr = fix (
    \f: List -> {Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0, 0}
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            {max tmp2.1 (+ h tmp2.3), + tmp2.2 (max h (- 0 tmp2.2)), + h tmp2.3}
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        {tmp3.1, tmp3.2};
syn-comb: 0.66923
collect: 0.712939
label: 0.010654
extend-component: 0.006555
execute: 3.42225
syn-align: 4.07167
comb-size: 42
align-size: 19
extract-size: 4
4.75792
Success

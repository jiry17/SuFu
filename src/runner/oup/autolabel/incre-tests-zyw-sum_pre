
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
sum : List -> Int
spec : List -> Int
repr : List -> List'. <nil Unit | cons {Int,List'}>
main : List -> Int


Inductive List;

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

spec = \xs: List. 
    sum xs;

repr = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            align (label (cons {h, unlabel tmp2 }) ) 
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        align (spec (unlabel tmp3 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  h: Int
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  t: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp3)
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  spec [List. <nil Unit | cons {Int,List}>] -> Int 2
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  sum [List. <nil Unit | cons {Int,List}>] -> Int 1

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0


List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 al_fold : (Int->Int->Int) -> Int -> List -> Int
al_error : Int
al_inf : Int
al_plus : Int -> Int -> Int
al_minus : Int -> Int -> Int
al_times : Int -> Int -> Int
al_min : Int -> Int -> Int
al_max : Int -> Int -> Int
al_maximum : List -> Int
al_minimum : List -> Int
al_sum : List -> Int
al_length : List -> Int
al_head : List -> Int
al_inc : Int -> Int
al_dec : Int -> Int
al_neg : Int -> Int
al_last : List -> Int
al_access : Int -> List -> Int
al_count : (Int->Bool) -> List -> Int
al_take : Int -> List -> List
al_drop : Int -> List -> List
al_rev : List -> List
al_map : (Int->Int) -> List -> List
al_filter : (Int->Bool) -> List -> List
al_zip : (Int->Int->Int) ->
         List -> List -> List'. <cons {Int,List'} | nil Unit>
al_concat : List -> List -> List
al_sort : List -> List
al_scanl : (Int->Int->Int) -> List -> List
al_scanr : (Int->Int->Int) -> List -> List
al_isneg : Int -> Bool
al_ispos : Int -> Bool
al_iseven : Int -> Bool
al_isodd : Int -> Bool
one : Int
none : Int
al_error : Int -> Bool


List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 al_fold : (Int->Int->Int) -> Int -> List -> Int
al_error : Int
al_inf : Int
al_plus : Int -> Int -> Int
al_minus : Int -> Int -> Int
al_times : Int -> Int -> Int
al_min : Int -> Int -> Int
al_max : Int -> Int -> Int
al_maximum : List -> Int
al_minimum : List -> Int
al_sum : List -> Int
al_length : List -> Int
al_head : List -> Int
al_inc : Int -> Int
al_dec : Int -> Int
al_neg : Int -> Int
al_last : List -> Int
al_access : Int -> List -> Int
al_count : (Int->Bool) -> List -> Int
al_take : Int -> List -> List
al_drop : Int -> List -> List
al_rev : List -> List
al_map : (Int->Int) -> List -> List
al_filter : (Int->Bool) -> List -> List
al_zip : (Int->Int->Int) ->
         List -> List -> List'. <cons {Int,List'} | nil Unit>
al_concat : List -> List -> List
al_sort : List -> List
al_scanl : (Int->Int->Int) -> List -> List
al_scanr : (Int->Int->Int) -> List -> List
al_isneg : Int -> Bool
al_ispos : Int -> Bool
al_iseven : Int -> Bool
al_isodd : Int -> Bool
one : Int
none : Int
al_error : Int -> Bool

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
  (0) {xs: Nil Unit,tmp1: Nil Unit} @ {} -> compress[0] Nil Unit
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  h: Int
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  t: List. <nil Unit | cons {Int,List}>
  (1) {h: 3,tmp2: compress[0] Nil Unit,xs: Cons (3) (Nil Unit),t: Nil Unit} @ {} -> compress[0] Cons (3) (Nil Unit)
  (1) {h: 1,tmp2: compress[0] Cons (3) (Nil Unit),xs: Cons (1) (Cons (3) (Nil Unit)),t: Cons (3) (Nil Unit)} @ {} -> compress[0] Cons (1) (Cons (3) (Nil Unit))
  (1) {h: 3,tmp2: compress[0] Cons (1) (Cons (3) (Nil Unit)),xs: Cons (3) (Cons (1) (Cons (3) (Nil Unit))),t: Cons (1) (Cons (3) (Nil Unit))} @ {} -> compress[0] Cons (3) (Cons (1) (Cons (3) (Nil Unit)))
  (1) {h: -1,tmp2: compress[0] Cons (3) (Cons (1) (Cons (3) (Nil Unit))),xs: Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit)))),t: Cons (3) (Cons (1) (Cons (3) (Nil Unit)))} @ {} -> compress[0] Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit))))
  (1) {h: -3,tmp2: compress[0] Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit)))),xs: Cons (-3) (Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit))))),t: Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit))))} @ {} -> compress[0] Cons (-3) (Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit)))))
  (1) {h: 0,tmp2: compress[0] Nil Unit,xs: Cons (0) (Nil Unit),t: Nil Unit} @ {} -> compress[0] Cons (0) (Nil Unit)
  (1) {h: -1,tmp2: compress[0] Cons (0) (Nil Unit),xs: Cons (-1) (Cons (0) (Nil Unit)),t: Cons (0) (Nil Unit)} @ {} -> compress[0] Cons (-1) (Cons (0) (Nil Unit))
  (1) {h: -2,tmp2: compress[0] Cons (-1) (Cons (0) (Nil Unit)),xs: Cons (-2) (Cons (-1) (Cons (0) (Nil Unit))),t: Cons (-1) (Cons (0) (Nil Unit))} @ {} -> compress[0] Cons (-2) (Cons (-1) (Cons (0) (Nil Unit)))
  (1) {h: 4,tmp2: compress[0] Cons (-2) (Cons (-1) (Cons (0) (Nil Unit))),xs: Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit)))),t: Cons (-2) (Cons (-1) (Cons (0) (Nil Unit)))} @ {} -> compress[0] Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit))))
  (1) {h: 5,tmp2: compress[0] Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit)))),xs: Cons (5) (Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit))))),t: Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit))))} @ {} -> compress[0] Cons (5) (Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit)))))
align term #2: Int
align@2 spec (unlabel tmp3)
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  (2) {tmp3: compress[0] Cons (-3) (Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit))))),xs: Cons (-3) (Cons (-1) (Cons (3) (Cons (1) (Cons (3) (Nil Unit)))))} @ {} -> 3
  (2) {tmp3: compress[0] Cons (5) (Cons (-1) (Cons (2) (Cons (5) (Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit)))))))),xs: Cons (5) (Cons (-1) (Cons (2) (Cons (5) (Cons (4) (Cons (-2) (Cons (-1) (Cons (0) (Nil Unit))))))))} @ {} -> 12
  (2) {tmp3: compress[0] Cons (-4) (Cons (-1) (Cons (4) (Cons (3) (Cons (-3) (Cons (3) (Nil Unit)))))),xs: Cons (-4) (Cons (-1) (Cons (4) (Cons (3) (Cons (-3) (Cons (3) (Nil Unit))))))} @ {} -> 2
  (2) {tmp3: compress[0] Cons (-2) (Cons (-1) (Cons (5) (Cons (-4) (Cons (-2) (Nil Unit))))),xs: Cons (-2) (Cons (-1) (Cons (5) (Cons (-4) (Cons (-2) (Nil Unit)))))} @ {} -> -4
  (2) {tmp3: compress[0] Nil Unit,xs: Nil Unit} @ {} -> 0
  (2) {tmp3: compress[0] Cons (2) (Cons (-5) (Cons (-1) (Cons (-4) (Nil Unit)))),xs: Cons (2) (Cons (-5) (Cons (-1) (Cons (-4) (Nil Unit))))} @ {} -> -8
  (2) {tmp3: compress[0] Cons (-3) (Cons (1) (Cons (-3) (Cons (-3) (Cons (-4) (Nil Unit))))),xs: Cons (-3) (Cons (1) (Cons (-3) (Cons (-3) (Cons (-4) (Nil Unit)))))} @ {} -> -12
  (2) {tmp3: compress[0] Cons (3) (Cons (0) (Cons (-3) (Cons (1) (Nil Unit)))),xs: Cons (3) (Cons (0) (Cons (-3) (Cons (1) (Nil Unit))))} @ {} -> 1
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  al_head([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1]@List. <nil Unit | cons {Int,List}>
  Param0
  Param1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,List}>
  Param2
  Param3
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  al_head([Param0,Param1,Param2,Param3]@List. <nil Unit | cons {Int,List}>)
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  al_head([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  al_plus([Param0]@Int [Param0]@Int)
  al_minus([Param0]@Int [Param0]@Int)
  al_times([Param0]@Int [Param0]@Int)
  al_min([Param0]@Int [Param0]@Int)
  al_max([Param0]@Int [Param0]@Int)
  al_maximum([Param0]@List. <nil Unit | cons {Int,List}>)
  al_minimum([Param0]@List. <nil Unit | cons {Int,List}>)
  al_sum([Param0]@List. <nil Unit | cons {Int,List}>)
  al_length([Param0]@List. <nil Unit | cons {Int,List}>)
  al_head([Param0]@List. <nil Unit | cons {Int,List}>)
  al_inc([Param0]@Int)
  al_dec([Param0]@Int)
  al_neg([Param0]@Int)
  al_last([Param0]@List. <nil Unit | cons {Int,List}>)
  al_access([Param0]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  al_count([Param0]@[Int]->Bool [Param0]@List. <nil Unit | cons {Int,List}>)
  one
  none
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
  sum([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@Bool
  al_isneg([Param0]@Int)
  al_ispos([Param0]@Int)
  al_iseven([Param0]@Int)
  al_isodd([Param0]@Int)
node: [Param0]@[Int]->[Int]->Int
  al_plus
  al_minus
  al_times
  al_min
  al_max
node: [Param0]@[Int]->Int
  al_inc
  al_dec
  al_neg
node: [Param0]@[Int]->Bool
  al_isneg
  al_ispos
  al_iseven
  al_isodd
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  al_take([Param0]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  al_drop([Param0]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  al_rev([Param0]@List. <nil Unit | cons {Int,List}>)
  al_map([Param0]@[Int]->Int [Param0]@List. <nil Unit | cons {Int,List}>)
  al_filter([Param0]@[Int]->Bool [Param0]@List. <nil Unit | cons {Int,List}>)
  al_zip([Param0]@[Int]->[Int]->Int [Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)
  al_sort([Param0]@List. <nil Unit | cons {Int,List}>)
  al_scanl([Param0]@[Int]->[Int]->Int [Param0]@List. <nil Unit | cons {Int,List}>)
  al_scanr([Param0]@[Int]->[Int]->Int [Param0]@List. <nil Unit | cons {Int,List}>)









  [] al_sum(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [] al_sum(Param0)
  [0] Param0
  [1] Param1 -> al_sum(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [] null
  [0] Param0 -> al_sum(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: Int
pass #0: 
0
pass #1: 
+ h tmp2
pass #2: 
tmp3

Inductive List;

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

spec = \xs: List. 
    sum xs;

repr = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            + h tmp2
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        tmp3;
syn-comb: 0.991708
collect: 2.55466
label: 0.009754
extend-component: 0.006641
execute: 1.60811
syn-align: 4.34789
comb-size: 7
align-size: 2
extract-size: 4
5.38222
Success


Tree :: Tree. <nil Unit | node {Int,Tree,Tree}>
nil : Unit -> Tree'. <nil Unit | node {Int,Tree',Tree'}>
node : {Int,Tree,Tree} ->
       Tree'. <nil Unit | node {Int,Tree',Tree'}>
x : Int
spec : Tree -> Int
repr : Tree -> Tree'. <nil Unit | node {Int,Tree',Tree'}>
main : Tree -> Int


Inductive Tree;

@Input x = Int;

spec = \t: Tree. 
    (fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ result.1 (* result.2 a), * result.2 x} r
    end
) {0, 1} t).1;

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp1: Tree. <nil Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  tmp2: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  r: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <nil Unit | node {Int,Tree,Tree}>
align term #2: Int
align@2 spec (unlabel tmp4)
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
Components for compress:
  nil [Bot] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <nil Unit | node {Int,Tree,Tree}> * Tree. <nil Unit | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0

Components for align:
  spec [Tree. <nil Unit | node {Int,Tree,Tree}>] -> Int 2
  nil [Bot] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <nil Unit | node {Int,Tree,Tree}> * Tree. <nil Unit | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0

Components for comb:
  nil [Bot] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <nil Unit | node {Int,Tree,Tree}> * Tree. <nil Unit | node {Int,Tree,Tree}>)] -> Tree. <nil Unit | node {Int,Tree,Tree}> 0

align term #0: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp1: Tree. <nil Unit | node {Int,Tree,Tree}>
  (0) {t: Nil Unit,tmp1: Nil Unit} @ {x: -3} -> compress[0] Nil Unit
  (0) {t: Nil Unit,tmp1: Nil Unit} @ {x: -2} -> compress[0] Nil Unit
  (0) {t: Nil Unit,tmp1: Nil Unit} @ {x: 3} -> compress[0] Nil Unit
  (0) {t: Nil Unit,tmp1: Nil Unit} @ {x: -1} -> compress[0] Nil Unit
  (0) {t: Nil Unit,tmp1: Nil Unit} @ {x: 0} -> compress[0] Nil Unit
  (0) {t: Nil Unit,tmp1: Nil Unit} @ {x: 1} -> compress[0] Nil Unit
align term #1: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  tmp2: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  r: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <nil Unit | node {Int,Tree,Tree}>
  (1) {t: Node (1) (Nil Unit) (Nil Unit),tmp2: compress[0] Nil Unit,l: Nil Unit,a: 1,tmp3: compress[0] Nil Unit,r: Nil Unit} @ {x: -2} -> compress[0] Node (1) (Nil Unit) (Nil Unit)
  (1) {t: Node (1) (Nil Unit) (Nil Unit),tmp2: compress[0] Nil Unit,l: Nil Unit,a: 1,tmp3: compress[0] Nil Unit,r: Nil Unit} @ {x: -1} -> compress[0] Node (1) (Nil Unit) (Nil Unit)
  (1) {t: Node (0) (Nil Unit) (Nil Unit),tmp2: compress[0] Nil Unit,l: Nil Unit,a: 0,tmp3: compress[0] Nil Unit,r: Nil Unit} @ {x: -3} -> compress[0] Node (0) (Nil Unit) (Nil Unit)
  (1) {t: Node (-1) (Nil Unit) (Nil Unit),tmp2: compress[0] Nil Unit,l: Nil Unit,a: -1,tmp3: compress[0] Nil Unit,r: Nil Unit} @ {x: -2} -> compress[0] Node (-1) (Nil Unit) (Nil Unit)
  (1) {t: Node (1) (Nil Unit) (Node (-1) (Nil Unit) (Nil Unit)),tmp2: compress[0] Nil Unit,l: Nil Unit,a: 1,tmp3: compress[0] Node (-1) (Nil Unit) (Nil Unit),r: Node (-1) (Nil Unit) (Nil Unit)} @ {x: -2} -> compress[0] Node (1) (Nil Unit) (Node (-1) (Nil Unit) (Nil Unit))
  (1) {t: Node (-3) (Nil Unit) (Nil Unit),tmp2: compress[0] Nil Unit,l: Nil Unit,a: -3,tmp3: compress[0] Nil Unit,r: Nil Unit} @ {x: 0} -> compress[0] Node (-3) (Nil Unit) (Nil Unit)
  (1) {t: Node (-2) (Nil Unit) (Node (-3) (Nil Unit) (Nil Unit)),tmp2: compress[0] Nil Unit,l: Nil Unit,a: -2,tmp3: compress[0] Node (-3) (Nil Unit) (Nil Unit),r: Node (-3) (Nil Unit) (Nil Unit)} @ {x: 0} -> compress[0] Node (-2) (Nil Unit) (Node (-3) (Nil Unit) (Nil Unit))
align term #2: Int
align@2 spec (unlabel tmp4)
  t: Tree. <nil Unit | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  (2) {t: Nil Unit,tmp4: compress[0] Nil Unit} @ {x: -3} -> 0
  (2) {t: Node (1) (Nil Unit) (Nil Unit),tmp4: compress[0] Node (1) (Nil Unit) (Nil Unit)} @ {x: -2} -> 1
  (2) {t: Nil Unit,tmp4: compress[0] Nil Unit} @ {x: 3} -> 0
  (2) {t: Node (1) (Nil Unit) (Nil Unit),tmp4: compress[0] Node (1) (Nil Unit) (Nil Unit)} @ {x: -1} -> 1
  (2) {t: Node (0) (Nil Unit) (Nil Unit),tmp4: compress[0] Node (0) (Nil Unit) (Nil Unit)} @ {x: -3} -> 0
  (2) {t: Node (1) (Nil Unit) (Node (-1) (Nil Unit) (Nil Unit)),tmp4: compress[0] Node (1) (Nil Unit) (Node (-1) (Nil Unit) (Nil Unit))} @ {x: -2} -> 3
  (2) {t: Nil Unit,tmp4: compress[0] Nil Unit} @ {x: 0} -> 0
  (2) {t: Node (-2) (Nil Unit) (Node (-3) (Nil Unit) (Nil Unit)),tmp4: compress[0] Node (-2) (Nil Unit) (Node (-3) (Nil Unit) (Nil Unit))} @ {x: 0} -> -2
  (2) {t: Nil Unit,tmp4: compress[0] Nil Unit} @ {x: 1} -> 0
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
num = 1
start: start
node: start
  Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int
  Param4
  Param6
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  0
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  Param0
  Param3
num = 2
start: start
node: start
  Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] Tree. <nil Unit | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  fold[Tree. <nil Unit | node {Int,Tree,Tree}>->Int]([Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int [Param0,Param1]@Tree. <nil Unit | node {Int,Tree,Tree}>)
  spec([Param0,Param1]@Tree. <nil Unit | node {Int,Tree,Tree}>)
node: [Param1]@Int
  Param1
  +([Param1]@Int [Param1]@Int)
  -([Param1]@Int [Param1]@Int)
  0
node: [Int@0,Int@1,Int@2,Param1]@Int
  Param1
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  -([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  0
node: [Param0,Param1]@Tree. <nil Unit | node {Int,Tree,Tree}>
  Param0










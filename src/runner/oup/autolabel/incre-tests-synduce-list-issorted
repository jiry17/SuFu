
SList :: SList. <elt Int | cons {Int,SList}>
 elt : Int -> SList'. <elt Int | cons {Int,SList'}>
 cons : {Int,SList} -> SList'. <elt Int | cons {Int,SList'}>
 CList :: CList. <single Int | concat {CList,CList}>
single : Int -> CList'. <single Int | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <single Int | concat {CList',CList'}>
cat_list : SList -> SList -> SList'. <elt Int | cons {Int,SList'}>
repr : CList -> SList'. <elt Int | cons {Int,SList'}>
spec : SList -> Bool
main : CList -> Bool


Inductive SList;

Inductive CList;

cat_list = fix (
    \f: SList -> SList -> SList. \xs: SList. \ys: SList. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> Compress SList. \xs: CList. 
    match xs with
      single a -> 
        let tmp1 = (elt a) in 
            align (label tmp1 ) 
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                align (label (cat_list (unlabel tmp2 ) (unlabel tmp3 )) ) 
    end
);

spec = \xs: SList. 
    (fix (
    \f: SList -> {Int, Int, Bool}. \xs: SList. 
    match xs with
      elt a -> {a, a, true}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {hd, result.2, and result.3 (< hd result.1)}
    end
) xs).3;

main = \xs: CList. 
    let tmp4 = (repr xs) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] SList. <elt Int | cons {Int,SList}>
align@0 create@0 tmp1
  a: Int
  xs: CList. <single Int | concat {CList,CList}>
  tmp1: SList. <elt Int | cons {Int,SList}>
align term #1: compress[0] SList. <elt Int | cons {Int,SList}>
align@1 create@0 cat_list (unlabel tmp2) (unlabel tmp3)
  a: CList. <single Int | concat {CList,CList}>
  tmp3: compress[0] SList. <elt Int | cons {Int,SList}>
  b: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] SList. <elt Int | cons {Int,SList}>
  xs: CList. <single Int | concat {CList,CList}>
align term #2: Bool
align@2 spec (unlabel tmp4)
  xs: CList. <single Int | concat {CList,CList}>
  tmp4: compress[0] SList. <elt Int | cons {Int,SList}>
Components for compress:
  cons [(Int * SList. <elt Int | cons {Int,SList}>)] -> SList. <elt Int | cons {Int,SList}> 0
  elt [Int] -> SList. <elt Int | cons {Int,SList}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

Components for align:
  spec [SList. <elt Int | cons {Int,SList}>] -> Bool 4
  cons [(Int * SList. <elt Int | cons {Int,SList}>)] -> SList. <elt Int | cons {Int,SList}> 0
  elt [Int] -> SList. <elt Int | cons {Int,SList}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1
  cat_list [SList. <elt Int | cons {Int,SList}>,SList. <elt Int | cons {Int,SList}>] -> SList. <elt Int | cons {Int,SList}> 2

Components for comb:
  cons [(Int * SList. <elt Int | cons {Int,SList}>)] -> SList. <elt Int | cons {Int,SList}> 0
  elt [Int] -> SList. <elt Int | cons {Int,SList}> 0
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1

align term #0: compress[0] SList. <elt Int | cons {Int,SList}>
align@0 create@0 tmp1
  a: Int
  xs: CList. <single Int | concat {CList,CList}>
  tmp1: SList. <elt Int | cons {Int,SList}>
align term #1: compress[0] SList. <elt Int | cons {Int,SList}>
align@1 create@0 cat_list (unlabel tmp2) (unlabel tmp3)
  a: CList. <single Int | concat {CList,CList}>
  tmp3: compress[0] SList. <elt Int | cons {Int,SList}>
  b: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] SList. <elt Int | cons {Int,SList}>
  xs: CList. <single Int | concat {CList,CList}>
align term #2: Bool
align@2 spec (unlabel tmp4)
  xs: CList. <single Int | concat {CList,CList}>
  tmp4: compress[0] SList. <elt Int | cons {Int,SList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] SList. <elt Int | cons {Int,SList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] SList. <elt Int | cons {Int,SList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] SList. <elt Int | cons {Int,SList}>
  Param1
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] SList. <elt Int | cons {Int,SList}>([Param0,Param1]@Compress[0] SList. <elt Int | cons {Int,SList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] SList. <elt Int | cons {Int,SList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
node: [Bool@0,Int@0]@Bool
  Bool@0
  spec([Bool@0,Int@0]@SList. <elt Int | cons {Int,SList}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[SList. <elt Int | cons {Int,SList}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@SList. <elt Int | cons {Int,SList}>)
node: [Param0]@Bool
  fold[SList. <elt Int | cons {Int,SList}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@SList. <elt Int | cons {Int,SList}>)
  spec([Param0]@SList. <elt Int | cons {Int,SList}>)
node: [Int@0]@Bool
  spec([Int@0]@SList. <elt Int | cons {Int,SList}>)
node: [Int@0,Int@1]@Bool
  spec([Int@0,Int@1]@SList. <elt Int | cons {Int,SList}>)
node: [Int@0]@SList. <elt Int | cons {Int,SList}>
  elt([Int@0]@Int)
  cat_list([Int@0]@SList. <elt Int | cons {Int,SList}> [Int@0]@SList. <elt Int | cons {Int,SList}>)
node: [Int@0,Int@1]@SList. <elt Int | cons {Int,SList}>
  elt([Int@0,Int@1]@Int)
  cat_list([Int@0,Int@1]@SList. <elt Int | cons {Int,SList}> [Int@0,Int@1]@SList. <elt Int | cons {Int,SList}>)
node: [Bool@0,Int@0]@SList. <elt Int | cons {Int,SList}>
  elt([Bool@0,Int@0]@Int)
  cat_list([Bool@0,Int@0]@SList. <elt Int | cons {Int,SList}> [Bool@0,Int@0]@SList. <elt Int | cons {Int,SList}>)
node: [Param0]@SList. <elt Int | cons {Int,SList}>
  Param0
  elt([Param0]@Int)
  cat_list([Param0]@SList. <elt Int | cons {Int,SList}> [Param0]@SList. <elt Int | cons {Int,SList}>)





















  [0] spec(Param0)
  [1] fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@0(),Param0)
  [2] fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@1(),Param0)
  [0] Param0
  [0] spec(Param0)
  [1] fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@0(),Param0)
  [2] fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@1(),Param0)
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@0(),Param0)
  [2] Param1 -> fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@1(),Param0)
  [3] Param3 -> spec(Param0)
  [4] Param3 -> fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@0(),Param0)
  [5] Param3 -> fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@1(),Param0)
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@0(),Param0)
  [2] Param1 -> fold[SList. <elt Int | cons {Int,SList}>->Int](Int@0(),Int@1(),Param0)
compress #0: {Bool,Int,Int}
pass #0: 
{true, a, a}
pass #1: 
{and (and tmp3.1 (< tmp2.3 tmp3.2)) tmp2.1, tmp2.2, tmp3.3}
pass #2: 
tmp4.1

Inductive SList;

Inductive CList;

cat_list = fix (
    \f: SList -> SList -> SList. \xs: SList. \ys: SList. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> {Bool, Int, Int}. \xs: CList. 
    match xs with
      single a -> {true, a, a}
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                {and (and tmp3.1 (< tmp2.3 tmp3.2)) tmp2.1, tmp2.2, tmp3.3}
    end
);

spec = \xs: SList. 
    (fix (
    \f: SList -> {Int, Int, Bool}. \xs: SList. 
    match xs with
      elt a -> {a, a, true}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {hd, result.2, and result.3 (< hd result.1)}
    end
) xs).3;

main = \xs: CList. 
    let tmp4 = (repr xs) in 
        tmp4.1;
syn-comb: 1.28085
collect: 4.20401
label: 0.012993
extend-component: 0.014095
execute: 2.17742
syn-align: 6.57782
comb-size: 28
align-size: 18
extract-size: 5
7.87868
Success


List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 spec : List -> Int
snoc : List -> Int -> List'. <nil Unit | cons {Int,List'}>
repr : List -> List
main : List -> Int


Inductive List;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

snoc = fix (
    \f: List -> Int -> List. \xs: List. \w: Int. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t w}
    end
);

repr = fix (
    \f: Compress List -> List -> Compress List. \pre: Compress List. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (align (label (snoc (unlabel pre ) h) ) ) t
    end
) (let tmp1 = (nil Unit) in 
        align (label tmp1 ) );

main = \xs: List. 
    let tmp2 = (repr xs) in 
        align (spec (unlabel tmp2 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 snoc (unlabel pre) (h)
  pre: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp1
  tmp1: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp2)
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  spec [List. <nil Unit | cons {Int,List}>] -> Int 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  snoc [List. <nil Unit | cons {Int,List}>,Int] -> List. <nil Unit | cons {Int,List}> 2

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 snoc (unlabel pre) (h)
  pre: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp1
  tmp1: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp2)
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
num = 0
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param1
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 1
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0
  snoc([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@Int)









  [] spec(Param0)
  [0] Param0 -> spec(Param0)
  [1] Param1
  [] spec(Param0)
  [] null
  [0] Param0 -> spec(Param0)
compress #0: Int
pass #0: 
+ pre h
pass #1: 
0
pass #2: 
tmp2

Inductive List;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

snoc = fix (
    \f: List -> Int -> List. \xs: List. \w: Int. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t w}
    end
);

repr = fix (
    \f: Int -> List -> Int. \pre: Int. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (+ pre h) t
    end
) 0;

main = \xs: List. 
    let tmp2 = (repr xs) in 
        tmp2;
syn-comb: 0.557929
collect: 16.5313
label: 0.009961
extend-component: 3.2e-05
execute: 0.19492
syn-align: 16.7646
comb-size: 7
align-size: 3
extract-size: 4
17.3454
Success


List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 max : Int -> Int -> Int
sum : List -> Int
mts : List -> Int
spec : List -> Int
repr : List -> List'. <nil Unit | cons {Int,List'}>
main : List -> Int


Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

mts = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> max (+ h (sum t)) (f t)
    end
);

spec = \xs: List. 
    mts xs;

repr = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            align (label (cons {h, unlabel tmp2 }) ) 
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        align (spec (unlabel tmp3 )) ;
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
align term #2: Int
align@2 spec (unlabel tmp3)
  xs: List. <nil Unit | cons {Int,List}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  mts [List. <nil Unit | cons {Int,List}>] -> Int 3
  max [Int,Int] -> Int 1
  spec [List. <nil Unit | cons {Int,List}>] -> Int 4
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  sum [List. <nil Unit | cons {Int,List}>] -> Int 2

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  t: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: compress[0] List. <nil Unit | cons {Int,List}>
  h: Int
align term #2: Int
align@2 spec (unlabel tmp3)
  xs: List. <nil Unit | cons {Int,List}>
  tmp3: compress[0] List. <nil Unit | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param2
node: [Param0,Param1,Param2,Param3]@Int
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  mts([Param0]@List. <nil Unit | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
  sum([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0















  [0] mts(Param0)
  [1] sum(Param0)
  [0] mts(Param0)
  [1] sum(Param0)
  [0] Param3
  [1] Param2 -> mts(Param0)
  [2] Param2 -> sum(Param0)
  [] null
  [0] Param1 -> mts(Param0)
  [1] Param1 -> sum(Param0)
compress #0: {Int,Int}
pass #0: 
{0, 0}
pass #1: 
{if (< (+ h tmp2.2) tmp2.1) then tmp2.1
else + h tmp2.2, + h tmp2.2}
pass #2: 
tmp3.1

Inductive List;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

mts = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> max (+ h (sum t)) (f t)
    end
);

spec = \xs: List. 
    mts xs;

repr = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            {if (< (+ h tmp2.2) tmp2.1) then tmp2.1
            else + h tmp2.2, + h tmp2.2}
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        tmp3.1;
syn-comb: 0.197646
collect: 0.590747
label: 0.009931
extend-component: 0.000588
execute: 1.66684
syn-align: 2.25312
comb-size: 32
align-size: 7
extract-size: 4
2.46712
Success


CList :: CList. <ctwo {Int,Int} | concat {CList,CList}>
 ctwo : {Int,Int} ->
        CList'. <ctwo {Int,Int} | concat {CList',CList'}>
 concat : {CList,CList} ->
          CList'. <ctwo {Int,Int} | concat {CList',CList'}>
 List :: List. <two {Int,Int} | cons {Int,List}>
two : {Int,Int} -> List'. <two {Int,Int} | cons {Int,List'}>
cons : {Int,List} -> List'. <two {Int,Int} | cons {Int,List'}>
cat : List -> List -> List'. <two {Int,Int} | cons {Int,List'}>
repr : CList -> List'. <two {Int,Int} | cons {Int,List'}>
min : Int -> Int -> Int
max : Int -> Int -> Int
spec : List -> Int
is_sorted : List -> Bool
target : CList -> CList
main : CList -> Int


Inductive CList;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      two {x, y} -> cons {x, cons {y, b}}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      ctwo {x, y} -> two {x, y}
    | concat {a, b} -> cat (f a) (f b)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      two {x, y} -> {min x y, max x y}
    | cons {h, t} -> 
        let res = (f t) in 
            {min res.1 h, min res.2 (max res.1 h)}
    end
) xs).2;

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      two {x, y} -> and (> pre x) (> x y)
    | cons {h, t} -> and (> pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          two {x, y} -> > x y
        | cons {h, t} -> aux h t
        end
;

target = fix (
    \f: CList -> Compress CList. \c: CList. 
    match c with
      ctwo {a, b} -> 
        align (label c ) 
    | concat {l, r} -> 
        let tmp1 = (f r) in 
            align (label (concat {l, unlabel tmp1 }) ) 
    end
);

main = \c: CList. 
    if (is_sorted (repr c)) then let tmp2 = (target c) in 
        align (spec (repr (unlabel tmp2 ))) 
    else 0;
align term #0: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
align@0 create@0 c
  b: Int
  c: CList. <ctwo {Int,Int} | concat {CList,CList}>
  a: Int
align term #1: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
align@1 create@0 concat ({l,unlabel tmp1})
  r: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp1: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
  l: CList. <ctwo {Int,Int} | concat {CList,CList}>
  c: CList. <ctwo {Int,Int} | concat {CList,CList}>
align term #2: Int
align@2 spec (repr (unlabel tmp2))
  c: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp2: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
Components for compress:
  cons [(Int * List. <two {Int,Int} | cons {Int,List}>)] -> List. <two {Int,Int} | cons {Int,List}> 1
  two [(Int * Int)] -> List. <two {Int,Int} | cons {Int,List}> 1
  ctwo [(Int * Int)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 0
  concat [(CList. <ctwo {Int,Int} | concat {CList,CList}> * CList. <ctwo {Int,Int} | concat {CList,CList}>)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 0
  min [Int,Int] -> Int 4
  max [Int,Int] -> Int 5

Components for align:
  cons [(Int * List. <two {Int,Int} | cons {Int,List}>)] -> List. <two {Int,Int} | cons {Int,List}> 1
  cat [List. <two {Int,Int} | cons {Int,List}>,List. <two {Int,Int} | cons {Int,List}>] -> List. <two {Int,Int} | cons {Int,List}> 2
  two [(Int * Int)] -> List. <two {Int,Int} | cons {Int,List}> 1
  ctwo [(Int * Int)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 0
  concat [(CList. <ctwo {Int,Int} | concat {CList,CList}> * CList. <ctwo {Int,Int} | concat {CList,CList}>)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 0
  min [Int,Int] -> Int 4
  spec [List. <two {Int,Int} | cons {Int,List}>] -> Int 6
  max [Int,Int] -> Int 5
  repr [CList. <ctwo {Int,Int} | concat {CList,CList}>] -> List. <two {Int,Int} | cons {Int,List}> 3
  is_sorted [List. <two {Int,Int} | cons {Int,List}>] -> Bool 7

Components for comb:
  cons [(Int * List. <two {Int,Int} | cons {Int,List}>)] -> List. <two {Int,Int} | cons {Int,List}> 1
  two [(Int * Int)] -> List. <two {Int,Int} | cons {Int,List}> 1
  ctwo [(Int * Int)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 0
  concat [(CList. <ctwo {Int,Int} | concat {CList,CList}> * CList. <ctwo {Int,Int} | concat {CList,CList}>)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 0
  min [Int,Int] -> Int 4
  max [Int,Int] -> Int 5

align term #0: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
align@0 create@0 c
  b: Int
  c: CList. <ctwo {Int,Int} | concat {CList,CList}>
  a: Int
align term #1: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
align@1 create@0 concat ({l,unlabel tmp1})
  r: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp1: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
  l: CList. <ctwo {Int,Int} | concat {CList,CList}>
  c: CList. <ctwo {Int,Int} | concat {CList,CList}>
align term #2: Int
align@2 spec (repr (unlabel tmp2))
  c: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp2: compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param0
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>([Param0,Param1,Param2,Param3]@Compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
  Param1
node: [Param0,Param1,Param2,Param3]@Int
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>([Param0,Param1]@Compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] CList. <ctwo {Int,Int} | concat {CList,CList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[CList. <ctwo {Int,Int} | concat {CList,CList}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1]@Int [Param0]@CList. <ctwo {Int,Int} | concat {CList,CList}>)
  min([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <two {Int,Int} | cons {Int,List}>)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  is_sorted([Param0]@List. <two {Int,Int} | cons {Int,List}>)
node: [Param0]@List. <two {Int,Int} | cons {Int,List}>
  cat([Param0]@List. <two {Int,Int} | cons {Int,List}> [Param0]@List. <two {Int,Int} | cons {Int,List}>)
  repr([Param0]@CList. <ctwo {Int,Int} | concat {CList,CList}>)
node: [Param0]@CList. <ctwo {Int,Int} | concat {CList,CList}>
  Param0









  [] spec(repr(Param0))
  [0] Param2
  [] spec(repr(Param0))
  [0] Param1 -> spec(repr(Param0))
  [] null
  [0] Param1 -> spec(repr(Param0))
compress #0: Int
pass #0: 
a
pass #1: 
tmp1
pass #2: 
tmp2

Inductive CList;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      two {x, y} -> cons {x, cons {y, b}}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      ctwo {x, y} -> two {x, y}
    | concat {a, b} -> cat (f a) (f b)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      two {x, y} -> {min x y, max x y}
    | cons {h, t} -> 
        let res = (f t) in 
            {min res.1 h, min res.2 (max res.1 h)}
    end
) xs).2;

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      two {x, y} -> and (> pre x) (> x y)
    | cons {h, t} -> and (> pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          two {x, y} -> > x y
        | cons {h, t} -> aux h t
        end
;

target = fix (
    \f: CList -> Int. \c: CList. 
    match c with
      ctwo {a, b} -> a
    | concat {l, r} -> 
        let tmp1 = (f r) in 
            tmp1
    end
);

main = \c: CList. 
    if (is_sorted (repr c)) then let tmp2 = (target c) in 
        tmp2
    else 0;
syn-comb: 0.723249
collect: 14.1364
label: 0.017131
extend-component: 3e-06
execute: 0.014515
syn-align: 14.1547
comb-size: 3
align-size: 5
extract-size: 3
14.9036
Success

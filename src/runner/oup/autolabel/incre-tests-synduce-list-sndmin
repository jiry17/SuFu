
List :: List. <two {Int,Int} | cons {Int,List}>
 two : {Int,Int} -> List'. <two {Int,Int} | cons {Int,List'}>
 cons : {Int,List} -> List'. <two {Int,Int} | cons {Int,List'}>
 CList :: CList. <ctwo {Int,Int} | concat {CList,CList}>
ctwo : {Int,Int} ->
       CList'. <ctwo {Int,Int} | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <ctwo {Int,Int} | concat {CList',CList'}>
max : Int -> Int -> Int
min : Int -> Int -> Int
cat_list : List ->
           List -> List'. <two {Int,Int} | cons {Int,List'}>
repr : CList -> List'. <two {Int,Int} | cons {Int,List'}>
spec : List -> Int
main : CList -> Int


Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

cat_list = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      two {a, b} -> cons {a, cons {b, ys}}
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CList -> Compress List. \xs: CList. 
    match xs with
      ctwo {a, b} -> 
        let tmp1 = (two {a, b}) in 
            align (label tmp1 ) 
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                align (label (cat_list (unlabel tmp2 ) (unlabel tmp3 )) ) 
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      two {a, b} -> {min a b, max a b}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_min = (min hd result.1) in 
                let new_snd = (min result.2 (max hd result.1)) in 
                    {new_min, new_snd}
    end
) xs).2;

main = \x: CList. 
    let tmp4 = (repr x) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] List. <two {Int,Int} | cons {Int,List}>
align@0 create@0 tmp1
  b: Int
  tmp1: List. <two {Int,Int} | cons {Int,List}>
  xs: CList. <ctwo {Int,Int} | concat {CList,CList}>
  a: Int
align term #1: compress[0] List. <two {Int,Int} | cons {Int,List}>
align@1 create@0 cat_list (unlabel tmp2) (unlabel tmp3)
  b: CList. <ctwo {Int,Int} | concat {CList,CList}>
  a: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp3: compress[0] List. <two {Int,Int} | cons {Int,List}>
  tmp2: compress[0] List. <two {Int,Int} | cons {Int,List}>
  xs: CList. <ctwo {Int,Int} | concat {CList,CList}>
align term #2: Int
align@2 spec (unlabel tmp4)
  x: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp4: compress[0] List. <two {Int,Int} | cons {Int,List}>
Components for compress:
  min [Int,Int] -> Int 3
  cons [(Int * List. <two {Int,Int} | cons {Int,List}>)] -> List. <two {Int,Int} | cons {Int,List}> 0
  two [(Int * Int)] -> List. <two {Int,Int} | cons {Int,List}> 0
  ctwo [(Int * Int)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 1
  concat [(CList. <ctwo {Int,Int} | concat {CList,CList}> * CList. <ctwo {Int,Int} | concat {CList,CList}>)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 1
  max [Int,Int] -> Int 2

Components for align:
  cat_list [List. <two {Int,Int} | cons {Int,List}>,List. <two {Int,Int} | cons {Int,List}>] -> List. <two {Int,Int} | cons {Int,List}> 4
  spec [List. <two {Int,Int} | cons {Int,List}>] -> Int 6
  min [Int,Int] -> Int 3
  cons [(Int * List. <two {Int,Int} | cons {Int,List}>)] -> List. <two {Int,Int} | cons {Int,List}> 0
  two [(Int * Int)] -> List. <two {Int,Int} | cons {Int,List}> 0
  ctwo [(Int * Int)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 1
  concat [(CList. <ctwo {Int,Int} | concat {CList,CList}> * CList. <ctwo {Int,Int} | concat {CList,CList}>)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 1
  max [Int,Int] -> Int 2

Components for comb:
  min [Int,Int] -> Int 3
  cons [(Int * List. <two {Int,Int} | cons {Int,List}>)] -> List. <two {Int,Int} | cons {Int,List}> 0
  two [(Int * Int)] -> List. <two {Int,Int} | cons {Int,List}> 0
  ctwo [(Int * Int)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 1
  concat [(CList. <ctwo {Int,Int} | concat {CList,CList}> * CList. <ctwo {Int,Int} | concat {CList,CList}>)] -> CList. <ctwo {Int,Int} | concat {CList,CList}> 1
  max [Int,Int] -> Int 2

align term #0: compress[0] List. <two {Int,Int} | cons {Int,List}>
align@0 create@0 tmp1
  b: Int
  tmp1: List. <two {Int,Int} | cons {Int,List}>
  xs: CList. <ctwo {Int,Int} | concat {CList,CList}>
  a: Int
align term #1: compress[0] List. <two {Int,Int} | cons {Int,List}>
align@1 create@0 cat_list (unlabel tmp2) (unlabel tmp3)
  b: CList. <ctwo {Int,Int} | concat {CList,CList}>
  a: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp3: compress[0] List. <two {Int,Int} | cons {Int,List}>
  tmp2: compress[0] List. <two {Int,Int} | cons {Int,List}>
  xs: CList. <ctwo {Int,Int} | concat {CList,CList}>
align term #2: Int
align@2 spec (unlabel tmp4)
  x: CList. <ctwo {Int,Int} | concat {CList,CList}>
  tmp4: compress[0] List. <two {Int,Int} | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 1
start: start
node: start
  Compress[0] List. <two {Int,Int} | cons {Int,List}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <two {Int,Int} | cons {Int,List}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] List. <two {Int,Int} | cons {Int,List}>
  Param2
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Compress[0] List. <two {Int,Int} | cons {Int,List}>([Param0,Param1]@Compress[0] List. <two {Int,Int} | cons {Int,List}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] List. <two {Int,Int} | cons {Int,List}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[List. <two {Int,Int} | cons {Int,List}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1]@Int [Param0]@List. <two {Int,Int} | cons {Int,List}>)
  spec([Param0]@List. <two {Int,Int} | cons {Int,List}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@List. <two {Int,Int} | cons {Int,List}>
  Param0
  cat_list([Param0]@List. <two {Int,Int} | cons {Int,List}> [Param0]@List. <two {Int,Int} | cons {Int,List}>)















  [0] spec(Param0)
  [1] spec(cat_list(Param0,Param0))
  [0] max(Param0,Param3)
  [1] min(Param0,Param3)
  [0] spec(Param0)
  [1] spec(cat_list(Param0,Param0))
  [0] Param2 -> spec(Param0)
  [1] Param2 -> spec(cat_list(Param0,Param0))
  [2] Param3 -> spec(Param0)
  [3] Param3 -> spec(cat_list(Param0,Param0))
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> spec(cat_list(Param0,Param0))
compress #0: {Int,Int}
pass #0: 
let c0 = (max b a) in 
    let c1 = (min b a) in 
        {c0, c1}
pass #1: 
{if (and (< tmp3.2 tmp2.2) (< tmp2.2 tmp3.1)) then tmp2.2
else if (< tmp2.1 tmp3.2) then tmp2.1
else if (< tmp2.2 tmp3.1) then tmp3.2
else tmp3.1, min tmp3.2 tmp2.2}
pass #2: 
tmp4.1

Inductive List;

Inductive CList;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

cat_list = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      two {a, b} -> cons {a, cons {b, ys}}
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      ctwo {a, b} -> 
        let c0 = (max b a) in 
            let c1 = (min b a) in 
                {c0, c1}
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                {if (and (< tmp3.2 tmp2.2) (< tmp2.2 tmp3.1)) then tmp2.2
                else if (< tmp2.1 tmp3.2) then tmp2.1
                else if (< tmp2.2 tmp3.1) then tmp3.2
                else tmp3.1, min tmp3.2 tmp2.2}
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      two {a, b} -> {min a b, max a b}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_min = (min hd result.1) in 
                let new_snd = (min result.2 (max hd result.1)) in 
                    {new_min, new_snd}
    end
) xs).2;

main = \x: CList. 
    let tmp4 = (repr x) in 
        tmp4.1;
syn-comb: 0.927004
collect: 1.00638
label: 0.014157
extend-component: 0.001589
execute: 6.76357
syn-align: 7.39922
comb-size: 67
align-size: 11
extract-size: 15
8.34808
Success

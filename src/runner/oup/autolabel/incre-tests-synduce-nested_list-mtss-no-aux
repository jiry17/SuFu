
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 NList :: NList. <line List | ncons {List,NList}>
line : List -> NList'. <line List | ncons {List,NList'}>
ncons : {List,NList} -> NList'. <line List | ncons {List,NList'}>
CNList :: CNList. <sglt List | cat {CNList,CNList}>
sglt : List -> CNList'. <sglt List | cat {CNList',CNList'}>
cat : {CNList,CNList} ->
      CNList'. <sglt List | cat {CNList',CNList'}>
cton : CNList -> NList'. <line List | ncons {List,NList'}>
sum : List -> Int
nsum : NList -> Int
max : Int -> Int -> Int
spec : NList -> Int
target : CNList -> CNList'. <sglt List | cat {CNList',CNList'}>
main : CNList -> Int


Inductive List;

Inductive NList;

Inductive CNList;

cton = fix (
    \f: CNList -> NList. 
    let dec = (fix (
    \g: CNList -> CNList -> NList. \l: CNList. \c: CNList. 
    match c with
      sglt x -> ncons {x, f l}
    | cat {x, y} -> g (cat {y, l}) x
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> line x
        | cat {x, y} -> dec y x
        end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> + h (f t)
    end
);

nsum = fix (
    \f: NList -> Int. \xs: NList. 
    match xs with
      line a -> sum a
    | ncons {h, t} -> + (sum h) (f t)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: NList -> Int. \xs: NList. 
    match xs with
      line a -> max 0 (sum a)
    | ncons {h, t} -> 
        let hsum = (sum h) in 
            let tres = (f t) in 
                max (+ tres hsum) 0
    end
);

target = fix (
    \f: CNList -> Compress CNList. 
    let tsum = (fix (
    \g: List -> Compress List. \xs: List. 
    match xs with
      elt x -> 
        let tmp1 = (elt x) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (g t) in 
            align (label (cons {h, unlabel tmp2 }) ) 
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> 
            let tmp3 = (tsum x) in 
                align (label (sglt (unlabel tmp3 )) ) 
        | cat {l, r} -> 
            let tmp4 = (f l) in 
                let tmp5 = (f r) in 
                    align (label (cat {unlabel tmp4 , unlabel tmp5 }) ) 
        end
);

main = \c: CNList. 
    let tmp6 = (target c) in 
        align (spec (cton (unlabel tmp6 ))) ;
align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <elt Int | cons {Int,List}>
  tmp1: List. <elt Int | cons {Int,List}>
  x: Int
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  h: Int
align term #2: compress[1] CNList. <sglt List | cat {CNList,CNList}>
align@2 create@1 sglt (unlabel tmp3)
  x: List. <elt Int | cons {Int,List}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
align term #3: compress[1] CNList. <sglt List | cat {CNList,CNList}>
align@3 create@1 cat ({unlabel tmp4,unlabel tmp5})
  tmp4: compress[1] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  l: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp5: compress[1] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  r: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
align term #4: Int
align@4 spec (cton (unlabel tmp6))
  tmp6: compress[1] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
Components for compress:
  ncons [(List. <elt Int | cons {Int,List}>*NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>*CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  sglt [List. <elt Int | cons {Int,List}>] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 6

Components for align:
  ncons [(List. <elt Int | cons {Int,List}>*NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>*CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  nsum [NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>] -> Int 5
  sglt [List. <elt Int | cons {Int,List}>] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  cton [CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 3
  sum [List. <elt Int | cons {Int,List}>] -> Int 4
  spec [NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>] -> Int 7
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 6

Components for comb:
  ncons [(List. <elt Int | cons {Int,List}>*NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}>)] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  cat [(CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>*CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>)] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  sglt [List. <elt Int | cons {Int,List}>] -> CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}> 2
  line [List. <elt Int | cons {Int,List}>] -> NList. <line List. <elt Int | cons {Int,List}> | ncons {List. <elt Int | cons {Int,List}>,NList}> 1
  max [Int,Int] -> Int 6

align term #0: compress[0] List. <elt Int | cons {Int,List}>
align@0 create@0 tmp1
  xs: List. <elt Int | cons {Int,List}>
  tmp1: List. <elt Int | cons {Int,List}>
  x: Int
  (0) {tmp1: elt 3,x: 3,xs: elt 3} @ {} -> compress elt 3
  (0) {tmp1: elt 1,x: 1,xs: elt 1} @ {} -> compress elt 1
  (0) {tmp1: elt -1,x: -1,xs: elt -1} @ {} -> compress elt -1
  (0) {tmp1: elt 4,x: 4,xs: elt 4} @ {} -> compress elt 4
  (0) {tmp1: elt -2,x: -2,xs: elt -2} @ {} -> compress elt -2
  (0) {tmp1: elt 2,x: 2,xs: elt 2} @ {} -> compress elt 2
  (0) {tmp1: elt 5,x: 5,xs: elt 5} @ {} -> compress elt 5
  (0) {tmp1: elt -4,x: -4,xs: elt -4} @ {} -> compress elt -4
  (0) {tmp1: elt 0,x: 0,xs: elt 0} @ {} -> compress elt 0
align term #1: compress[0] List. <elt Int | cons {Int,List}>
align@1 create@0 cons ({h,unlabel tmp2})
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  tmp2: compress[0] List. <elt Int | cons {Int,List}>
  h: Int
  (1) {h: -1,t: elt 3,xs: cons (-1,elt 3),tmp2: compress elt 3} @ {} -> compress cons (-1,elt 3)
  (1) {h: 5,t: elt -1,xs: cons (5,elt -1),tmp2: compress elt -1} @ {} -> compress cons (5,elt -1)
  (1) {h: -4,t: elt -1,xs: cons (-4,elt -1),tmp2: compress elt -1} @ {} -> compress cons (-4,elt -1)
  (1) {h: 1,t: elt 3,xs: cons (1,elt 3),tmp2: compress elt 3} @ {} -> compress cons (1,elt 3)
  (1) {h: -5,t: cons (1,elt 3),xs: cons (-5,cons (1,elt 3)),tmp2: compress cons (1,elt 3)} @ {} -> compress cons (-5,cons (1,elt 3))
  (1) {h: -3,t: cons (-5,cons (1,elt 3)),xs: cons (-3,cons (-5,cons (1,elt 3))),tmp2: compress cons (-5,cons (1,elt 3))} @ {} -> compress cons (-3,cons (-5,cons (1,elt 3)))
  (1) {h: -1,t: elt 5,xs: cons (-1,elt 5),tmp2: compress elt 5} @ {} -> compress cons (-1,elt 5)
  (1) {h: 1,t: elt -4,xs: cons (1,elt -4),tmp2: compress elt -4} @ {} -> compress cons (1,elt -4)
  (1) {h: 0,t: cons (1,elt -4),xs: cons (0,cons (1,elt -4)),tmp2: compress cons (1,elt -4)} @ {} -> compress cons (0,cons (1,elt -4))
  (1) {h: 3,t: elt 4,xs: cons (3,elt 4),tmp2: compress elt 4} @ {} -> compress cons (3,elt 4)
align term #2: compress[1] CNList. <sglt List | cat {CNList,CNList}>
align@2 create@1 sglt (unlabel tmp3)
  x: List. <elt Int | cons {Int,List}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp3: compress[0] List. <elt Int | cons {Int,List}>
  (2) {x: cons (-1,elt 3),c: sglt cons (-1,elt 3),tmp3: compress cons (-1,elt 3)} @ {} -> compress sglt cons (-1,elt 3)
  (2) {x: elt 1,c: sglt elt 1,tmp3: compress elt 1} @ {} -> compress sglt elt 1
  (2) {x: cons (5,elt -1),c: sglt cons (5,elt -1),tmp3: compress cons (5,elt -1)} @ {} -> compress sglt cons (5,elt -1)
  (2) {x: elt 4,c: sglt elt 4,tmp3: compress elt 4} @ {} -> compress sglt elt 4
  (2) {x: elt -2,c: sglt elt -2,tmp3: compress elt -2} @ {} -> compress sglt elt -2
  (2) {x: elt 2,c: sglt elt 2,tmp3: compress elt 2} @ {} -> compress sglt elt 2
  (2) {x: cons (-4,elt -1),c: sglt cons (-4,elt -1),tmp3: compress cons (-4,elt -1)} @ {} -> compress sglt cons (-4,elt -1)
  (2) {x: cons (-3,cons (-5,cons (1,elt 3))),c: sglt cons (-3,cons (-5,cons (1,elt 3))),tmp3: compress cons (-3,cons (-5,cons (1,elt 3)))} @ {} -> compress sglt cons (-3,cons (-5,cons (1,elt 3)))
  (2) {x: cons (-1,elt 5),c: sglt cons (-1,elt 5),tmp3: compress cons (-1,elt 5)} @ {} -> compress sglt cons (-1,elt 5)
  (2) {x: elt -4,c: sglt elt -4,tmp3: compress elt -4} @ {} -> compress sglt elt -4
align term #3: compress[1] CNList. <sglt List | cat {CNList,CNList}>
align@3 create@1 cat ({unlabel tmp4,unlabel tmp5})
  tmp4: compress[1] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  l: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  tmp5: compress[1] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  r: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  (3) {l: sglt cons (-1,elt 3),c: cat (sglt cons (-1,elt 3),sglt elt 1),tmp4: compress sglt cons (-1,elt 3),r: sglt elt 1,tmp5: compress sglt elt 1} @ {} -> compress cat (sglt cons (-1,elt 3),sglt elt 1)
  (3) {l: sglt cons (5,elt -1),c: cat (sglt cons (5,elt -1),sglt elt 4),tmp4: compress sglt cons (5,elt -1),r: sglt elt 4,tmp5: compress sglt elt 4} @ {} -> compress cat (sglt cons (5,elt -1),sglt elt 4)
  (3) {l: sglt elt 2,c: cat (sglt elt 2,sglt cons (-4,elt -1)),tmp4: compress sglt elt 2,r: sglt cons (-4,elt -1),tmp5: compress sglt cons (-4,elt -1)} @ {} -> compress cat (sglt elt 2,sglt cons (-4,elt -1))
  (3) {l: sglt elt -2,c: cat (sglt elt -2,cat (sglt elt 2,sglt cons (-4,elt -1))),tmp4: compress sglt elt -2,r: cat (sglt elt 2,sglt cons (-4,elt -1)),tmp5: compress cat (sglt elt 2,sglt cons (-4,elt -1))} @ {} -> compress cat (sglt elt -2,cat (sglt elt 2,sglt cons (-4,elt -1)))
  (3) {l: sglt cons (-3,cons (-5,cons (1,elt 3))),c: cat (sglt cons (-3,cons (-5,cons (1,elt 3))),sglt cons (-1,elt 5)),tmp4: compress sglt cons (-3,cons (-5,cons (1,elt 3))),r: sglt cons (-1,elt 5),tmp5: compress sglt cons (-1,elt 5)} @ {} -> compress cat (sglt cons (-3,cons (-5,cons (1,elt 3))),sglt cons (-1,elt 5))
  (3) {l: sglt elt -4,c: cat (sglt elt -4,sglt cons (0,cons (1,elt -4))),tmp4: compress sglt elt -4,r: sglt cons (0,cons (1,elt -4)),tmp5: compress sglt cons (0,cons (1,elt -4))} @ {} -> compress cat (sglt elt -4,sglt cons (0,cons (1,elt -4)))
  (3) {l: sglt elt 5,c: cat (sglt elt 5,sglt cons (1,cons (1,cons (-4,cons (3,elt 4))))),tmp4: compress sglt elt 5,r: sglt cons (1,cons (1,cons (-4,cons (3,elt 4)))),tmp5: compress sglt cons (1,cons (1,cons (-4,cons (3,elt 4))))} @ {} -> compress cat (sglt elt 5,sglt cons (1,cons (1,cons (-4,cons (3,elt 4)))))
  (3) {l: sglt elt 0,c: cat (sglt elt 0,sglt elt 1),tmp4: compress sglt elt 0,r: sglt elt 1,tmp5: compress sglt elt 1} @ {} -> compress cat (sglt elt 0,sglt elt 1)
  (3) {l: cat (sglt elt 0,sglt elt 1),c: cat (cat (sglt elt 0,sglt elt 1),sglt cons (5,elt 3)),tmp4: compress cat (sglt elt 0,sglt elt 1),r: sglt cons (5,elt 3),tmp5: compress sglt cons (5,elt 3)} @ {} -> compress cat (cat (sglt elt 0,sglt elt 1),sglt cons (5,elt 3))
align term #4: Int
align@4 spec (cton (unlabel tmp6))
  tmp6: compress[1] CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  c: CNList. <sglt List. <elt Int | cons {Int,List}> | cat {CNList,CNList}>
  (4) {tmp6: compress cat (sglt cons (-1,elt 3),sglt elt 1),c: cat (sglt cons (-1,elt 3),sglt elt 1)} @ {} -> 3
  (4) {tmp6: compress cat (sglt cons (5,elt -1),sglt elt 4),c: cat (sglt cons (5,elt -1),sglt elt 4)} @ {} -> 8
  (4) {tmp6: compress cat (sglt elt -2,cat (sglt elt 2,sglt cons (-4,elt -1))),c: cat (sglt elt -2,cat (sglt elt 2,sglt cons (-4,elt -1)))} @ {} -> 0
  (4) {tmp6: compress cat (sglt cons (-3,cons (-5,cons (1,elt 3))),sglt cons (-1,elt 5)),c: cat (sglt cons (-3,cons (-5,cons (1,elt 3))),sglt cons (-1,elt 5))} @ {} -> 0
  (4) {tmp6: compress cat (sglt elt -4,sglt cons (0,cons (1,elt -4))),c: cat (sglt elt -4,sglt cons (0,cons (1,elt -4)))} @ {} -> 0
  (4) {tmp6: compress cat (sglt elt 5,sglt cons (1,cons (1,cons (-4,cons (3,elt 4))))),c: cat (sglt elt 5,sglt cons (1,cons (1,cons (-4,cons (3,elt 4)))))} @ {} -> 10
  (4) {tmp6: compress sglt elt 2,c: sglt elt 2} @ {} -> 2
  (4) {tmp6: compress sglt cons (3,cons (0,cons (-3,cons (1,cons (1,cons (2,cons (2,cons (-4,elt 3)))))))),c: sglt cons (3,cons (0,cons (-3,cons (1,cons (1,cons (2,cons (2,cons (-4,elt 3))))))))} @ {} -> 5
  (4) {tmp6: compress cat (cat (sglt elt 0,sglt elt 1),sglt cons (5,elt 3)),c: cat (cat (sglt elt 0,sglt elt 1),sglt cons (5,elt 3))} @ {} -> 9
  (4) {tmp6: compress sglt cons (1,cons (0,cons (-2,elt 5))),c: sglt cons (1,cons (0,cons (-2,elt 5)))} @ {} -> 4





















  [] sum(Param0)
  [0] Param2
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [] sum(Param0)
  [0] Param2 -> sum(Param0)
  [1] Param3
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(cton(Param0))
  [1] nsum(cton(Param0))
  [0] Param2 -> sum(Param0)
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(cton(Param0))
  [1] nsum(cton(Param0))
  [0] Param0 -> spec(cton(Param0))
  [1] Param0 -> nsum(cton(Param0))
  [2] Param3 -> spec(cton(Param0))
  [3] Param3 -> nsum(cton(Param0))
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [] null
  [0] Param0 -> spec(cton(Param0))
  [1] Param0 -> nsum(cton(Param0))
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: Int
compress #1: {Int,Int}
pass #0: 
x
pass #1: 
+ tmp2 h
pass #2: 
{max tmp3 0, tmp3}
pass #3: 
{max tmp4.1 (+ tmp4.2 tmp5.1), + tmp4.2 tmp5.2}
pass #4: 
tmp6.1

Inductive List;

Inductive NList;

Inductive CNList;

cton = fix (
    \f: CNList -> NList. 
    let dec = (fix (
    \g: CNList -> CNList -> NList. \l: CNList. \c: CNList. 
    match c with
      sglt x -> ncons {x, f l}
    | cat {x, y} -> g (cat {y, l}) x
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> line x
        | cat {x, y} -> dec y x
        end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> + h (f t)
    end
);

nsum = fix (
    \f: NList -> Int. \xs: NList. 
    match xs with
      line a -> sum a
    | ncons {h, t} -> + (sum h) (f t)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: NList -> Int. \xs: NList. 
    match xs with
      line a -> max 0 (sum a)
    | ncons {h, t} -> 
        let hsum = (sum h) in 
            let tres = (f t) in 
                max (+ tres hsum) 0
    end
);

target = fix (
    \f: CNList -> {Int, Int}. 
    let tsum = (fix (
    \g: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> 
        let tmp2 = (g t) in 
            + tmp2 h
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> 
            let tmp3 = (tsum x) in 
                {max tmp3 0, tmp3}
        | cat {l, r} -> 
            let tmp4 = (f l) in 
                let tmp5 = (f r) in 
                    {max tmp4.1 (+ tmp4.2 tmp5.1), + tmp4.2 tmp5.2}
        end
);

main = \c: CNList. 
    let tmp6 = (target c) in 
        tmp6.1;
syn-comb: 0.819224
collect: 4.41592
label: 0.019233
extend-component: 0.000261
execute: 2.57804
syn-align: 6.93526
7.78904
Success

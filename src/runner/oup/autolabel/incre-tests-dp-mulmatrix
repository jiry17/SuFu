
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
Tree :: Tree. <leaf {Int,Int} | node {Tree,Tree}>
leaf : {Int,Int} -> Tree'. <leaf {Int,Int} | node {Tree',Tree'}>
node : {Tree,Tree} -> Tree'. <leaf {Int,Int} | node {Tree',Tree'}>
Plan :: Tree
PlanList :: PlanList. <pnil Unit | pcons {Plan,PlanList}>
pnil : Unit -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
pcons : {Plan,PlanList} ->
        PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
mulcost : Int -> Int -> Int -> Int
merge : PlanList -> PlanList -> PlanList
combine : PlanList -> PlanList -> PlanList
snoc : Int -> List -> List'. <nil Unit | cons {Int,List'}>
generate : List -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
eval : Tree -> Int
min : Int -> Int -> Int
get_best : PlanList -> Int
main : List -> Int


Inductive List;

Inductive Tree;

Plan = Compress Tree;

Inductive PlanList;

mulcost = \l: Int. \mid: Int. \r: Int. 
    * (* l r) mid;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

combine = let combine_single = (\l: Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {align (label (node {unlabel l , unlabel h }) ) , f t}
    end
)) in 
        fix (
        \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
        match xs with
          pnil _ -> xs
        | pcons {h, t} -> merge (combine_single h ys) (f t ys)
        end
    );

snoc = \w: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t}
    end
);

generate = fix (
    \f: List -> PlanList. \xs: List. 
    match xs with
      nil _ -> pnil Unit
    | cons {_, nil _} -> pnil Unit
    | cons {a, cons {b, nil _}} -> pcons {let tmp1 = (leaf {a, b}) in 
            align (label tmp1 ) , pnil Unit}
    | cons {h, t} -> fix (
        \g: List -> List -> PlanList. \l: List. \r: List. 
        match r with
          cons {h, newr} -> 
            let newl = (snoc h l) in 
                let res = (combine (f newl) (f r)) in 
                    match newr with
                      cons {w, nil _} -> res
                    | _ -> merge res (g newl newr)
                    end

        end
    ) (cons {h, nil Unit}) t
    end
);

eval = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Int, Int}. \t: Tree. 
    match t with
      leaf {l, r} -> {0, l, r}
    | node {l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                {+ (+ lres.1 rres.1) (mulcost lres.2 lres.3 rres.3), lres.2, rres.3}
    end
) t).1;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 20000
    | pcons {h, t} -> min (align (eval (unlabel h )) ) (f t)
    end
);

main = \xs: List. 
    get_best (generate xs);
align term #0: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
align@0 create@0 node ({unlabel l,unlabel h})
  l: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
  h: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
align term #1: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
align@1 create@0 tmp1
  a: Int
  b: Int
  tmp1: Tree. <leaf {Int,Int} | node {Tree,Tree}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 eval (unlabel h)
  h: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
Components for compress:
  min [Int,Int] -> Int 10
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  mulcost [Int,Int,Int] -> Int 4
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  node [(Tree. <leaf {Int,Int} | node {Tree,Tree}> * Tree. <leaf {Int,Int} | node {Tree,Tree}>)] -> Tree. <leaf {Int,Int} | node {Tree,Tree}> 1
  leaf [(Int * Int)] -> Tree. <leaf {Int,Int} | node {Tree,Tree}> 1

Components for align:
  min [Int,Int] -> Int 10
  eval [Tree. <leaf {Int,Int} | node {Tree,Tree}>] -> Int 9
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  mulcost [Int,Int,Int] -> Int 4
  snoc [Int,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 7
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  node [(Tree. <leaf {Int,Int} | node {Tree,Tree}> * Tree. <leaf {Int,Int} | node {Tree,Tree}>)] -> Tree. <leaf {Int,Int} | node {Tree,Tree}> 1
  leaf [(Int * Int)] -> Tree. <leaf {Int,Int} | node {Tree,Tree}> 1

Components for comb:
  min [Int,Int] -> Int 10
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  mulcost [Int,Int,Int] -> Int 4
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  node [(Tree. <leaf {Int,Int} | node {Tree,Tree}> * Tree. <leaf {Int,Int} | node {Tree,Tree}>)] -> Tree. <leaf {Int,Int} | node {Tree,Tree}> 1
  leaf [(Int * Int)] -> Tree. <leaf {Int,Int} | node {Tree,Tree}> 1

align term #0: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
align@0 create@0 node ({unlabel l,unlabel h})
  l: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
  h: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
align term #1: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
align@1 create@0 tmp1
  a: Int
  b: Int
  tmp1: Tree. <leaf {Int,Int} | node {Tree,Tree}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 eval (unlabel h)
  h: compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
  t: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
  xs: PlanList. <pnil Unit | pcons {compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>,PlanList}>
num = 0
start: start
node: start
  Compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>([Param0,Param1,Param2,Param3]@Compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  mulcost([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
  Param0
  Param3
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  Param1
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  mulcost([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>([Param0,Param1,Param2]@Compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  mulcost([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] Tree. <leaf {Int,Int} | node {Tree,Tree}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  mulcost([Int@0,Int@1]@Int [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int]([Int@0,Int@1]@Int [Int@0,Int@1]@Int [Param0]@Tree. <leaf {Int,Int} | node {Tree,Tree}>)
  min([Param0]@Int [Param0]@Int)
  eval([Param0]@Tree. <leaf {Int,Int} | node {Tree,Tree}>)
  mulcost([Param0]@Int [Param0]@Int [Param0]@Int)
node: [Param0]@Tree. <leaf {Int,Int} | node {Tree,Tree}>
  Param0





















  [0] eval(Param0)
  [1] fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [2] fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@1(),Int@1(),Param0)
  [0] Param0 -> eval(Param0)
  [1] Param0 -> fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [2] Param0 -> fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@1(),Int@1(),Param0)
  [3] Param3 -> eval(Param0)
  [4] Param3 -> fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [5] Param3 -> fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@1(),Int@1(),Param0)
  [0] eval(Param0)
  [1] fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [2] fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@1(),Int@1(),Param0)
  [0] Param0
  [1] Param1
  [] null
  [0] Param0 -> eval(Param0)
  [1] Param0 -> fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@0(),Int@0(),Param0)
  [2] Param0 -> fold[Tree. <leaf {Int,Int} | node {Tree,Tree}>->Int](Int@1(),Int@1(),Param0)
compress #0: {Int,Int,Int}
pass #0: 
{+ l.1 (+ h.1 (mulcost l.2 l.3 h.3)), l.2, h.3}
pass #1: 
{0, a, b}
pass #2: 
h.1

Inductive List;

Inductive Tree;

Plan = {Int, Int, Int};

Inductive PlanList;

mulcost = \l: Int. \mid: Int. \r: Int. 
    * (* l r) mid;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

combine = let combine_single = (\l: Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {{+ l.1 (+ h.1 (mulcost l.2 l.3 h.3)), l.2, h.3}, f t}
    end
)) in 
        fix (
        \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
        match xs with
          pnil _ -> xs
        | pcons {h, t} -> merge (combine_single h ys) (f t ys)
        end
    );

snoc = \w: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t}
    end
);

generate = fix (
    \f: List -> PlanList. \xs: List. 
    match xs with
      nil _ -> pnil Unit
    | cons {_, nil _} -> pnil Unit
    | cons {a, cons {b, nil _}} -> pcons {{0, a, b}, pnil Unit}
    | cons {h, t} -> fix (
        \g: List -> List -> PlanList. \l: List. \r: List. 
        match r with
          cons {h, newr} -> 
            let newl = (snoc h l) in 
                let res = (combine (f newl) (f r)) in 
                    match newr with
                      cons {w, nil _} -> res
                    | _ -> merge res (g newl newr)
                    end

        end
    ) (cons {h, nil Unit}) t
    end
);

eval = \t: Tree. 
    (fix (
    \f: Tree -> {Int, Int, Int}. \t: Tree. 
    match t with
      leaf {l, r} -> {0, l, r}
    | node {l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                {+ (+ lres.1 rres.1) (mulcost lres.2 lres.3 rres.3), lres.2, rres.3}
    end
) t).1;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 20000
    | pcons {h, t} -> min h.1 (f t)
    end
);

main = \xs: List. 
    get_best (generate xs);
syn-comb: 4.29454
collect: 15.8649
label: 0.020559
extend-component: 0.008843
execute: 1.26047
syn-align: 17.1969
comb-size: 31
align-size: 18
extract-size: 7
21.5232
Success

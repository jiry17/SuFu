
UList :: UList. <uelt Int | usplit {UList,Int,Int,UList}>
 uelt : Int -> UList'. <uelt Int | usplit {UList',Int,Int,UList'}>
 usplit : {UList,Int,Int,UList} ->
          UList'. <uelt Int | usplit {UList',Int,Int,UList'}>
 List :: List. <elt Int | cons {Int,List}>
elt : Int -> List'. <elt Int | cons {Int,List'}>
cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
repr : UList -> List'. <elt Int | cons {Int,List'}>
is_unimodal : List -> Bool
max : Int -> Int -> Int
spec : List -> Int
target : UList ->
         UList'. <uelt Int | usplit {UList',Int,Int,UList'}>
main : UList -> Int


Inductive UList;

Inductive List;

repr = let aux = (fix (
    \f: List -> UList -> List. \res: List. \xs: UList. 
    match xs with
      uelt x -> cons {x, res}
    | usplit {x, a, b, y} -> f (cons {a, cons {b, f res y}}) x
    end
)) in 
        fix (
        \f: UList -> List. \xs: UList. 
        match xs with
          uelt x -> elt x
        | usplit {x, a, b, y} -> aux (cons {a, cons {b, f y}}) x
        end
    );

is_unimodal = let aux_down = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> > pre x
    | cons {h, t} -> and (> pre h) (f h t)
    end
)) in 
        let aux_up = (fix (
        \f: Int -> List -> Bool. \pre: Int. \xs: List. 
        match xs with
          elt x -> < pre x
        | cons {h, t} -> if (< pre h) then f h t
            else aux_down h t
        end
    )) in 
            \xs: List. 
            match xs with
              elt x -> true
            | cons {h, t} -> aux_up h t
            end
;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> max h (f t)
    end
);

target = fix (
    \f: UList -> Compress UList. \xs: UList. 
    match xs with
      uelt x -> 
        let tmp1 = (uelt x) in 
            align (label tmp1 ) 
    | usplit {x, a, b, y} -> if (> a b) then let tmp2 = (f x) in 
            align (label (usplit {unlabel tmp2 , a, b, y}) ) 
        else let tmp3 = (f y) in 
            align (label (usplit {x, a, b, unlabel tmp3 }) ) 
    end
);

main = \xs: UList. 
    if (is_unimodal (repr xs)) then let tmp4 = (target xs) in 
        align (spec (repr (unlabel tmp4 ))) 
    else 0;
align term #0: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
align@0 create@0 tmp1
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  tmp1: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  x: Int
align term #1: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
align@1 create@0 usplit ({unlabel tmp2,a,b,y})
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  b: Int
  tmp2: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  x: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  y: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  a: Int
align term #2: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
align@2 create@0 usplit ({x,a,b,unlabel tmp3})
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  x: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  y: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  b: Int
  tmp3: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  a: Int
align term #3: Int
align@3 spec (repr (unlabel tmp4))
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  tmp4: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
Components for compress:
  max [Int,Int] -> Int 4
  usplit [(UList. <uelt Int | usplit {UList,Int,Int,UList}> * Int * Int * UList. <uelt Int | usplit {UList,Int,Int,UList}>)] -> UList. <uelt Int | usplit {UList,Int,Int,UList}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 1
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 1
  uelt [Int] -> UList. <uelt Int | usplit {UList,Int,Int,UList}> 0

Components for align:
  max [Int,Int] -> Int 4
  is_unimodal [List. <elt Int | cons {Int,List}>] -> Bool 3
  usplit [(UList. <uelt Int | usplit {UList,Int,Int,UList}> * Int * Int * UList. <uelt Int | usplit {UList,Int,Int,UList}>)] -> UList. <uelt Int | usplit {UList,Int,Int,UList}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 1
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 1
  spec [List. <elt Int | cons {Int,List}>] -> Int 5
  uelt [Int] -> UList. <uelt Int | usplit {UList,Int,Int,UList}> 0
  repr [UList. <uelt Int | usplit {UList,Int,Int,UList}>] -> List. <elt Int | cons {Int,List}> 2

Components for comb:
  max [Int,Int] -> Int 4
  usplit [(UList. <uelt Int | usplit {UList,Int,Int,UList}> * Int * Int * UList. <uelt Int | usplit {UList,Int,Int,UList}>)] -> UList. <uelt Int | usplit {UList,Int,Int,UList}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 1
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 1
  uelt [Int] -> UList. <uelt Int | usplit {UList,Int,Int,UList}> 0

align term #0: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
align@0 create@0 tmp1
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  tmp1: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  x: Int
align term #1: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
align@1 create@0 usplit ({unlabel tmp2,a,b,y})
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  b: Int
  tmp2: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  x: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  y: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  a: Int
align term #2: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
align@2 create@0 usplit ({x,a,b,unlabel tmp3})
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  x: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  y: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  b: Int
  tmp3: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  a: Int
align term #3: Int
align@3 spec (repr (unlabel tmp4))
  xs: UList. <uelt Int | usplit {UList,Int,Int,UList}>
  tmp4: compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  Param2
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param3
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  Param4
num = 3
start: start
node: start
  Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>([Param0,Param1]@Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] UList. <uelt Int | usplit {UList,Int,Int,UList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2,Int@3]@Int
  Int@0
  Int@1
  Int@2
  Int@3
  +([Int@0,Int@1,Int@2,Int@3]@Int [Int@0,Int@1,Int@2,Int@3]@Int)
  -([Int@0,Int@1,Int@2,Int@3]@Int [Int@0,Int@1,Int@2,Int@3]@Int)
  ite([Int@0,Int@1,Int@2,Int@3]@Bool [Int@0,Int@1,Int@2,Int@3]@Int [Int@0,Int@1,Int@2,Int@3]@Int)
  max([Int@0,Int@1,Int@2,Int@3]@Int [Int@0,Int@1,Int@2,Int@3]@Int)
  spec([Int@0,Int@1,Int@2,Int@3]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0,Int@1]@Bool
  Bool@0
  Bool@1
  is_unimodal([Bool@0,Bool@1,Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Bool@0,Bool@1,Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Bool@0,Bool@1,Int@0,Int@1]@Int [Bool@0,Bool@1,Int@0,Int@1]@Int)
  -([Bool@0,Bool@1,Int@0,Int@1]@Int [Bool@0,Bool@1,Int@0,Int@1]@Int)
  ite([Bool@0,Bool@1,Int@0,Int@1]@Bool [Bool@0,Bool@1,Int@0,Int@1]@Int [Bool@0,Bool@1,Int@0,Int@1]@Int)
  max([Bool@0,Bool@1,Int@0,Int@1]@Int [Bool@0,Bool@1,Int@0,Int@1]@Int)
  spec([Bool@0,Bool@1,Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[UList. <uelt Int | usplit {UList,Int,Int,UList}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2,Int@3]@Int [Param0]@UList. <uelt Int | usplit {UList,Int,Int,UList}>)
  max([Param0]@Int [Param0]@Int)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Bool
  fold[UList. <uelt Int | usplit {UList,Int,Int,UList}>->Bool]([Int@0]@Bool [Bool@0,Bool@1,Int@0,Int@1]@Bool [Param0]@UList. <uelt Int | usplit {UList,Int,Int,UList}>)
  is_unimodal([Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@Bool
  is_unimodal([Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1,Int@2,Int@3]@Bool
  is_unimodal([Int@0,Int@1,Int@2,Int@3]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@UList. <uelt Int | usplit {UList,Int,Int,UList}>
  uelt([Int@0]@Int)
node: [Int@0,Int@1,Int@2,Int@3]@UList. <uelt Int | usplit {UList,Int,Int,UList}>
  uelt([Int@0,Int@1,Int@2,Int@3]@Int)
node: [Bool@0,Bool@1,Int@0,Int@1]@UList. <uelt Int | usplit {UList,Int,Int,UList}>
  uelt([Bool@0,Bool@1,Int@0,Int@1]@Int)
node: [Param0]@List. <elt Int | cons {Int,List}>
  elt([Param0]@Int)
  repr([Param0]@UList. <uelt Int | usplit {UList,Int,Int,UList}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
  repr([Int@0]@UList. <uelt Int | usplit {UList,Int,Int,UList}>)
node: [Int@0,Int@1,Int@2,Int@3]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1,Int@2,Int@3]@Int)
  repr([Int@0,Int@1,Int@2,Int@3]@UList. <uelt Int | usplit {UList,Int,Int,UList}>)
node: [Bool@0,Bool@1,Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Bool@1,Int@0,Int@1]@Int)
  repr([Bool@0,Bool@1,Int@0,Int@1]@UList. <uelt Int | usplit {UList,Int,Int,UList}>)
node: [Param0]@UList. <uelt Int | usplit {UList,Int,Int,UList}>
  Param0
  uelt([Param0]@Int)












  [] spec(repr(Param0))
  [0] Param2
  [] spec(repr(Param0))
  [0] Param5
  [1] Param2 -> spec(repr(Param0))
  [] spec(repr(Param0))
  [0] Param3
  [1] Param4 -> spec(repr(Param0))
  [] null
  [0] Param1 -> spec(repr(Param0))
compress #0: Int
pass #0: 
x
pass #1: 
max a tmp2
pass #2: 
max b tmp3
pass #3: 
tmp4

Inductive UList;

Inductive List;

repr = let aux = (fix (
    \f: List -> UList -> List. \res: List. \xs: UList. 
    match xs with
      uelt x -> cons {x, res}
    | usplit {x, a, b, y} -> f (cons {a, cons {b, f res y}}) x
    end
)) in 
        fix (
        \f: UList -> List. \xs: UList. 
        match xs with
          uelt x -> elt x
        | usplit {x, a, b, y} -> aux (cons {a, cons {b, f y}}) x
        end
    );

is_unimodal = let aux_down = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> > pre x
    | cons {h, t} -> and (> pre h) (f h t)
    end
)) in 
        let aux_up = (fix (
        \f: Int -> List -> Bool. \pre: Int. \xs: List. 
        match xs with
          elt x -> < pre x
        | cons {h, t} -> if (< pre h) then f h t
            else aux_down h t
        end
    )) in 
            \xs: List. 
            match xs with
              elt x -> true
            | cons {h, t} -> aux_up h t
            end
;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> max h (f t)
    end
);

target = fix (
    \f: UList -> Int. \xs: UList. 
    match xs with
      uelt x -> x
    | usplit {x, a, b, y} -> if (> a b) then let tmp2 = (f x) in 
            max a tmp2
        else let tmp3 = (f y) in 
            max b tmp3
    end
);

main = \xs: UList. 
    if (is_unimodal (repr xs)) then let tmp4 = (target xs) in 
        tmp4
    else 0;
syn-comb: 0.713123
collect: 20.1167
label: 0.018478
extend-component: 0.001151
execute: 0.095419
syn-align: 20.2406
comb-size: 12
align-size: 5
extract-size: 8
20.9815
Success

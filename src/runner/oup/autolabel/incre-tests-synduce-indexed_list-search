
List :: List. <nil Unit | cons {Int,List}>
 nil : Unit -> List'. <nil Unit | cons {Int,List'}>
 cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
 IndexedList :: IndexedList. <inil Unit | icons {Int,Int,
                                                IndexedList}>
inil : Unit ->
       IndexedList'. <inil Unit | icons {Int,Int,IndexedList'}>
icons : {Int,Int,IndexedList} ->
        IndexedList'. <inil Unit | icons {Int,Int,IndexedList'}>
length : List -> Int
w : Int
repr : List ->
       IndexedList'. <inil Unit | icons {Int,Int,IndexedList'}>
spec : IndexedList -> Int
main : List -> Int


Inductive List;

Inductive IndexedList;

length = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + 1 (f t)
    end
);

@Input w = Int;

repr = fix (
    \f: List -> Compress IndexedList. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (inil Unit) in 
            align (label tmp1 ) 
    | cons {h, t} -> 
        let tmp2 = (length t) in 
            let tmp3 = (f t) in 
                align (label (icons {h, tmp2, unlabel tmp3 }) ) 
    end
);

spec = fix (
    \f: IndexedList -> Int. \xs: IndexedList. 
    match xs with
      inil _ -> 0
    | icons {h, i, t} -> if (== h w) then i
        else f t
    end
);

main = \xs: List. 
    let tmp4 = (repr xs) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
align term #1: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
align@1 create@0 icons ({h,tmp2,unlabel tmp3})
  tmp3: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  h: Int
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: Int
  t: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp4)
  tmp4: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  xs: List. <nil Unit | cons {Int,List}>
Components for compress:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  inil [Bot] -> IndexedList. <inil Unit | icons {Int,Int,IndexedList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  icons [(Int * Int * IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)] -> IndexedList. <inil Unit | icons {Int,Int,IndexedList}> 1

Components for align:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  inil [Bot] -> IndexedList. <inil Unit | icons {Int,Int,IndexedList}> 1
  length [List. <nil Unit | cons {Int,List}>] -> Int 2
  spec [IndexedList. <inil Unit | icons {Int,Int,IndexedList}>] -> Int 5
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  icons [(Int * Int * IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)] -> IndexedList. <inil Unit | icons {Int,Int,IndexedList}> 1

Components for comb:
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  inil [Bot] -> IndexedList. <inil Unit | icons {Int,Int,IndexedList}> 1
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  icons [(Int * Int * IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)] -> IndexedList. <inil Unit | icons {Int,Int,IndexedList}> 1

align term #0: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
align@0 create@0 tmp1
  xs: List. <nil Unit | cons {Int,List}>
  tmp1: IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
align term #1: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
align@1 create@0 icons ({h,tmp2,unlabel tmp3})
  tmp3: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  h: Int
  xs: List. <nil Unit | cons {Int,List}>
  tmp2: Int
  t: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 spec (unlabel tmp4)
  tmp4: compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  xs: List. <nil Unit | cons {Int,List}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param3
  Param5
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  Param0
num = 2
start: start
node: start
  Compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>([Param0,Param1,Param2]@Compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
node: [Param0,Param1,Param2]@Compress[0] IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  Param0
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  fold[IndexedList. <inil Unit | icons {Int,Int,IndexedList}>->Int]([Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int [Param0,Param1]@IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)
  spec([Param0,Param1]@IndexedList. <inil Unit | icons {Int,Int,IndexedList}>)
node: [Param1]@Int
  Param1
  +([Param1]@Int [Param1]@Int)
  -([Param1]@Int [Param1]@Int)
node: [Int@0,Int@1,Int@2,Param1]@Int
  Param1
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  -([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
node: [Param0,Param1]@IndexedList. <inil Unit | icons {Int,Int,IndexedList}>
  Param0















  [0] spec(Param0)
  [1] Param1
  [0] Param2
  [0] spec(Param0)
  [1] Param1
  [0] Param0 -> spec(Param0)
  [1] Param0 -> Param1
  [2] Param1
  [3] Param3
  [] null
  [0] Param0 -> spec(Param0)
  [1] Param0 -> Param1
compress #0: {Int,Int}
pass #0: 
{0, w}
pass #1: 
{if (== tmp3.2 h) then tmp2
else tmp3.1, tmp3.2}
pass #2: 
tmp4.1

Inductive List;

Inductive IndexedList;

length = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + 1 (f t)
    end
);

@Input w = Int;

repr = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, w}
    | cons {h, t} -> 
        let tmp2 = (length t) in 
            let tmp3 = (f t) in 
                {if (== tmp3.2 h) then tmp2
                else tmp3.1, tmp3.2}
    end
);

spec = fix (
    \f: IndexedList -> Int. \xs: IndexedList. 
    match xs with
      inil _ -> 0
    | icons {h, i, t} -> if (== h w) then i
        else f t
    end
);

main = \xs: List. 
    let tmp4 = (repr xs) in 
        tmp4.1;
syn-comb: 0.873826
collect: 1.05928
label: 0.009981
extend-component: 0.021346
execute: 0.427574
syn-align: 1.613
comb-size: 18
align-size: 5
extract-size: 6
2.50338
Success


CList :: CList. <empty Unit | elt Int | concat {CList,CList}>
 empty : Unit ->
         CList'. <empty Unit | elt Int | concat {CList',CList'}>
 elt : Int ->
       CList'. <empty Unit | elt Int | concat {CList',CList'}>
 concat : {CList,CList} ->
          CList'. <empty Unit | elt Int | concat {CList',CList'}>
 List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
cat : List -> List -> List
repr : CList -> List'. <nil Unit | cons {Int,List'}>
all_pos : CList -> Bool
geq_head : Int -> List -> Bool
is_sorted : List -> Bool
min : Int -> Int -> Int
max : Int -> Int -> Int
spec : List -> Int
target : CList -> CList
main : CList -> Int


Inductive CList;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      empty _ -> nil Unit
    | elt w -> cons {w, nil Unit}
    | concat {l, r} -> cat (f l) (f r)
    end
);

all_pos = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      empty _ -> true
    | elt w -> > w 0
    | concat {l, r} -> and (f l) (f r)
    end
);

geq_head = \x: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> >= x h
    end
;

is_sorted = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> and (geq_head h t) (f t)
    end
);

min = \x: Int. \y: Int. 
    if (< x y) then x
    else y;

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max res.1 h, max res.2 (min res.1 h)}
    end
) xs).2;

target = fix (
    \f: CList -> Compress CList. \c: CList. 
    match c with
      empty _ -> 
        align (label c ) 
    | elt w -> 
        align (label c ) 
    | concat {l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                align (label (concat {unlabel tmp1 , unlabel tmp2 }) ) 
    end
);

main = \c: CList. 
    if (is_sorted (repr c)) then let tmp3 = (target c) in 
        align (spec (repr (unlabel tmp3 ))) 
    else 0;
align term #0: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align@0 create@0 c
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
align term #1: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align@1 create@0 c
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
  w: Int
align term #2: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align@2 create@0 concat ({unlabel tmp1,unlabel tmp2})
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
  l: CList. <empty Unit | elt Int | concat {CList,CList}>
  r: CList. <empty Unit | elt Int | concat {CList,CList}>
  tmp2: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
  tmp1: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align term #3: Int
align@3 spec (repr (unlabel tmp3))
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
  tmp3: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
Components for compress:
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  min [Int,Int] -> Int 7
  concat [(CList. <empty Unit | elt Int | concat {CList,CList}> * CList. <empty Unit | elt Int | concat {CList,CList}>)] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  elt [Int] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  max [Int,Int] -> Int 8
  empty [Bot] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  geq_head [Int,List. <nil Unit | cons {Int,List}>] -> Bool 5

Components for align:
  spec [List. <nil Unit | cons {Int,List}>] -> Int 9
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  repr [CList. <empty Unit | elt Int | concat {CList,CList}>] -> List. <nil Unit | cons {Int,List}> 3
  all_pos [CList. <empty Unit | elt Int | concat {CList,CList}>] -> Bool 4
  min [Int,Int] -> Int 7
  concat [(CList. <empty Unit | elt Int | concat {CList,CList}> * CList. <empty Unit | elt Int | concat {CList,CList}>)] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  elt [Int] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  cat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 2
  max [Int,Int] -> Int 8
  empty [Bot] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  geq_head [Int,List. <nil Unit | cons {Int,List}>] -> Bool 5
  is_sorted [List. <nil Unit | cons {Int,List}>] -> Bool 6

Components for comb:
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  min [Int,Int] -> Int 7
  concat [(CList. <empty Unit | elt Int | concat {CList,CList}> * CList. <empty Unit | elt Int | concat {CList,CList}>)] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  elt [Int] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1
  max [Int,Int] -> Int 8
  empty [Bot] -> CList. <empty Unit | elt Int | concat {CList,CList}> 0
  geq_head [Int,List. <nil Unit | cons {Int,List}>] -> Bool 5

align term #0: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align@0 create@0 c
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
align term #1: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align@1 create@0 c
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
  w: Int
align term #2: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align@2 create@0 concat ({unlabel tmp1,unlabel tmp2})
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
  l: CList. <empty Unit | elt Int | concat {CList,CList}>
  r: CList. <empty Unit | elt Int | concat {CList,CList}>
  tmp2: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
  tmp1: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
align term #3: Int
align@3 spec (repr (unlabel tmp3))
  c: CList. <empty Unit | elt Int | concat {CList,CList}>
  tmp3: compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  0
  1
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
num = 1
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 2
start: start
node: start
  Compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
  Param3
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 3
start: start
node: start
  Compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>([Param0,Param1]@Compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] CList. <empty Unit | elt Int | concat {CList,CList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  spec([Param0]@List. <nil Unit | cons {Int,List}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
node: [Param0]@Bool
  all_pos([Param0]@CList. <empty Unit | elt Int | concat {CList,CList}>)
  geq_head([Param0]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  is_sorted([Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  repr([Param0]@CList. <empty Unit | elt Int | concat {CList,CList}>)
  cat([Param0]@List. <nil Unit | cons {Int,List}> [Param0]@List. <nil Unit | cons {Int,List}>)
node: [Param0]@CList. <empty Unit | elt Int | concat {CList,CList}>
  Param0
  elt([Param0]@Int)





















  [0] spec(repr(Param0))
  [1] spec(cat(repr(Param0),repr(Param0)))
  [0] spec(repr(Param0))
  [1] spec(cat(repr(Param0),repr(Param0)))
  [0] Param1
  [0] spec(repr(Param0))
  [1] spec(cat(repr(Param0),repr(Param0)))
  [0] Param3 -> spec(repr(Param0))
  [1] Param3 -> spec(cat(repr(Param0),repr(Param0)))
  [2] Param4 -> spec(repr(Param0))
  [3] Param4 -> spec(cat(repr(Param0),repr(Param0)))
  [] null
  [0] Param1 -> spec(repr(Param0))
  [1] Param1 -> spec(cat(repr(Param0),repr(Param0)))
compress #0: {Int,Int}
pass #0: 
{0, 0}
pass #1: 
{0, max w 0}
pass #2: 
{+ (- (- (+ tmp2.1 tmp1.1) (min tmp2.1 tmp1.2)) (min tmp2.2 tmp1.1)) (min tmp2.2 tmp1.2), - (+ tmp2.2 tmp1.2) (min tmp2.2 tmp1.2)}
pass #3: 
tmp3.1

Inductive CList;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      empty _ -> nil Unit
    | elt w -> cons {w, nil Unit}
    | concat {l, r} -> cat (f l) (f r)
    end
);

all_pos = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      empty _ -> true
    | elt w -> > w 0
    | concat {l, r} -> and (f l) (f r)
    end
);

geq_head = \x: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> >= x h
    end
;

is_sorted = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> and (geq_head h t) (f t)
    end
);

min = \x: Int. \y: Int. 
    if (< x y) then x
    else y;

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max res.1 h, max res.2 (min res.1 h)}
    end
) xs).2;

target = fix (
    \f: CList -> {Int, Int}. \c: CList. 
    match c with
      empty _ -> {0, 0}
    | elt w -> {0, max w 0}
    | concat {l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                {+ (- (- (+ tmp2.1 tmp1.1) (min tmp2.1 tmp1.2)) (min tmp2.2 tmp1.1)) (min tmp2.2 tmp1.2), - (+ tmp2.2 tmp1.2) (min tmp2.2 tmp1.2)}
    end
);

main = \c: CList. 
    if (is_sorted (repr c)) then let tmp3 = (target c) in 
        tmp3.1
    else 0;
syn-comb: 1.71716
collect: 22.7447
label: 0.017283
extend-component: 0.000103
execute: 8.46154
syn-align: 31.0031
comb-size: 67
align-size: 17
extract-size: 5
32.7482
Success


List :: List. <elt Int | cons {Int,List}>
elt : Int -> List'. <elt Int | cons {Int,List'}>
cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
Pos :: Pos. <one Unit | s Pos>
one : Unit -> Pos'. <one Unit | s Pos'>
s : Pos -> Pos'. <one Unit | s Pos'>
AList :: AList. <aelt {Int,Pos} | acons {Int,Pos,AList}>
aelt : {Int,Pos} ->
       AList'. <aelt {Int,Pos} | acons {Int,Pos,AList'}>
acons : {Int,Pos,AList} ->
        AList'. <aelt {Int,Pos} | acons {Int,Pos,AList'}>
is_unique : AList -> Bool
max : Int -> Int -> Int
count : Int -> List -> Int
spec : List -> {Int, Int}
repr : AList -> List'. <elt Int | cons {Int,List'}>
p2i : Pos -> Int
target : AList -> AList
main : AList -> {Int, Int}


Inductive List;

Inductive Pos;

Inductive AList;

is_unique = let key_differ = (\key: Int. 
    fix (
    \f: AList -> Bool. \xs: AList. 
    match xs with
      aelt {h, _} -> not (== h key)
    | acons {h, _, t} -> and (not (== h key)) (f t)
    end
)) in 
        fix (
        \f: AList -> Bool. \xs: AList. 
        match xs with
          aelt _ -> true
        | acons {h, _, t} -> and (key_differ h t) (f t)
        end
    );

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

count = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt h -> if (== h w) then 1
        else 0
    | cons {h, t} -> + (if (== h w) then 1
        else 0) (f t)
    end
);

spec = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt h -> {1, h}
    | cons {h, t} -> 
        let res = (f t) in 
            let c = (count h xs) in 
                if (> c res.1) then {c, h}
                else res
    end
);

repr = let repeat = (\w: Int. \suf: List. 
    fix (
    \f: Pos -> List. \n: Pos. 
    match n with
      one _ -> cons {w, suf}
    | s m -> cons {w, f m}
    end
)) in 
        let dup = (\w: Int. 
        fix (
        \f: Pos -> List. \n: Pos. 
        match n with
          one _ -> elt w
        | s m -> cons {w, f m}
        end
    )) in 
            fix (
            \f: AList -> List. \xs: AList. 
            match xs with
              aelt {h, n} -> dup h n
            | acons {h, n, t} -> repeat h (f t) n
            end
        );

p2i = fix (
    \f: Pos -> Int. \n: Pos. 
    match n with
      one _ -> 1
    | s m -> + 1 (f m)
    end
);

target = let pos_repr = (fix (
    \f: Pos -> Compress Pos. \p: Pos. 
    match p with
      one _ -> 
        align (label p ) 
    | s m -> 
        let tmp1 = (f m) in 
            align (label (s (unlabel tmp1 )) ) 
    end
)) in 
        fix (
        \f: AList -> Compress AList. \xs: AList. 
        match xs with
          aelt {h, n} -> 
            let num = (p2i n) in 
                align (label xs ) 
        | acons {h, n, t} -> 
            let num = (p2i n) in 
                let tmp2 = (f t) in 
                    align (label (acons {h, n, unlabel tmp2 }) ) 
        end
    );

main = \xs: AList. 
    if (is_unique xs) then let tmp3 = (target xs) in 
        align (spec (repr (unlabel tmp3 ))) 
    else {0, 0};
align term #0: compress[0] Pos
align@0 create@0 p
  p: Pos. <one Unit | s Pos>
align term #1: compress[0] Pos. <one Unit | s Pos>
align@1 create@0 s (unlabel tmp1)
  p: Pos. <one Unit | s Pos>
  tmp1: compress[0] Pos. <one Unit | s Pos>
  m: Pos. <one Unit | s Pos>
align term #2: compress[1] AList
align@2 create@1 xs
  xs: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  h: Int
  num: Int
  n: Pos. <one Unit | s Pos>
align term #3: compress[1] AList. <aelt {Int,Pos} | acons {Int,Pos,AList}>
align@3 create@1 acons ({h,n,unlabel tmp2})
  tmp2: compress[1] AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  n: Pos. <one Unit | s Pos>
  num: Int
  h: Int
  t: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  xs: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
align term #4: {Int,Int}
align@4 spec (repr (unlabel tmp3))
  tmp3: compress[1] AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  xs: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
Components for compress:
  aelt [(Int*Pos. <one Unit | s Pos>)] -> AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}> 2
  s [Pos. <one Unit | s Pos>] -> Pos. <one Unit | s Pos> 1
  one [Bot] -> Pos. <one Unit | s Pos> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  acons [(Int*Pos. <one Unit | s Pos>*AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>)] -> AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}> 2
  max [Int,Int] -> Int 4

Components for align:
  aelt [(Int*Pos. <one Unit | s Pos>)] -> AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}> 2
  s [Pos. <one Unit | s Pos>] -> Pos. <one Unit | s Pos> 1
  one [Bot] -> Pos. <one Unit | s Pos> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  p2i [Pos. <one Unit | s Pos>] -> Int 8
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  acons [(Int*Pos. <one Unit | s Pos>*AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>)] -> AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}> 2
  spec [List. <elt Int | cons {Int,List}>] -> (Int*Int) 6
  repr [AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>] -> List. <elt Int | cons {Int,List}> 7
  max [Int,Int] -> Int 4
  is_unique [AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>] -> Bool 3
  count [Int,List. <elt Int | cons {Int,List}>] -> Int 5

Components for comb:
  aelt [(Int*Pos. <one Unit | s Pos>)] -> AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}> 2
  s [Pos. <one Unit | s Pos>] -> Pos. <one Unit | s Pos> 1
  one [Bot] -> Pos. <one Unit | s Pos> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int*List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  acons [(Int*Pos. <one Unit | s Pos>*AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>)] -> AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}> 2
  max [Int,Int] -> Int 4

align term #0: compress[0] Pos
align@0 create@0 p
  p: Pos. <one Unit | s Pos>
align term #1: compress[0] Pos. <one Unit | s Pos>
align@1 create@0 s (unlabel tmp1)
  p: Pos. <one Unit | s Pos>
  tmp1: compress[0] Pos. <one Unit | s Pos>
  m: Pos. <one Unit | s Pos>
align term #2: compress[1] AList
align@2 create@1 xs
  xs: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  h: Int
  num: Int
  n: Pos. <one Unit | s Pos>
  (2) {h: -5,xs: aelt (-5,one unit),n: one unit,num: 1} @ {} -> compress aelt (-5,one unit)
  (2) {h: -1,xs: aelt (-1,s s one unit),n: s s one unit,num: 3} @ {} -> compress aelt (-1,s s one unit)
  (2) {h: 1,xs: aelt (1,s one unit),n: s one unit,num: 2} @ {} -> compress aelt (1,s one unit)
  (2) {h: -3,xs: aelt (-3,s s one unit),n: s s one unit,num: 3} @ {} -> compress aelt (-3,s s one unit)
  (2) {h: 2,xs: aelt (2,one unit),n: one unit,num: 1} @ {} -> compress aelt (2,one unit)
  (2) {h: -4,xs: aelt (-4,one unit),n: one unit,num: 1} @ {} -> compress aelt (-4,one unit)
  (2) {h: 5,xs: aelt (5,s s one unit),n: s s one unit,num: 3} @ {} -> compress aelt (5,s s one unit)
  (2) {h: -3,xs: aelt (-3,one unit),n: one unit,num: 1} @ {} -> compress aelt (-3,one unit)
  (2) {h: -4,xs: aelt (-4,s s s s s one unit),n: s s s s s one unit,num: 6} @ {} -> compress aelt (-4,s s s s s one unit)
  (2) {h: -3,xs: aelt (-3,s s s one unit),n: s s s one unit,num: 4} @ {} -> compress aelt (-3,s s s one unit)
align term #3: compress[1] AList. <aelt {Int,Pos} | acons {Int,Pos,AList}>
align@3 create@1 acons ({h,n,unlabel tmp2})
  tmp2: compress[1] AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  n: Pos. <one Unit | s Pos>
  num: Int
  h: Int
  t: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  xs: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  (3) {h: -3,tmp2: compress aelt (-5,one unit),xs: acons (-3,s s one unit,aelt (-5,one unit)),t: aelt (-5,one unit),n: s s one unit,num: 3} @ {} -> compress acons (-3,s s one unit,aelt (-5,one unit))
  (3) {h: 4,tmp2: compress aelt (-1,s s one unit),xs: acons (4,s s one unit,aelt (-1,s s one unit)),t: aelt (-1,s s one unit),n: s s one unit,num: 3} @ {} -> compress acons (4,s s one unit,aelt (-1,s s one unit))
  (3) {h: -1,tmp2: compress aelt (1,s one unit),xs: acons (-1,s one unit,aelt (1,s one unit)),t: aelt (1,s one unit),n: s one unit,num: 2} @ {} -> compress acons (-1,s one unit,aelt (1,s one unit))
  (3) {h: 5,tmp2: compress acons (-1,s one unit,aelt (1,s one unit)),xs: acons (5,s one unit,acons (-1,s one unit,aelt (1,s one unit))),t: acons (-1,s one unit,aelt (1,s one unit)),n: s one unit,num: 2} @ {} -> compress acons (5,s one unit,acons (-1,s one unit,aelt (1,s one unit)))
  (3) {h: 3,tmp2: compress aelt (-3,s s one unit),xs: acons (3,one unit,aelt (-3,s s one unit)),t: aelt (-3,s s one unit),n: one unit,num: 1} @ {} -> compress acons (3,one unit,aelt (-3,s s one unit))
  (3) {h: 5,tmp2: compress aelt (2,one unit),xs: acons (5,one unit,aelt (2,one unit)),t: aelt (2,one unit),n: one unit,num: 1} @ {} -> compress acons (5,one unit,aelt (2,one unit))
  (3) {h: -1,tmp2: compress acons (5,one unit,aelt (2,one unit)),xs: acons (-1,one unit,acons (5,one unit,aelt (2,one unit))),t: acons (5,one unit,aelt (2,one unit)),n: one unit,num: 1} @ {} -> compress acons (-1,one unit,acons (5,one unit,aelt (2,one unit)))
  (3) {h: 0,tmp2: compress aelt (-4,one unit),xs: acons (0,one unit,aelt (-4,one unit)),t: aelt (-4,one unit),n: one unit,num: 1} @ {} -> compress acons (0,one unit,aelt (-4,one unit))
  (3) {h: 4,tmp2: compress aelt (-3,one unit),xs: acons (4,one unit,aelt (-3,one unit)),t: aelt (-3,one unit),n: one unit,num: 1} @ {} -> compress acons (4,one unit,aelt (-3,one unit))
  (3) {h: -4,tmp2: compress acons (4,one unit,aelt (-3,one unit)),xs: acons (-4,s one unit,acons (4,one unit,aelt (-3,one unit))),t: acons (4,one unit,aelt (-3,one unit)),n: s one unit,num: 2} @ {} -> compress acons (-4,s one unit,acons (4,one unit,aelt (-3,one unit)))
align term #4: {Int,Int}
align@4 spec (repr (unlabel tmp3))
  tmp3: compress[1] AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  xs: AList. <aelt {Int,Pos. <one Unit | s Pos>} | acons {Int,Pos. <one Unit | s Pos>,AList}>
  (4) {tmp3: compress acons (-3,s s one unit,aelt (-5,one unit)),xs: acons (-3,s s one unit,aelt (-5,one unit))} @ {} -> (3,-3)
  (4) {tmp3: compress acons (4,s s one unit,aelt (-1,s s one unit)),xs: acons (4,s s one unit,aelt (-1,s s one unit))} @ {} -> (3,-1)
  (4) {tmp3: compress acons (5,s one unit,acons (-1,s one unit,aelt (1,s one unit))),xs: acons (5,s one unit,acons (-1,s one unit,aelt (1,s one unit)))} @ {} -> (2,1)
  (4) {tmp3: compress acons (3,one unit,aelt (-3,s s one unit)),xs: acons (3,one unit,aelt (-3,s s one unit))} @ {} -> (3,-3)
  (4) {tmp3: compress acons (-1,one unit,acons (5,one unit,aelt (2,one unit))),xs: acons (-1,one unit,acons (5,one unit,aelt (2,one unit)))} @ {} -> (1,2)
  (4) {tmp3: compress acons (0,one unit,aelt (-4,one unit)),xs: acons (0,one unit,aelt (-4,one unit))} @ {} -> (1,-4)
  (4) {tmp3: compress aelt (5,s s one unit),xs: aelt (5,s s one unit)} @ {} -> (3,5)
  (4) {tmp3: compress acons (-4,s one unit,acons (4,one unit,aelt (-3,one unit))),xs: acons (-4,s one unit,acons (4,one unit,aelt (-3,one unit)))} @ {} -> (2,-4)
  (4) {tmp3: compress aelt (-4,s s s s s one unit),xs: aelt (-4,s s s s s one unit)} @ {} -> (6,-4)
  (4) {tmp3: compress aelt (-3,s s s one unit),xs: aelt (-3,s s s one unit)} @ {} -> (4,-3)


















  [0] spec(repr(Param0)).0
  [1] spec(repr(Param0)).1
  [0] Param2
  [1] Param1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] spec(repr(Param0)).0
  [1] spec(repr(Param0)).1
  [0] Param0 -> spec(repr(Param0)).0
  [1] Param0 -> spec(repr(Param0)).1
  [2] Param2
  [3] Param3
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
  [0] null
  [1] null
  [0] Param0 -> spec(repr(Param0)).0
  [1] Param0 -> spec(repr(Param0)).1
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
Academic license - for non-commercial use only - expires 2023-10-17
compress #0: Unit
compress #1: {Int,Int}
pass #0: 
unit
pass #1: 
unit
pass #2: 
{num, h}
pass #3: 
{max tmp2.1 num, if (< tmp2.1 num) then h
else tmp2.2}
pass #4: 
{tmp3.1, tmp3.2}

Inductive List;

Inductive Pos;

Inductive AList;

is_unique = let key_differ = (\key: Int. 
    fix (
    \f: AList -> Bool. \xs: AList. 
    match xs with
      aelt {h, _} -> not (== h key)
    | acons {h, _, t} -> and (not (== h key)) (f t)
    end
)) in 
        fix (
        \f: AList -> Bool. \xs: AList. 
        match xs with
          aelt _ -> true
        | acons {h, _, t} -> and (key_differ h t) (f t)
        end
    );

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

count = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt h -> if (== h w) then 1
        else 0
    | cons {h, t} -> + (if (== h w) then 1
        else 0) (f t)
    end
);

spec = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt h -> {1, h}
    | cons {h, t} -> 
        let res = (f t) in 
            let c = (count h xs) in 
                if (> c res.1) then {c, h}
                else res
    end
);

repr = let repeat = (\w: Int. \suf: List. 
    fix (
    \f: Pos -> List. \n: Pos. 
    match n with
      one _ -> cons {w, suf}
    | s m -> cons {w, f m}
    end
)) in 
        let dup = (\w: Int. 
        fix (
        \f: Pos -> List. \n: Pos. 
        match n with
          one _ -> elt w
        | s m -> cons {w, f m}
        end
    )) in 
            fix (
            \f: AList -> List. \xs: AList. 
            match xs with
              aelt {h, n} -> dup h n
            | acons {h, n, t} -> repeat h (f t) n
            end
        );

p2i = fix (
    \f: Pos -> Int. \n: Pos. 
    match n with
      one _ -> 1
    | s m -> + 1 (f m)
    end
);

target = fix (
    \f: AList -> {Int, Int}. \xs: AList. 
    match xs with
      aelt {h, n} -> 
        let num = (p2i n) in 
            {num, h}
    | acons {h, n, t} -> 
        let num = (p2i n) in 
            let tmp2 = (f t) in 
                {max tmp2.1 num, if (< tmp2.1 num) then h
                else tmp2.2}
    end
);

main = \xs: AList. 
    if (is_unique xs) then let tmp3 = (target xs) in 
        {tmp3.1, tmp3.2}
    else {0, 0};
syn-comb: 0.686901
collect: 7.50434
label: 0.02479
extend-component: 0.000852
execute: 6.57966
syn-align: 14.1403
14.8689
Success

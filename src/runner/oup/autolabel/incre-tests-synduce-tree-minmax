
Tree :: Tree. <leaf Int | node {Int,Tree,Tree}>
 leaf : Int -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <leaf Int | node {Int,Tree',Tree'}>
 max : Int -> Int -> Int
min : Int -> Int -> Int
g : {Int,Int} -> Tree -> {Int, Int}
spec : Tree -> {Int, Int}
repr : Tree -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
main : Tree -> {Int, Int}


Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

g = fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \x: {Int, Int}. \t: Tree. 
    match t with
      leaf a -> {min a x.1, max a x.2}
    | node {a, l, r} -> f (f {min a x.1, max a x.2} l) r
    end
);

spec = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {x, x}
    | node {a, l, r} -> 
        let result = (g {a, a} l) in 
            g {result.1, result.2} r
    end
);

repr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf a -> 
        let tmp1 = (leaf a) in 
            align (label tmp1 ) 
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {a, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        align (spec (unlabel tmp4 )) ;
align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: {Int,Int}
align@2 spec (unlabel tmp4)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
Components for compress:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 1
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 2

Components for align:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 1
  g [(Int * Int),Tree. <leaf Int | node {Int,Tree,Tree}>] -> (Int * Int) 3
  spec [Tree. <leaf Int | node {Int,Tree,Tree}>] -> (Int * Int) 4
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 2

Components for comb:
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 1
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 2

align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,unlabel tmp2,unlabel tmp3})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: {Int,Int}
align@2 spec (unlabel tmp4)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param3
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  min([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
  min([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  access0([Int@0]@(Int * Int))
  access1([Int@0]@(Int * Int))
  max([Int@0]@Int [Int@0]@Int)
  min([Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Int
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  -([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  access0([Int@0,Int@1,Int@2]@(Int * Int))
  access1([Int@0,Int@1,Int@2]@(Int * Int))
  max([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  min([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  access0([Param0]@(Int * Int))
  access1([Param0]@(Int * Int))
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1,Int@2]@Int [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  max([Param0]@Int [Param0]@Int)
  min([Param0]@Int [Param0]@Int)
node: [Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0]@Int)
node: [Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Int@1,Int@2]@Int)
node: [Param0]@(Int * Int)
  prod([Param0]@Int [Param0]@Int)
  g([Param0]@(Int * Int) [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0]@(Int * Int)
  prod([Int@0]@Int [Int@0]@Int)
  g([Int@0]@(Int * Int) [Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Int@0]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2]@(Int * Int)
  prod([Int@0,Int@1,Int@2]@Int [Int@0,Int@1,Int@2]@Int)
  g([Int@0,Int@1,Int@2]@(Int * Int) [Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Int@0,Int@1,Int@2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0]@Tree. <leaf Int | node {Int,Tree,Tree}>
  Param0
  leaf([Param0]@Int)


















  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param2
  [0] spec(Param0).0
  [1] spec(Param0).1
  [0] Param2 -> spec(Param0).0
  [1] Param2 -> spec(Param0).1
  [2] Param4 -> spec(Param0).0
  [3] Param4 -> spec(Param0).1
  [4] Param3
  [0] null
  [1] null
  [0] Param1 -> spec(Param0).0
  [1] Param1 -> spec(Param0).1
compress #0: {Int,Int}
pass #0: 
{a, a}
pass #1: 
{min tmp3.1 (min tmp2.1 a), max tmp3.2 (max tmp2.2 a)}
pass #2: 
{tmp4.1, tmp4.2}

Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

g = fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \x: {Int, Int}. \t: Tree. 
    match t with
      leaf a -> {min a x.1, max a x.2}
    | node {a, l, r} -> f (f {min a x.1, max a x.2} l) r
    end
);

spec = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {x, x}
    | node {a, l, r} -> 
        let result = (g {a, a} l) in 
            g {result.1, result.2} r
    end
);

repr = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf a -> {a, a}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {min tmp3.1 (min tmp2.1 a), max tmp3.2 (max tmp2.2 a)}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        {tmp4.1, tmp4.2};
syn-comb: 0.859782
collect: 1.45826
label: 0.013779
extend-component: 0.000283
execute: 2.97571
syn-align: 4.32511
comb-size: 31
align-size: 9
extract-size: 6
5.20564
Success

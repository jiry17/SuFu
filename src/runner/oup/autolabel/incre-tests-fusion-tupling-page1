
Tree :: Tree. <leaf Int | node {Tree,Tree}>
leaf : Int -> Tree'. <leaf Int | node {Tree',Tree'}>
node : {Tree,Tree} -> Tree'. <leaf Int | node {Tree',Tree'}>
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
cat : List -> List -> List
max : Int -> Int -> Int
depth : Tree -> Int
deepest : Tree -> {List'. <nil Unit | cons {Int,List'}>, Tree}
main : Tree -> List'. <nil Unit | cons {Int,List'}>


Inductive Tree;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

depth = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> 0
    | node {l, r} -> + 1 (max (f l) (f r))
    end
);

deepest = fix (
    \f: Tree -> {List, Compress Tree}. \t: Tree. 
    match t with
      leaf w -> {cons {w, nil Unit}, align (label t ) }
    | node {l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                if (> (let tmp1 = lres.2 in 
                    align (depth (unlabel tmp1 )) ) (let tmp2 = rres.2 in 
                    align (depth (unlabel tmp2 )) )) then {lres.1, align (label t ) }
                else if (== (let tmp3 = lres.2 in 
                    align (depth (unlabel tmp3 )) ) (let tmp4 = rres.2 in 
                    align (depth (unlabel tmp4 )) )) then {cat lres.1 rres.1, align (label t ) }
                else {rres.1, align (label t ) }
    end
);

main = \t: Tree. 
    (deepest t).1;
align term #0: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@0 create@0 t
  w: Int
  t: Tree. <leaf Int | node {Tree,Tree}>
align term #1: Int
align@1 depth (unlabel tmp1)
  l: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  tmp1: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #2: Int
align@2 depth (unlabel tmp2)
  tmp2: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #3: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@3 create@0 t
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
align term #4: Int
align@4 depth (unlabel tmp3)
  tmp3: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  l: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #5: Int
align@5 depth (unlabel tmp4)
  l: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #6: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@6 create@0 t
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
align term #7: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@7 create@0 t
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
Components for compress:
  max [Int,Int] -> Int 3
  leaf [Int] -> Tree. <leaf Int | node {Tree,Tree}> 0
  node [(Tree. <leaf Int | node {Tree,Tree}> * Tree. <leaf Int | node {Tree,Tree}>)] -> Tree. <leaf Int | node {Tree,Tree}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1

Components for align:
  max [Int,Int] -> Int 3
  leaf [Int] -> Tree. <leaf Int | node {Tree,Tree}> 0
  node [(Tree. <leaf Int | node {Tree,Tree}> * Tree. <leaf Int | node {Tree,Tree}>)] -> Tree. <leaf Int | node {Tree,Tree}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  depth [Tree. <leaf Int | node {Tree,Tree}>] -> Int 4
  cat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1

Components for comb:
  max [Int,Int] -> Int 3
  leaf [Int] -> Tree. <leaf Int | node {Tree,Tree}> 0
  node [(Tree. <leaf Int | node {Tree,Tree}> * Tree. <leaf Int | node {Tree,Tree}>)] -> Tree. <leaf Int | node {Tree,Tree}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1

align term #0: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@0 create@0 t
  w: Int
  t: Tree. <leaf Int | node {Tree,Tree}>
align term #1: Int
align@1 depth (unlabel tmp1)
  l: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  tmp1: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #2: Int
align@2 depth (unlabel tmp2)
  tmp2: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #3: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@3 create@0 t
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
align term #4: Int
align@4 depth (unlabel tmp3)
  tmp3: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  l: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #5: Int
align@5 depth (unlabel tmp4)
  l: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Tree,Tree}>
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
align term #6: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@6 create@0 t
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
align term #7: compress[0] Tree. <leaf Int | node {Tree,Tree}>
align@7 create@0 t
  r: Tree. <leaf Int | node {Tree,Tree}>
  rres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  t: Tree. <leaf Int | node {Tree,Tree}>
  lres: {List. <nil Unit | cons {Int,List}>,compress[0] Tree. <leaf Int | node {Tree,Tree}>}
  l: Tree. <leaf Int | node {Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param0
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param1
  Param5
  prod([Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  Param3
  access1([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param2
  Param5
  prod([Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  Param0
  access1([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param1
  Param3
  prod([Param0,Param1,Param2,Param3,Param4]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  access1([Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 4
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param2
  Param5
  prod([Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  Param0
  access1([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 5
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param1
  Param5
  prod([Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  Param3
  access1([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4,Param5]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 6
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param1
  Param3
  prod([Param0,Param1,Param2,Param3,Param4]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  access1([Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 7
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
  Compress[0] Tree. <leaf Int | node {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
  Param1
  Param3
  prod([Param0,Param1,Param2,Param3,Param4]@List. <nil Unit | cons {Int,List}> [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@List. <nil Unit | cons {Int,List}>
  access0([Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | node {Tree,Tree}>
  access1([Param0,Param1,Param2,Param3,Param4]@(List. <nil Unit | cons {Int,List}> * Compress[0] Tree. <leaf Int | node {Tree,Tree}>))
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
  depth([Int@0]@Tree. <leaf Int | node {Tree,Tree}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  depth([Int@0,Int@1]@Tree. <leaf Int | node {Tree,Tree}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[Tree. <leaf Int | node {Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@Tree. <leaf Int | node {Tree,Tree}>)
  max([Param0]@Int [Param0]@Int)
  depth([Param0]@Tree. <leaf Int | node {Tree,Tree}>)
node: [Int@0]@Tree. <leaf Int | node {Tree,Tree}>
  leaf([Int@0]@Int)
node: [Int@0,Int@1]@Tree. <leaf Int | node {Tree,Tree}>
  leaf([Int@0,Int@1]@Int)
node: [Param0]@Tree. <leaf Int | node {Tree,Tree}>
  Param0
  leaf([Param0]@Int)
























  [] depth(Param0)
  [] null
  [0] Param3 -> depth(Param0)
  [] null
  [0] Param0 -> depth(Param0)
  [] depth(Param0)
  [0] Param3.1 -> depth(Param0)
  [] null
  [0] Param0 -> depth(Param0)
  [] null
  [0] Param3 -> depth(Param0)
  [] depth(Param0)
  [0] Param1.1 -> depth(Param0)
  [] depth(Param0)
  [0] Param1.1 -> depth(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
tmp1
pass #2: 
tmp2
pass #3: 
let c0 = lres.2 in 
    + c0 (max 0 1)
pass #4: 
tmp3
pass #5: 
tmp4
pass #6: 
let c0 = rres.2 in 
    + 1 c0
pass #7: 
let c0 = rres.2 in 
    + c0 1

Inductive Tree;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

depth = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> 0
    | node {l, r} -> + 1 (max (f l) (f r))
    end
);

deepest = fix (
    \f: Tree -> {List, Int}. \t: Tree. 
    match t with
      leaf w -> {cons {w, nil Unit}, 0}
    | node {l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                if (> (let tmp1 = lres.2 in 
                    tmp1) (let tmp2 = rres.2 in 
                    tmp2)) then {lres.1, let c0 = lres.2 in 
                    + c0 (max 0 1)}
                else if (== (let tmp3 = lres.2 in 
                    tmp3) (let tmp4 = rres.2 in 
                    tmp4)) then {cat lres.1 rres.1, let c0 = rres.2 in 
                    + 1 c0}
                else {rres.1, let c0 = rres.2 in 
                    + c0 1}
    end
);

main = \t: Tree. 
    (deepest t).1;
syn-comb: 0.177379
collect: 5.24357
label: 0.017445
extend-component: 4.8e-05
execute: 0.939419
syn-align: 6.32091
comb-size: 33
align-size: 3
extract-size: 10
6.52466
Success


List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 CList :: CList. <single Int | concat {CList,CList}>
single : Int -> CList'. <single Int | concat {CList',CList'}>
concat : {CList,CList} ->
         CList'. <single Int | concat {CList',CList'}>
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : CList -> List'. <elt Int | cons {Int,List'}>
max : Int -> Int -> Int
lmax : CList -> Int
min : Int -> Int -> Int
lmin : CList -> Int
is_part : CList -> Bool
spec : List -> Int
target : CList -> CList
main : CList -> Int


Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt x -> cons {x, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      single x -> elt x
    | concat {a, b} -> cat (f a) (f b)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

lmax = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single x -> x
    | concat {x, y} -> max (f x) (f y)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

lmin = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single x -> x
    | concat {x, y} -> min (f x) (f y)
    end
);

is_part = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      single w -> true
    | concat {x, y} -> and (< (lmax x) (lmin y)) (and (f x) (f y))
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> min h (f t)
    end
);

target = fix (
    \f: CList -> Compress CList. \c: CList. 
    match c with
      single w -> 
        align (label c ) 
    | concat {x, y} -> 
        let tmp1 = (f x) in 
            align (label (concat {unlabel tmp1 , y}) ) 
    end
);

main = \xs: CList. 
    if (is_part xs) then let tmp2 = (target xs) in 
        align (spec (repr (unlabel tmp2 ))) 
    else 0;
align term #0: compress[0] CList. <single Int | concat {CList,CList}>
align@0 create@0 c
  c: CList. <single Int | concat {CList,CList}>
  w: Int
align term #1: compress[0] CList. <single Int | concat {CList,CList}>
align@1 create@0 concat ({unlabel tmp1,y})
  c: CList. <single Int | concat {CList,CList}>
  x: CList. <single Int | concat {CList,CList}>
  tmp1: compress[0] CList. <single Int | concat {CList,CList}>
  y: CList. <single Int | concat {CList,CList}>
align term #2: Int
align@2 spec (repr (unlabel tmp2))
  xs: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] CList. <single Int | concat {CList,CList}>
Components for compress:
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 6
  max [Int,Int] -> Int 4

Components for align:
  spec [List. <elt Int | cons {Int,List}>] -> Int 9
  cat [List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>] -> List. <elt Int | cons {Int,List}> 2
  lmin [CList. <single Int | concat {CList,CList}>] -> Int 7
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  is_part [CList. <single Int | concat {CList,CList}>] -> Bool 8
  repr [CList. <single Int | concat {CList,CList}>] -> List. <elt Int | cons {Int,List}> 3
  min [Int,Int] -> Int 6
  max [Int,Int] -> Int 4
  lmax [CList. <single Int | concat {CList,CList}>] -> Int 5

Components for comb:
  concat [(CList. <single Int | concat {CList,CList}> * CList. <single Int | concat {CList,CList}>)] -> CList. <single Int | concat {CList,CList}> 1
  single [Int] -> CList. <single Int | concat {CList,CList}> 1
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  min [Int,Int] -> Int 6
  max [Int,Int] -> Int 4

align term #0: compress[0] CList. <single Int | concat {CList,CList}>
align@0 create@0 c
  c: CList. <single Int | concat {CList,CList}>
  w: Int
align term #1: compress[0] CList. <single Int | concat {CList,CList}>
align@1 create@0 concat ({unlabel tmp1,y})
  c: CList. <single Int | concat {CList,CList}>
  x: CList. <single Int | concat {CList,CList}>
  tmp1: compress[0] CList. <single Int | concat {CList,CList}>
  y: CList. <single Int | concat {CList,CList}>
align term #2: Int
align@2 spec (repr (unlabel tmp2))
  xs: CList. <single Int | concat {CList,CList}>
  tmp2: compress[0] CList. <single Int | concat {CList,CList}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 1
start: start
node: start
  Compress[0] CList. <single Int | concat {CList,CList}>([Param0,Param1,Param2,Param3]@Compress[0] CList. <single Int | concat {CList,CList}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Compress[0] CList. <single Int | concat {CList,CList}>
  Param2
node: [Param0,Param1,Param2,Param3]@Int
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 2
start: start
node: start
  Compress[0] CList. <single Int | concat {CList,CList}>([Param0,Param1]@Compress[0] CList. <single Int | concat {CList,CList}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] CList. <single Int | concat {CList,CList}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  min([Param0,Param1]@Int [Param0,Param1]@Int)
  max([Param0,Param1]@Int [Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
  spec([Int@0]@List. <elt Int | cons {Int,List}>)
  lmin([Int@0]@CList. <single Int | concat {CList,CList}>)
  min([Int@0]@Int [Int@0]@Int)
  max([Int@0]@Int [Int@0]@Int)
  lmax([Int@0]@CList. <single Int | concat {CList,CList}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  spec([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  lmin([Int@0,Int@1]@CList. <single Int | concat {CList,CList}>)
  min([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  lmax([Int@0,Int@1]@CList. <single Int | concat {CList,CList}>)
node: [Bool@0,Bool@1]@Bool
  Bool@0
  Bool@1
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[CList. <single Int | concat {CList,CList}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@CList. <single Int | concat {CList,CList}>)
  spec([Param0]@List. <elt Int | cons {Int,List}>)
  lmin([Param0]@CList. <single Int | concat {CList,CList}>)
  min([Param0]@Int [Param0]@Int)
  max([Param0]@Int [Param0]@Int)
  lmax([Param0]@CList. <single Int | concat {CList,CList}>)
node: [Param0]@Bool
  fold[CList. <single Int | concat {CList,CList}>->Bool]([Int@0]@Bool [Bool@0,Bool@1]@Bool [Param0]@CList. <single Int | concat {CList,CList}>)
  is_part([Param0]@CList. <single Int | concat {CList,CList}>)
node: [Int@0]@Bool
  is_part([Int@0]@CList. <single Int | concat {CList,CList}>)
node: [Int@0,Int@1]@Bool
  is_part([Int@0,Int@1]@CList. <single Int | concat {CList,CList}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  cat([Param0]@List. <elt Int | cons {Int,List}> [Param0]@List. <elt Int | cons {Int,List}>)
  elt([Param0]@Int)
  repr([Param0]@CList. <single Int | concat {CList,CList}>)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  cat([Int@0]@List. <elt Int | cons {Int,List}> [Int@0]@List. <elt Int | cons {Int,List}>)
  elt([Int@0]@Int)
  repr([Int@0]@CList. <single Int | concat {CList,CList}>)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  cat([Int@0,Int@1]@List. <elt Int | cons {Int,List}> [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  elt([Int@0,Int@1]@Int)
  repr([Int@0,Int@1]@CList. <single Int | concat {CList,CList}>)
node: [Int@0]@CList. <single Int | concat {CList,CList}>
  single([Int@0]@Int)
node: [Int@0,Int@1]@CList. <single Int | concat {CList,CList}>
  single([Int@0,Int@1]@Int)
node: [Param0]@CList. <single Int | concat {CList,CList}>
  Param0
  single([Param0]@Int)









  [] lmin(Param0)
  [0] Param1
  [] lmin(Param0)
  [0] Param2 -> lmin(Param0)
  [] null
  [0] Param1 -> lmin(Param0)
compress #0: Int
pass #0: 
w
pass #1: 
tmp1
pass #2: 
tmp2

Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      elt x -> cons {x, b}
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      single x -> elt x
    | concat {a, b} -> cat (f a) (f b)
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

lmax = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single x -> x
    | concat {x, y} -> max (f x) (f y)
    end
);

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

lmin = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      single x -> x
    | concat {x, y} -> min (f x) (f y)
    end
);

is_part = fix (
    \f: CList -> Bool. \c: CList. 
    match c with
      single w -> true
    | concat {x, y} -> and (< (lmax x) (lmin y)) (and (f x) (f y))
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> min h (f t)
    end
);

target = fix (
    \f: CList -> Int. \c: CList. 
    match c with
      single w -> w
    | concat {x, y} -> 
        let tmp1 = (f x) in 
            tmp1
    end
);

main = \xs: CList. 
    if (is_part xs) then let tmp2 = (target xs) in 
        tmp2
    else 0;
syn-comb: 0.10949
collect: 6.52679
label: 0.014913
extend-component: 0
execute: 0.031794
syn-align: 6.56602
comb-size: 3
align-size: 3
extract-size: 3
6.69952
Success

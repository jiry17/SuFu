
Tree :: Tree. <leaf Int | node {Int,Tree,Tree}>
leaf : Int -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
node : {Int,Tree,Tree} ->
       Tree'. <leaf Int | node {Int,Tree',Tree'}>
min : Int -> Int -> Int
max : Int -> Int -> Int
tmin : Tree -> Int
tmax : Tree -> Int
is_bst : Tree -> Bool
lo : Int
hi : Int
spec : Tree -> Int
target : Tree -> Tree'. <leaf Int | node {Int,Tree',Tree'}>
main : Tree -> Int


Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

@Input lo = Int;

@Input hi = Int;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf a -> if (and (> hi a) (> a lo)) then a
        else 0
    | node {a, l, r} -> + (if (and (> hi a) (> a lo)) then a
        else 0) (+ (f l) (f r))
    end
);

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf x -> 
        let tmp1 = (leaf x) in 
            align (label tmp1 ) 
    | node {a, l, r} -> if (< a lo) then let tmp2 = (f r) in 
            align (label (node {a, l, unlabel tmp2 }) ) 
        else if (> a hi) then let tmp3 = (f l) in 
            align (label (node {a, unlabel tmp3 , r}) ) 
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                align (label (node {a, unlabel tmp4 , unlabel tmp5 }) ) 
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp6 = (target t) in 
        align (spec (unlabel tmp6 )) 
    else 0;
align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  x: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,l,unlabel tmp2})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@2 create@0 node ({a,unlabel tmp3,r})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align term #3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@3 create@0 node ({a,unlabel tmp4,unlabel tmp5})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp5: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #4: Int
align@4 spec (unlabel tmp6)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp6: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
Components for compress:
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 2

Components for align:
  spec [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 8
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 1
  tmax [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 4
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 2
  is_bst [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Bool 5
  tmin [Tree. <leaf Int | node {Int,Tree,Tree}>] -> Int 3

Components for comb:
  node [(Int * Tree. <leaf Int | node {Int,Tree,Tree}> * Tree. <leaf Int | node {Int,Tree,Tree}>)] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  min [Int,Int] -> Int 1
  leaf [Int] -> Tree. <leaf Int | node {Int,Tree,Tree}> 0
  max [Int,Int] -> Int 2

align term #0: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  tmp1: Tree. <leaf Int | node {Int,Tree,Tree}>
  x: Int
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@1 create@0 node ({a,l,unlabel tmp2})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #2: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@2 create@0 node ({a,unlabel tmp3,r})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align term #3: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
align@3 create@0 node ({a,unlabel tmp4,unlabel tmp5})
  r: Tree. <leaf Int | node {Int,Tree,Tree}>
  a: Int
  l: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp5: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
align term #4: Int
align@4 spec (unlabel tmp6)
  t: Tree. <leaf Int | node {Int,Tree,Tree}>
  tmp6: compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param1
  Param3
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  max([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param2
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int
  Param3
  Param5
  Param6
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int
  Param2
  Param5
  Param6
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param4
num = 3
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int
  Param1
  Param6
  Param7
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
  max([Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param3
  Param4
num = 4
start: start
node: start
  Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Compress[0] Tree. <leaf Int | node {Int,Tree,Tree}>
  Param1
node: [Param0,Param1,Param2,Param3]@Int
  Param2
  Param3
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  min([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  max([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
  Bool([Param0,Param1,Param2]@Bool)
node: [Param0,Param1,Param2]@Int
  Param1
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  ite([Param0,Param1,Param2]@Bool [Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Int]([Int@0,Param1,Param2]@Int [Int@0,Int@1,Int@2,Param1,Param2]@Int [Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  spec([Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  tmax([Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  tmin([Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Param1,Param2]@Int
  Param1
  Param2
  Int@0
  +([Int@0,Param1,Param2]@Int [Int@0,Param1,Param2]@Int)
  -([Int@0,Param1,Param2]@Int [Int@0,Param1,Param2]@Int)
  ite([Int@0,Param1,Param2]@Bool [Int@0,Param1,Param2]@Int [Int@0,Param1,Param2]@Int)
  spec([Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Int@0,Param1,Param2]@Int [Int@0,Param1,Param2]@Int)
  tmax([Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  max([Int@0,Param1,Param2]@Int [Int@0,Param1,Param2]@Int)
  tmin([Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2,Param1,Param2]@Int
  Param1
  Param2
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1,Param2]@Int [Int@0,Int@1,Int@2,Param1,Param2]@Int)
  -([Int@0,Int@1,Int@2,Param1,Param2]@Int [Int@0,Int@1,Int@2,Param1,Param2]@Int)
  ite([Int@0,Int@1,Int@2,Param1,Param2]@Bool [Int@0,Int@1,Int@2,Param1,Param2]@Int [Int@0,Int@1,Int@2,Param1,Param2]@Int)
  spec([Int@0,Int@1,Int@2,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Int@0,Int@1,Int@2,Param1,Param2]@Int [Int@0,Int@1,Int@2,Param1,Param2]@Int)
  tmax([Int@0,Int@1,Int@2,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  max([Int@0,Int@1,Int@2,Param1,Param2]@Int [Int@0,Int@1,Int@2,Param1,Param2]@Int)
  tmin([Int@0,Int@1,Int@2,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Bool@0,Bool@1,Int@0,Param1,Param2]@Int
  Param1
  Param2
  Int@0
  +([Bool@0,Bool@1,Int@0,Param1,Param2]@Int [Bool@0,Bool@1,Int@0,Param1,Param2]@Int)
  -([Bool@0,Bool@1,Int@0,Param1,Param2]@Int [Bool@0,Bool@1,Int@0,Param1,Param2]@Int)
  ite([Bool@0,Bool@1,Int@0,Param1,Param2]@Bool [Bool@0,Bool@1,Int@0,Param1,Param2]@Int [Bool@0,Bool@1,Int@0,Param1,Param2]@Int)
  spec([Bool@0,Bool@1,Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  min([Bool@0,Bool@1,Int@0,Param1,Param2]@Int [Bool@0,Bool@1,Int@0,Param1,Param2]@Int)
  tmax([Bool@0,Bool@1,Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  max([Bool@0,Bool@1,Int@0,Param1,Param2]@Int [Bool@0,Bool@1,Int@0,Param1,Param2]@Int)
  tmin([Bool@0,Bool@1,Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Bool@0,Bool@1,Int@0,Param1,Param2]@Bool
  Bool@0
  Bool@1
  is_bst([Bool@0,Bool@1,Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Param0,Param1,Param2]@Bool
  fold[Tree. <leaf Int | node {Int,Tree,Tree}>->Bool]([Int@0,Param1,Param2]@Bool [Bool@0,Bool@1,Int@0,Param1,Param2]@Bool [Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
  is_bst([Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Param1,Param2]@Bool
  is_bst([Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Int@1,Int@2,Param1,Param2]@Bool
  is_bst([Int@0,Int@1,Int@2,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>)
node: [Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Param1,Param2]@Int)
node: [Int@0,Int@1,Int@2,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Int@0,Int@1,Int@2,Param1,Param2]@Int)
node: [Bool@0,Bool@1,Int@0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  leaf([Bool@0,Bool@1,Int@0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Tree. <leaf Int | node {Int,Tree,Tree}>
  Param0
  leaf([Param0,Param1,Param2]@Int)



























  [0] spec(Param0)
  [1] Param1
  [0] Param4
  [1] Param1
  [2] Param3
  [0] spec(Param0)
  [1] Param1
  [0] Param2 -> spec(Param0)
  [1] Param2 -> Param1
  [0] spec(Param0)
  [1] Param1
  [0] Param4 -> spec(Param0)
  [1] Param4 -> Param1
  [2] Param5
  [0] spec(Param0)
  [1] Param1
  [0] Param1
  [1] Param7
  [2] Param3 -> spec(Param0)
  [3] Param3 -> Param1
  [4] Param4 -> spec(Param0)
  [5] Param4 -> Param1
  [6] Param6
  [] null
  [0] Param1 -> spec(Param0)
  [1] Param1 -> Param1
compress #0: {Int,Int}
pass #0: 
{if (or (<= hi x) (<= x lo)) then 0
else x, lo}
pass #1: 
{tmp2.1, tmp2.2}
pass #2: 
{tmp3.1, lo}
pass #3: 
{if (and (< tmp5.1 (+ tmp5.1 tmp4.1)) (< a hi)) then + a (max (+ tmp5.1 tmp4.1) 1)
else if (or (== a hi) (== a tmp4.2)) then + tmp5.1 tmp4.1
else + a (min (+ tmp5.1 tmp4.1) tmp5.1), lo}
pass #4: 
tmp6.1

Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

@Input lo = Int;

@Input hi = Int;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf a -> if (and (> hi a) (> a lo)) then a
        else 0
    | node {a, l, r} -> + (if (and (> hi a) (> a lo)) then a
        else 0) (+ (f l) (f r))
    end
);

target = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {if (or (<= hi x) (<= x lo)) then 0
        else x, lo}
    | node {a, l, r} -> if (< a lo) then let tmp2 = (f r) in 
            {tmp2.1, tmp2.2}
        else if (> a hi) then let tmp3 = (f l) in 
            {tmp3.1, lo}
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                {if (and (< tmp5.1 (+ tmp5.1 tmp4.1)) (< a hi)) then + a (max (+ tmp5.1 tmp4.1) 1)
                else if (or (== a hi) (== a tmp4.2)) then + tmp5.1 tmp4.1
                else + a (min (+ tmp5.1 tmp4.1) tmp5.1), lo}
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp6 = (target t) in 
        tmp6.1
    else 0;
syn-comb: 2.11521
collect: 23.0946
label: 0.02025
extend-component: 0.314555
execute: 0.951672
syn-align: 24.3509
comb-size: 105
align-size: 5
extract-size: 15
26.4949
Success

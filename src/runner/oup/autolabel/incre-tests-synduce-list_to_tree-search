
Tree :: Tree. <empty Unit | node {Int,Tree,Tree}>
 empty : Unit -> Tree'. <empty Unit | node {Int,Tree',Tree'}>
 node : {Int,Tree,Tree} ->
        Tree'. <empty Unit | node {Int,Tree',Tree'}>
 List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
cat : List -> List -> List'. <nil Unit | cons {Int,List'}>
repr : Tree -> List'. <nil Unit | cons {Int,List'}>
target : Tree -> Tree'. <empty Unit | node {Int,Tree',Tree'}>
x : Int
spec : List -> Bool
main : Tree -> Bool


Inductive Tree;

Inductive List;

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = let dec = (fix (
    \f: List -> Tree -> List. \res: List. \t: Tree. 
    match t with
      empty _ -> res
    | node {w, l, r} -> f (cons {w, f res l}) r
    end
)) in 
        fix (
        \f: Tree -> List. \t: Tree. 
        match t with
          empty _ -> nil Unit
        | node {w, l, r} -> dec (cons {w, f l}) r
        end
    );

target = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      empty _ -> 
        let tmp1 = (empty Unit) in 
            align (label tmp1 ) 
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (node {w, unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

@Input x = Int;

spec = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> false
    | cons {h, t} -> if (== h x) then true
        else f t
    end
);

main = \xs: Tree. 
    let tmp4 = (target xs) in 
        align (spec (repr (unlabel tmp4 ))) ;
align term #0: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <empty Unit | node {Int,Tree,Tree}>
  tmp1: Tree. <empty Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
align@1 create@0 node ({w,unlabel tmp2,unlabel tmp3})
  tmp3: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  l: Tree. <empty Unit | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  w: Int
  t: Tree. <empty Unit | node {Int,Tree,Tree}>
  r: Tree. <empty Unit | node {Int,Tree,Tree}>
align term #2: Bool
align@2 spec (repr (unlabel tmp4))
  tmp4: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  xs: Tree. <empty Unit | node {Int,Tree,Tree}>
Components for compress:
  empty [Bot] -> Tree. <empty Unit | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <empty Unit | node {Int,Tree,Tree}> * Tree. <empty Unit | node {Int,Tree,Tree}>)] -> Tree. <empty Unit | node {Int,Tree,Tree}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1

Components for align:
  empty [Bot] -> Tree. <empty Unit | node {Int,Tree,Tree}> 0
  spec [List. <nil Unit | cons {Int,List}>] -> Bool 6
  repr [Tree. <empty Unit | node {Int,Tree,Tree}>] -> List. <nil Unit | cons {Int,List}> 3
  node [(Int * Tree. <empty Unit | node {Int,Tree,Tree}> * Tree. <empty Unit | node {Int,Tree,Tree}>)] -> Tree. <empty Unit | node {Int,Tree,Tree}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cat [List. <nil Unit | cons {Int,List}>,List. <nil Unit | cons {Int,List}>] -> List. <nil Unit | cons {Int,List}> 2
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1

Components for comb:
  empty [Bot] -> Tree. <empty Unit | node {Int,Tree,Tree}> 0
  node [(Int * Tree. <empty Unit | node {Int,Tree,Tree}> * Tree. <empty Unit | node {Int,Tree,Tree}>)] -> Tree. <empty Unit | node {Int,Tree,Tree}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 1
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 1

align term #0: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <empty Unit | node {Int,Tree,Tree}>
  tmp1: Tree. <empty Unit | node {Int,Tree,Tree}>
align term #1: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
align@1 create@0 node ({w,unlabel tmp2,unlabel tmp3})
  tmp3: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  l: Tree. <empty Unit | node {Int,Tree,Tree}>
  tmp2: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  w: Int
  t: Tree. <empty Unit | node {Int,Tree,Tree}>
  r: Tree. <empty Unit | node {Int,Tree,Tree}>
align term #2: Bool
align@2 spec (repr (unlabel tmp4))
  tmp4: compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  xs: Tree. <empty Unit | node {Int,Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int
  Param3
  Param6
  +([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3,Param4,Param5,Param6]@Compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  Param0
  Param2
num = 2
start: start
node: start
  Compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>([Param0,Param1,Param2]@Compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
node: [Param0,Param1,Param2]@Compress[0] Tree. <empty Unit | node {Int,Tree,Tree}>
  Param0
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
  Bool([Param0,Param1]@Bool)
node: [Param0,Param1]@Int
  Param1
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  ite([Param0,Param1]@Bool [Param0,Param1]@Int [Param0,Param1]@Int)
  fold[Tree. <empty Unit | node {Int,Tree,Tree}>->Int]([Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int [Param0,Param1]@Tree. <empty Unit | node {Int,Tree,Tree}>)
node: [Param1]@Int
  Param1
  +([Param1]@Int [Param1]@Int)
  -([Param1]@Int [Param1]@Int)
node: [Int@0,Int@1,Int@2,Param1]@Int
  Param1
  Int@0
  Int@1
  Int@2
  +([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
  -([Int@0,Int@1,Int@2,Param1]@Int [Int@0,Int@1,Int@2,Param1]@Int)
node: [Param0,Param1]@Bool
  spec([Param0,Param1]@List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1]@List. <nil Unit | cons {Int,List}>
  repr([Param0,Param1]@Tree. <empty Unit | node {Int,Tree,Tree}>)
  cat([Param0,Param1]@List. <nil Unit | cons {Int,List}> [Param0,Param1]@List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1]@Tree. <empty Unit | node {Int,Tree,Tree}>
  Param0















  [0] spec(repr(Param0))
  [1] Param1
  [0] Param2
  [0] spec(repr(Param0))
  [1] Param1
  [0] Param3
  [1] Param0 -> spec(repr(Param0))
  [2] Param0 -> Param1
  [3] Param2 -> spec(repr(Param0))
  [4] Param2 -> Param1
  [] null
  [0] Param0 -> spec(repr(Param0))
  [1] Param0 -> Param1
compress #0: {Bool,Int}
pass #0: 
{false, x}
pass #1: 
{or (or (== w tmp2.2) tmp3.1) tmp2.1, tmp2.2}
pass #2: 
tmp4.1

Inductive Tree;

Inductive List;

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = let dec = (fix (
    \f: List -> Tree -> List. \res: List. \t: Tree. 
    match t with
      empty _ -> res
    | node {w, l, r} -> f (cons {w, f res l}) r
    end
)) in 
        fix (
        \f: Tree -> List. \t: Tree. 
        match t with
          empty _ -> nil Unit
        | node {w, l, r} -> dec (cons {w, f l}) r
        end
    );

target = fix (
    \f: Tree -> {Bool, Int}. \t: Tree. 
    match t with
      empty _ -> {false, x}
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {or (or (== w tmp2.2) tmp3.1) tmp2.1, tmp2.2}
    end
);

@Input x = Int;

spec = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> false
    | cons {h, t} -> if (== h x) then true
        else f t
    end
);

main = \xs: Tree. 
    let tmp4 = (target xs) in 
        tmp4.1;
syn-comb: 0.536618
collect: 3.2637
label: 0.01129
extend-component: 0.000749
execute: 1.29057
syn-align: 4.85251
comb-size: 24
align-size: 7
extract-size: 6
5.41021
Success

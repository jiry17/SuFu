
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 TwoList :: {List, List}
is_sorted : List -> Bool
is_sorted_pair : TwoList -> Bool
find : Int -> List -> Bool
SearchUnit :: {Int, List}
spec : TwoList -> Bool
target : TwoList -> {List'. <elt Int | cons {Int,List'}>, List}
main : TwoList -> Bool


Inductive List;

TwoList = {List, List};

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> >= pre x
    | cons {h, t} -> and (>= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

is_sorted_pair = \p: TwoList. 
    and (is_sorted p.1) (is_sorted p.2);

find = \w: Int. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt x -> == x w
    | cons {h, t} -> or (== w h) (f t)
    end
);

SearchUnit = {Int, List};

spec = \p: TwoList. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt a -> find a p.1
    | cons {h, t} -> or (find h p.1) (f t)
    end
) p.2;

target = let aux = (fix (
    \f: Int -> List -> Compress {Int, List}. \w: Int. \xs: List. 
    match xs with
      elt b -> 
        let tmp1 = {w, xs} in 
            align (label tmp1 ) 
    | cons {h, t} -> if (> w h) then let tmp2 = {w, xs} in 
            align (label tmp2 ) 
        else let res = (f w t) in 
            align (label {w, cons {h, (unlabel res ).2}} ) 
    end
)) in 
        fix (
        \f: TwoList -> Compress TwoList. \p: TwoList. 
        match p.1 with
          elt a -> 
            let res = (aux a p.2) in 
                let tmp3 = (elt a) in 
                    align (label {tmp3, (unlabel res ).2} ) 
        | cons {h, t} -> 
            let res1 = (f {t, p.2}) in 
                let res2 = (aux h p.2) in 
                    align (label {cons {h, (unlabel res1 ).1}, (unlabel res1 ).2} ) 
        end
    );

main = \p: TwoList. 
    if (is_sorted_pair p) then let tmp4 = (target p) in 
        align (spec (unlabel tmp4 )) 
    else false;
align term #0: compress[0] {Int,List. <elt Int | cons {Int,List}>}
align@0 create@0 tmp1
  w: Int
  b: Int
  xs: List. <elt Int | cons {Int,List}>
  tmp1: {Int,List. <elt Int | cons {Int,List}>}
align term #1: compress[0] {Int,List. <elt Int | cons {Int,List}>}
align@1 create@0 tmp2
  w: Int
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  tmp2: {Int,List. <elt Int | cons {Int,List}>}
  h: Int
align term #2: compress[0] {Int,List. <elt Int | cons {Int,List}>}
align@2 create@0 {w,cons ({h,unlabel res.2})}
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  res: compress[0] {Int,List. <elt Int | cons {Int,List}>}
  h: Int
  w: Int
align term #3: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
align@3 create@1 {tmp3,unlabel res.2}
  res: compress[0] {Int,List. <elt Int | cons {Int,List}>}
  p: {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  a: Int
  tmp3: List. <elt Int | cons {Int,List}>
align term #4: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
align@4 create@1 {cons ({h,unlabel res1.1}),unlabel res1.2}
  t: List. <elt Int | cons {Int,List}>
  res2: compress[0] {Int,List. <elt Int | cons {Int,List}>}
  p: {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  res1: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  h: Int
align term #5: Bool
align@5 spec (unlabel tmp4)
  tmp4: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  p: {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
Components for compress:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0

Components for align:
  spec [(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)] -> Bool 6
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0
  is_sorted [List. <elt Int | cons {Int,List}>] -> Bool 2
  is_sorted_pair [(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)] -> Bool 3
  find [Int,List. <elt Int | cons {Int,List}>] -> Bool 4

Components for comb:
  cons [(Int * List. <elt Int | cons {Int,List}>)] -> List. <elt Int | cons {Int,List}> 0
  elt [Int] -> List. <elt Int | cons {Int,List}> 0

align term #0: compress[0] {Int,List. <elt Int | cons {Int,List}>}
align@0 create@0 tmp1
  w: Int
  b: Int
  xs: List. <elt Int | cons {Int,List}>
  tmp1: {Int,List. <elt Int | cons {Int,List}>}
align term #1: compress[0] {Int,List. <elt Int | cons {Int,List}>}
align@1 create@0 tmp2
  w: Int
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  tmp2: {Int,List. <elt Int | cons {Int,List}>}
  h: Int
align term #2: compress[0] {Int,List. <elt Int | cons {Int,List}>}
align@2 create@0 {w,cons ({h,unlabel res.2})}
  xs: List. <elt Int | cons {Int,List}>
  t: List. <elt Int | cons {Int,List}>
  res: compress[0] {Int,List. <elt Int | cons {Int,List}>}
  h: Int
  w: Int
align term #3: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
align@3 create@1 {tmp3,unlabel res.2}
  res: compress[0] {Int,List. <elt Int | cons {Int,List}>}
  p: {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  a: Int
  tmp3: List. <elt Int | cons {Int,List}>
align term #4: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
align@4 create@1 {cons ({h,unlabel res1.1}),unlabel res1.2}
  t: List. <elt Int | cons {Int,List}>
  res2: compress[0] {Int,List. <elt Int | cons {Int,List}>}
  p: {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  res1: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  h: Int
align term #5: Bool
align@5 spec (unlabel tmp4)
  tmp4: compress[1] {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
  p: {List. <elt Int | cons {Int,List}>,List. <elt Int | cons {Int,List}>}
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@List. <elt Int | cons {Int,List}>
  Param2
  access1([Param0,Param1,Param2,Param3]@(Int * List. <elt Int | cons {Int,List}>))
  cons([Param0,Param1,Param2,Param3]@(Int * List. <elt Int | cons {Int,List}>))
  elt([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@(Int * List. <elt Int | cons {Int,List}>)
  Param3
  prod([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  Param1
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
  access0([Param0,Param1,Param2,Param3]@(Int * List. <elt Int | cons {Int,List}>))
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@List. <elt Int | cons {Int,List}>
  Param1
  Param2
  access1([Param0,Param1,Param2,Param3,Param4]@(Int * List. <elt Int | cons {Int,List}>))
  cons([Param0,Param1,Param2,Param3,Param4]@(Int * List. <elt Int | cons {Int,List}>))
  elt([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@(Int * List. <elt Int | cons {Int,List}>)
  Param3
  prod([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@List. <elt Int | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param0
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  access0([Param0,Param1,Param2,Param3,Param4]@(Int * List. <elt Int | cons {Int,List}>))
num = 2
start: start
node: start
  Compress[0] (Int * List. <elt Int | cons {Int,List}>)([Param0,Param1,Param2,Param3,Param4]@Compress[0] (Int * List. <elt Int | cons {Int,List}>))
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] (Int * List. <elt Int | cons {Int,List}>)
  Param2
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param3
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 3
start: start
node: start
  Compress[0] (Int * List. <elt Int | cons {Int,List}>)([Param0,Param1,Param2,Param3]@Compress[0] (Int * List. <elt Int | cons {Int,List}>))
  Int([Param0,Param1,Param2,Param3]@Int)
node: [Param0,Param1,Param2,Param3]@Int
  Param2
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3]@Compress[0] (Int * List. <elt Int | cons {Int,List}>)
  Param0
num = 4
start: start
node: start
  Compress[0] (Int * List. <elt Int | cons {Int,List}>)([Param0,Param1,Param2,Param3,Param4]@Compress[0] (Int * List. <elt Int | cons {Int,List}>))
  Compress[1] (List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)([Param0,Param1,Param2,Param3,Param4]@Compress[1] (List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>))
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] (Int * List. <elt Int | cons {Int,List}>)
  Param1
node: [Param0,Param1,Param2,Param3,Param4]@Compress[1] (List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)
  Param3
node: [Param0,Param1,Param2,Param3,Param4]@Int
  Param4
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
num = 5
start: start
node: start
  Compress[1] (List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)([Param0,Param1]@Compress[1] (List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>))
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
node: [Param0,Param1]@Compress[1] (List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
node: [Bool@0,Int@0]@Bool
  Bool@0
  is_sorted([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
  find([Bool@0,Int@0]@Int [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  access0([Param0]@(Int * List. <elt Int | cons {Int,List}>))
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@List. <elt Int | cons {Int,List}>)
  is_sorted([Param0]@List. <elt Int | cons {Int,List}>)
  find([Param0]@Int [Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@Bool
  is_sorted([Int@0]@List. <elt Int | cons {Int,List}>)
  find([Int@0]@Int [Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@Bool
  is_sorted([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  find([Int@0,Int@1]@Int [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  access1([Param0]@(Int * List. <elt Int | cons {Int,List}>))
  cons([Param0]@(Int * List. <elt Int | cons {Int,List}>))
  elt([Param0]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0]@Int)
node: [Param0]@(Int * List. <elt Int | cons {Int,List}>)
  Param0
  prod([Param0]@Int [Param0]@List. <elt Int | cons {Int,List}>)
num = 1
start: start
node: start
  Int([Param0]@Int)
  Bool([Param0]@Bool)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  ite([Int@0]@Bool [Int@0]@Int [Int@0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  ite([Int@0,Int@1]@Bool [Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@Int
  Int@0
  +([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  -([Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
  ite([Bool@0,Int@0]@Bool [Bool@0,Int@0]@Int [Bool@0,Int@0]@Int)
node: [Bool@0,Int@0]@Bool
  Bool@0
  is_sorted([Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
  find([Bool@0,Int@0]@Int [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  ite([Param0]@Bool [Param0]@Int [Param0]@Int)
  fold[List. <elt Int | cons {Int,List}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@List. <elt Int | cons {Int,List}>)
node: [Param0]@Bool
  fold[List. <elt Int | cons {Int,List}>->Bool]([Int@0]@Bool [Bool@0,Int@0]@Bool [Param0]@List. <elt Int | cons {Int,List}>)
  spec([Param0]@(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>))
  is_sorted([Param0]@List. <elt Int | cons {Int,List}>)
  is_sorted_pair([Param0]@(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>))
  find([Param0]@Int [Param0]@List. <elt Int | cons {Int,List}>)
node: [Int@0]@Bool
  is_sorted([Int@0]@List. <elt Int | cons {Int,List}>)
  find([Int@0]@Int [Int@0]@List. <elt Int | cons {Int,List}>)
node: [Int@0,Int@1]@Bool
  is_sorted([Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
  find([Int@0,Int@1]@Int [Int@0,Int@1]@List. <elt Int | cons {Int,List}>)
node: [Param0]@List. <elt Int | cons {Int,List}>
  access0([Param0]@(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>))
  access1([Param0]@(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>))
  elt([Param0]@Int)
node: [Int@0]@List. <elt Int | cons {Int,List}>
  elt([Int@0]@Int)
node: [Int@0,Int@1]@List. <elt Int | cons {Int,List}>
  elt([Int@0,Int@1]@Int)
node: [Bool@0,Int@0]@List. <elt Int | cons {Int,List}>
  elt([Bool@0,Int@0]@Int)
node: [Param0]@(List. <elt Int | cons {Int,List}> * List. <elt Int | cons {Int,List}>)
  Param0
  prod([Param0]@List. <elt Int | cons {Int,List}> [Param0]@List. <elt Int | cons {Int,List}>)


















  [] find(Param0.0,Param0.1)
  [0] -(Param0,Param1)
  [] find(Param0.0,Param0.1)
  [] find(Param0.0,Param0.1)
  [0] Param2 -> find(Param0.0,Param0.1)
  [1] -(Param3,Param4)
  [] spec(Param0)
  [0] Param0 -> find(Param0.0,Param0.1)
  [] spec(Param0)
  [0] Param1 -> find(Param0.0,Param0.1)
  [1] Param3 -> spec(Param0)
  [] null
  [0] Param0 -> spec(Param0)
compress #0: Bool
compress #1: Bool
pass #0: 
let c0 = (- w b) in 
    == c0 0
pass #1: 
false
pass #2: 
let c0 = (- h w) in 
    or (== c0 0) res
pass #3: 
res
pass #4: 
or res2 res1
pass #5: 
tmp4

Inductive List;

TwoList = {List, List};

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> >= pre x
    | cons {h, t} -> and (>= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

is_sorted_pair = \p: TwoList. 
    and (is_sorted p.1) (is_sorted p.2);

find = \w: Int. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt x -> == x w
    | cons {h, t} -> or (== w h) (f t)
    end
);

SearchUnit = {Int, List};

spec = \p: TwoList. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt a -> find a p.1
    | cons {h, t} -> or (find h p.1) (f t)
    end
) p.2;

target = let aux = (fix (
    \f: Int -> List -> Bool. \w: Int. \xs: List. 
    match xs with
      elt b -> 
        let c0 = (- w b) in 
            == c0 0
    | cons {h, t} -> if (> w h) then false
        else let res = (f w t) in 
            let c0 = (- h w) in 
                or (== c0 0) res
    end
)) in 
        fix (
        \f: TwoList -> Bool. \p: TwoList. 
        match p.1 with
          elt a -> 
            let res = (aux a p.2) in 
                res
        | cons {h, t} -> 
            let res1 = (f {t, p.2}) in 
                let res2 = (aux h p.2) in 
                    or res2 res1
        end
    );

main = \p: TwoList. 
    if (is_sorted_pair p) then let tmp4 = (target p) in 
        tmp4
    else false;
syn-comb: 0.076654
collect: 42.1306
label: 0.026903
extend-component: 0.004625
execute: 1.2135
syn-align: 43.5079
comb-size: 34
align-size: 10
extract-size: 17
43.6201
Success

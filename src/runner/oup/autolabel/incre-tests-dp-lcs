
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
Plan :: List
PlanList :: PlanList. <pnil Unit | pcons {Plan,PlanList}>
pnil : Unit -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
pcons : {Plan,PlanList} ->
        PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
merge : PlanList -> PlanList -> PlanList
extend : Int -> PlanList -> PlanList
generate : List -> List -> PlanList
max : Int -> Int -> Int
one : Int
get_best : PlanList -> Int
main : List -> List -> Int


Inductive List;

Plan = Compress List;

Inductive PlanList;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

extend = \w: Int. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {align (label (cons {w, unlabel h }) ) , f t}
    end
);

generate = fix (
    \f: List -> List -> PlanList. \xs: List. \ys: List. 
    match {xs, ys} with
      {cons {h1, t1}, cons {h2, t2}} -> 
        let res1 = (merge (f t1 ys) (f xs t2)) in 
            if (== h1 h2) then merge (extend h1 (f t1 t2)) res1
            else res1
    | _ -> pcons {let tmp1 = (nil Unit) in 
            align (label tmp1 ) , pnil Unit}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

one = 1;

get_best = let eval = (fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + 1 (f t)
    end
)) in 
        fix (
        \f: PlanList -> Int. \xs: PlanList. 
        match xs with
          pnil _ -> 0
        | pcons {h, t} -> max (align (eval (unlabel h )) ) (f t)
        end
    );

main = \xs: List. \ys: List. 
    get_best (generate xs ys);
align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 cons ({w,unlabel h})
  w: Int
  xs: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
  t: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
  h: compress[0] List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp1
  ys: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 eval (unlabel h)
  h: compress[0] List. <nil Unit | cons {Int,List}>
  t: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
  xs: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
Components for compress:
  one [] -> Int 7
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 6

Components for align:
  one [] -> Int 7
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 6

Components for comb:
  one [] -> Int 7
  cons [(Int * List. <nil Unit | cons {Int,List}>)] -> List. <nil Unit | cons {Int,List}> 0
  nil [Bot] -> List. <nil Unit | cons {Int,List}> 0
  max [Int,Int] -> Int 6

align term #0: compress[0] List. <nil Unit | cons {Int,List}>
align@0 create@0 cons ({w,unlabel h})
  w: Int
  xs: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
  t: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
  h: compress[0] List. <nil Unit | cons {Int,List}>
align term #1: compress[0] List. <nil Unit | cons {Int,List}>
align@1 create@0 tmp1
  ys: List. <nil Unit | cons {Int,List}>
  tmp1: List. <nil Unit | cons {Int,List}>
  xs: List. <nil Unit | cons {Int,List}>
align term #2: Int
align@2 eval (unlabel h)
  h: compress[0] List. <nil Unit | cons {Int,List}>
  t: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
  xs: PlanList. <pnil Unit | pcons {compress[0] List. <nil Unit | cons {Int,List}>,PlanList}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2,Param3]@Int)
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>)
node: [Param0,Param1,Param2,Param3]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param3
node: [Param0,Param1,Param2,Param3]@Int
  Param0
  +([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  -([Param0,Param1,Param2,Param3]@Int [Param0,Param1,Param2,Param3]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] List. <nil Unit | cons {Int,List}>([Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {Int,List}>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  one
  max([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] List. <nil Unit | cons {Int,List}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  one
  max([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[List. <nil Unit | cons {Int,List}>->Int]([]@Int [Int@0,Int@1]@Int [Param0]@List. <nil Unit | cons {Int,List}>)
  one
  max([Param0]@Int [Param0]@Int)
node: []@Int
  +([]@Int []@Int)
  -([]@Int []@Int)
  one
  max([]@Int []@Int)
node: [Param0]@List. <nil Unit | cons {Int,List}>
  Param0









  [] fold[List. <nil Unit | cons {Int,List}>->Int](one(),+(Int@1(),one()),Param0)
  [0] Param3 -> fold[List. <nil Unit | cons {Int,List}>->Int](one(),+(Int@1(),one()),Param0)
  [] fold[List. <nil Unit | cons {Int,List}>->Int](one(),+(Int@1(),one()),Param0)
  [] null
  [0] Param0 -> fold[List. <nil Unit | cons {Int,List}>->Int](one(),+(Int@1(),one()),Param0)
compress #0: Int
pass #0: 
+ h 1
pass #1: 
1
pass #2: 
- h one

Inductive List;

Plan = Int;

Inductive PlanList;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

extend = \w: Int. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {+ h 1, f t}
    end
);

generate = fix (
    \f: List -> List -> PlanList. \xs: List. \ys: List. 
    match {xs, ys} with
      {cons {h1, t1}, cons {h2, t2}} -> 
        let res1 = (merge (f t1 ys) (f xs t2)) in 
            if (== h1 h2) then merge (extend h1 (f t1 t2)) res1
            else res1
    | _ -> pcons {1, pnil Unit}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

one = 1;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 0
    | pcons {h, t} -> max (- h one) (f t)
    end
);

main = \xs: List. \ys: List. 
    get_best (generate xs ys);
syn-comb: 0.461167
collect: 42.3123
label: 0.114706
extend-component: 0.005636
execute: 0.045047
syn-align: 42.4407
comb-size: 11
align-size: 11
extract-size: 2
43.0578
Success


BTree :: BTree. <empty Unit | node {Int,BTree,BTree}>
 empty : Unit -> BTree'. <empty Unit | node {Int,BTree',BTree'}>
 node : {Int,BTree,BTree} ->
        BTree'. <empty Unit | node {Int,BTree',BTree'}>
 Zipper :: Zipper. <top Unit | left {Int,BTree,Zipper} | right {
Int,BTree,Zipper}>
top : Unit ->
      Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
      Int,BTree,Zipper'}>
left : {Int,BTree,Zipper} ->
       Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
       Int,BTree,Zipper'}>
right : {Int,BTree,Zipper} ->
        Zipper'. <top Unit | left {Int,BTree,Zipper'} | right {
        Int,BTree,Zipper'}>
sum : BTree -> Int
repr : Zipper -> BTree'. <empty Unit | node {Int,BTree',BTree'}>
main : Zipper -> Int


Inductive BTree;

Inductive Zipper;

sum = fix (
    \f: BTree -> Int. \t: BTree. 
    match t with
      empty _ -> 0
    | node {a, l, r} -> + a (+ (f l) (f r))
    end
);

repr = fix (
    \f: Zipper -> Compress BTree. \z: Zipper. 
    match z with
      top _ -> 
        let tmp1 = (empty Unit) in 
            align (label tmp1 ) 
    | left {w, tree, zz} -> 
        let tw = (sum tree) in 
            let tmp2 = (f zz) in 
                align (label (node {w, tree, unlabel tmp2 }) ) 
    | right {w, tree, zz} -> 
        let tw = (sum tree) in 
            let tmp3 = (f zz) in 
                align (label (node {w, unlabel tmp3 , tree}) ) 
    end
);

main = \z: Zipper. 
    let tmp4 = (repr z) in 
        align (sum (unlabel tmp4 )) ;
align term #0: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@0 create@0 tmp1
  tmp1: BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #1: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@1 create@0 node ({w,tree,unlabel tmp2})
  tw: Int
  tmp2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@2 create@0 node ({w,unlabel tmp3,tree})
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tw: Int
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp3: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #3: Int
align@3 sum (unlabel tmp4)
  tmp4: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
Components for compress:
  node [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  right [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

Components for align:
  sum [BTree. <empty Unit | node {Int,BTree,BTree}>] -> Int 2
  node [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  right [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

Components for comb:
  node [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * BTree. <empty Unit | node {Int,BTree,BTree}>)] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  left [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  empty [Bot] -> BTree. <empty Unit | node {Int,BTree,BTree}> 0
  top [Bot] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1
  right [(Int * BTree. <empty Unit | node {Int,BTree,BTree}> * Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>)] -> Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}> 1

align term #0: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@0 create@0 tmp1
  tmp1: BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #1: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@1 create@0 node ({w,tree,unlabel tmp2})
  tw: Int
  tmp2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
align term #2: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align@2 create@0 node ({w,unlabel tmp3,tree})
  zz: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  w: Int
  tree: BTree. <empty Unit | node {Int,BTree,BTree}>
  tw: Int
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
  tmp3: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
align term #3: Int
align@3 sum (unlabel tmp4)
  tmp4: compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  z: Zipper. <top Unit | left {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper} | right {Int,BTree. <empty Unit | node {Int,BTree,BTree}>,Zipper}>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 1
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  Param1
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param0
  Param3
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
num = 2
start: start
node: start
  Int([Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>([Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>)
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Int
  Param1
  Param3
  +([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  -([Param0,Param1,Param2,Param3,Param4,Param5]@Int [Param0,Param1,Param2,Param3,Param4,Param5]@Int)
  0
  1
node: [Param0,Param1,Param2,Param3,Param4,Param5]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  Param5
num = 3
start: start
node: start
  Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>([Param0,Param1]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
node: [Param0,Param1]@Compress[0] BTree. <empty Unit | node {Int,BTree,BTree}>
  Param0
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  sum([Param0]@BTree. <empty Unit | node {Int,BTree,BTree}>)
node: [Param0]@BTree. <empty Unit | node {Int,BTree,BTree}>
  Param0












  [] sum(Param0)
  [] sum(Param0)
  [0] Param1 -> sum(Param0)
  [1] +(Param0,Param3)
  [] sum(Param0)
  [0] Param5 -> sum(Param0)
  [1] +(Param1,Param3)
  [] null
  [0] Param0 -> sum(Param0)
compress #0: Int
pass #0: 
0
pass #1: 
let c0 = (+ tw w) in 
    + tmp2 c0
pass #2: 
let c0 = (+ w tw) in 
    + tmp3 c0
pass #3: 
tmp4

Inductive BTree;

Inductive Zipper;

sum = fix (
    \f: BTree -> Int. \t: BTree. 
    match t with
      empty _ -> 0
    | node {a, l, r} -> + a (+ (f l) (f r))
    end
);

repr = fix (
    \f: Zipper -> Int. \z: Zipper. 
    match z with
      top _ -> 0
    | left {w, tree, zz} -> 
        let tw = (sum tree) in 
            let tmp2 = (f zz) in 
                let c0 = (+ tw w) in 
                    + tmp2 c0
    | right {w, tree, zz} -> 
        let tw = (sum tree) in 
            let tmp3 = (f zz) in 
                let c0 = (+ w tw) in 
                    + tmp3 c0
    end
);

main = \z: Zipper. 
    let tmp4 = (repr z) in 
        tmp4;
syn-comb: 0.622341
collect: 1.42326
label: 0.010978
extend-component: 0.001422
execute: 0.547156
syn-align: 2.06308
comb-size: 24
align-size: 3
extract-size: 15
2.70498
Success

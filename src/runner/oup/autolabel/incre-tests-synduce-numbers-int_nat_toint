
Nat :: Nat. <z Unit | s Nat>
 z : Unit -> Nat'. <z Unit | s Nat'>
 s : Nat -> Nat'. <z Unit | s Nat'>
 INat :: INat. <positive Nat | negative Nat>
positive : Nat -> INat'. <positive Nat | negative Nat>
negative : Nat -> INat'. <positive Nat | negative Nat>
nsum : Nat -> Int
itoint : INat -> Int
EInt :: EInt. <zero Unit | sub1 EInt | add1 EInt>
zero : Unit -> EInt'. <zero Unit | sub1 EInt' | add1 EInt'>
sub1 : EInt -> EInt'. <zero Unit | sub1 EInt' | add1 EInt'>
add1 : EInt -> EInt'. <zero Unit | sub1 EInt' | add1 EInt'>
repr : EInt -> INat'. <positive Nat | negative Nat>
target : EInt -> EInt'. <zero Unit | sub1 EInt' | add1 EInt'>
main : EInt -> Int


Inductive Nat;

Inductive INat;

nsum = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

itoint = \n: INat. 
    match n with
      negative m -> - 0 (+ 1 (nsum m))
    | positive m -> nsum m
    end
;

Inductive EInt;

repr = fix (
    \f: EInt -> INat. \e: EInt. 
    match e with
      zero _ -> positive (z Unit)
    | sub1 e' -> 
        let res = (f e') in 
            match res with
              positive z _ -> negative (z Unit)
            | positive s n -> positive n
            | negative n -> negative (s n)
            end

    | add1 e' -> 
        let res = (f e') in 
            match res with
              positive n -> positive (s n)
            | negative z _ -> positive (z Unit)
            | negative s n -> negative n
            end

    end
);

target = fix (
    \f: EInt -> Compress EInt. \e: EInt. 
    match e with
      zero _ -> 
        let tmp1 = (zero Unit) in 
            align (label tmp1 ) 
    | add1 e' -> 
        let tmp2 = (f e') in 
            align (label (add1 (unlabel tmp2 )) ) 
    | sub1 e' -> 
        let tmp3 = (f e') in 
            align (label (sub1 (unlabel tmp3 )) ) 
    end
);

main = \x: EInt. 
    let tmp4 = (target x) in 
        align (itoint (repr (unlabel tmp4 ))) ;
align term #0: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
align@0 create@0 tmp1
  tmp1: EInt. <zero Unit | sub1 EInt | add1 EInt>
  e: EInt. <zero Unit | sub1 EInt | add1 EInt>
align term #1: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
align@1 create@0 add1 (unlabel tmp2)
  e': EInt. <zero Unit | sub1 EInt | add1 EInt>
  tmp2: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  e: EInt. <zero Unit | sub1 EInt | add1 EInt>
align term #2: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
align@2 create@0 sub1 (unlabel tmp3)
  tmp3: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  e': EInt. <zero Unit | sub1 EInt | add1 EInt>
  e: EInt. <zero Unit | sub1 EInt | add1 EInt>
align term #3: Int
align@3 itoint (repr (unlabel tmp4))
  x: EInt. <zero Unit | sub1 EInt | add1 EInt>
  tmp4: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
Components for compress:
  zero [Bot] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  negative [Nat. <z Unit | s Nat>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 1
  positive [Nat. <z Unit | s Nat>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 1
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 0
  sub1 [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  add1 [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  z [Bot] -> Nat. <z Unit | s Nat> 0

Components for align:
  nsum [Nat. <z Unit | s Nat>] -> Int 2
  zero [Bot] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  negative [Nat. <z Unit | s Nat>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 1
  positive [Nat. <z Unit | s Nat>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 1
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 0
  itoint [INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>>] -> Int 3
  sub1 [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  add1 [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  z [Bot] -> Nat. <z Unit | s Nat> 0
  repr [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 5

Components for comb:
  zero [Bot] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  negative [Nat. <z Unit | s Nat>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 1
  positive [Nat. <z Unit | s Nat>] -> INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>> 1
  s [Nat. <z Unit | s Nat>] -> Nat. <z Unit | s Nat> 0
  sub1 [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  add1 [EInt. <zero Unit | sub1 EInt | add1 EInt>] -> EInt. <zero Unit | sub1 EInt | add1 EInt> 4
  z [Bot] -> Nat. <z Unit | s Nat> 0

align term #0: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
align@0 create@0 tmp1
  tmp1: EInt. <zero Unit | sub1 EInt | add1 EInt>
  e: EInt. <zero Unit | sub1 EInt | add1 EInt>
align term #1: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
align@1 create@0 add1 (unlabel tmp2)
  e': EInt. <zero Unit | sub1 EInt | add1 EInt>
  tmp2: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  e: EInt. <zero Unit | sub1 EInt | add1 EInt>
align term #2: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
align@2 create@0 sub1 (unlabel tmp3)
  tmp3: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  e': EInt. <zero Unit | sub1 EInt | add1 EInt>
  e: EInt. <zero Unit | sub1 EInt | add1 EInt>
align term #3: Int
align@3 itoint (repr (unlabel tmp4))
  x: EInt. <zero Unit | sub1 EInt | add1 EInt>
  tmp4: compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
num = 0
start: start
node: start
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 1
start: start
node: start
  Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>([Param0,Param1,Param2]@Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  Param1
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
num = 2
start: start
node: start
  Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>([Param0,Param1,Param2]@Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>)
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
node: [Param0,Param1,Param2]@Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  Param0
num = 3
start: start
node: start
  Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>([Param0,Param1]@Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] EInt. <zero Unit | sub1 EInt | add1 EInt>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  itoint([Param0]@INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>>)
node: [Param0]@INat. <positive Nat. <z Unit | s Nat> | negative Nat. <z Unit | s Nat>>
  repr([Param0]@EInt. <zero Unit | sub1 EInt | add1 EInt>)
node: [Param0]@EInt. <zero Unit | sub1 EInt | add1 EInt>
  Param0
  sub1([Param0]@EInt. <zero Unit | sub1 EInt | add1 EInt>)
  add1([Param0]@EInt. <zero Unit | sub1 EInt | add1 EInt>)












  [] itoint(repr(Param0))
  [] itoint(repr(Param0))
  [0] Param1 -> itoint(repr(Param0))
  [] itoint(repr(Param0))
  [0] Param0 -> itoint(repr(Param0))
  [] null
  [0] Param1 -> itoint(repr(Param0))
compress #0: Int
pass #0: 
0
pass #1: 
+ tmp2 1
pass #2: 
- tmp3 1
pass #3: 
tmp4

Inductive Nat;

Inductive INat;

nsum = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

itoint = \n: INat. 
    match n with
      negative m -> - 0 (+ 1 (nsum m))
    | positive m -> nsum m
    end
;

Inductive EInt;

repr = fix (
    \f: EInt -> INat. \e: EInt. 
    match e with
      zero _ -> positive (z Unit)
    | sub1 e' -> 
        let res = (f e') in 
            match res with
              positive z _ -> negative (z Unit)
            | positive s n -> positive n
            | negative n -> negative (s n)
            end

    | add1 e' -> 
        let res = (f e') in 
            match res with
              positive n -> positive (s n)
            | negative z _ -> positive (z Unit)
            | negative s n -> negative n
            end

    end
);

target = fix (
    \f: EInt -> Int. \e: EInt. 
    match e with
      zero _ -> 0
    | add1 e' -> 
        let tmp2 = (f e') in 
            + tmp2 1
    | sub1 e' -> 
        let tmp3 = (f e') in 
            - tmp3 1
    end
);

main = \x: EInt. 
    let tmp4 = (target x) in 
        tmp4;
syn-comb: 0.587362
collect: 0.624384
label: 0.013106
extend-component: 0
execute: 0.044847
syn-align: 0.674056
comb-size: 12
align-size: 5
extract-size: 3
1.28282
Success


Tree :: Tree. <leaf Int | branch {Tree,Tree}>
leaf : Int -> Tree'. <leaf Int | branch {Tree',Tree'}>
branch : {Tree,Tree} -> Tree'. <leaf Int | branch {Tree',Tree'}>
square : Int -> Int
squaretr : Tree -> Tree'. <leaf Int | branch {Tree',Tree'}>
sumtr : Tree -> Int
main : Tree -> Int


Inductive Tree;

square = \x: Int. 
    * x x;

squaretr = fix (
    \f: Tree -> Compress Tree. \t: Tree. 
    match t with
      leaf w -> 
        let tmp1 = (leaf (square w)) in 
            align (label tmp1 ) 
    | branch {l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                align (label (branch {unlabel tmp2 , unlabel tmp3 }) ) 
    end
);

sumtr = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | branch {l, r} -> + (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (squaretr t) in 
        align (sumtr (unlabel tmp4 )) ;
align term #0: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <leaf Int | branch {Tree,Tree}>
  tmp1: Tree. <leaf Int | branch {Tree,Tree}>
  w: Int
align term #1: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
align@1 create@0 branch ({unlabel tmp2,unlabel tmp3})
  r: Tree. <leaf Int | branch {Tree,Tree}>
  l: Tree. <leaf Int | branch {Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
  t: Tree. <leaf Int | branch {Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
align term #2: Int
align@2 sumtr (unlabel tmp4)
  t: Tree. <leaf Int | branch {Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
Components for compress:
  leaf [Int] -> Tree. <leaf Int | branch {Tree,Tree}> 0
  square [Int] -> Int 1
  branch [(Tree. <leaf Int | branch {Tree,Tree}> * Tree. <leaf Int | branch {Tree,Tree}>)] -> Tree. <leaf Int | branch {Tree,Tree}> 0

Components for align:
  leaf [Int] -> Tree. <leaf Int | branch {Tree,Tree}> 0
  square [Int] -> Int 1
  branch [(Tree. <leaf Int | branch {Tree,Tree}> * Tree. <leaf Int | branch {Tree,Tree}>)] -> Tree. <leaf Int | branch {Tree,Tree}> 0
  sumtr [Tree. <leaf Int | branch {Tree,Tree}>] -> Int 3

Components for comb:
  leaf [Int] -> Tree. <leaf Int | branch {Tree,Tree}> 0
  square [Int] -> Int 1
  branch [(Tree. <leaf Int | branch {Tree,Tree}> * Tree. <leaf Int | branch {Tree,Tree}>)] -> Tree. <leaf Int | branch {Tree,Tree}> 0

align term #0: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
align@0 create@0 tmp1
  t: Tree. <leaf Int | branch {Tree,Tree}>
  tmp1: Tree. <leaf Int | branch {Tree,Tree}>
  w: Int
align term #1: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
align@1 create@0 branch ({unlabel tmp2,unlabel tmp3})
  r: Tree. <leaf Int | branch {Tree,Tree}>
  l: Tree. <leaf Int | branch {Tree,Tree}>
  tmp3: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
  t: Tree. <leaf Int | branch {Tree,Tree}>
  tmp2: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
align term #2: Int
align@2 sumtr (unlabel tmp4)
  t: Tree. <leaf Int | branch {Tree,Tree}>
  tmp4: compress[0] Tree. <leaf Int | branch {Tree,Tree}>
num = 0
start: start
node: start
  Int([Param0,Param1,Param2]@Int)
node: [Param0,Param1,Param2]@Int
  Param2
  +([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  -([Param0,Param1,Param2]@Int [Param0,Param1,Param2]@Int)
  0
  1
  square([Param0,Param1,Param2]@Int)
num = 1
start: start
node: start
  Compress[0] Tree. <leaf Int | branch {Tree,Tree}>([Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | branch {Tree,Tree}>)
  Int([Param0,Param1,Param2,Param3,Param4]@Int)
node: [Param0,Param1,Param2,Param3,Param4]@Compress[0] Tree. <leaf Int | branch {Tree,Tree}>
  Param2
  Param4
node: [Param0,Param1,Param2,Param3,Param4]@Int
  +([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  -([Param0,Param1,Param2,Param3,Param4]@Int [Param0,Param1,Param2,Param3,Param4]@Int)
  0
  1
  square([Param0,Param1,Param2,Param3,Param4]@Int)
num = 2
start: start
node: start
  Compress[0] Tree. <leaf Int | branch {Tree,Tree}>([Param0,Param1]@Compress[0] Tree. <leaf Int | branch {Tree,Tree}>)
  Int([Param0,Param1]@Int)
node: [Param0,Param1]@Compress[0] Tree. <leaf Int | branch {Tree,Tree}>
  Param1
node: [Param0,Param1]@Int
  +([Param0,Param1]@Int [Param0,Param1]@Int)
  -([Param0,Param1]@Int [Param0,Param1]@Int)
  0
  1
  square([Param0,Param1]@Int)
num = 0
start: start
node: start
  Int([Param0]@Int)
node: [Int@0]@Int
  Int@0
  +([Int@0]@Int [Int@0]@Int)
  -([Int@0]@Int [Int@0]@Int)
  square([Int@0]@Int)
  sumtr([Int@0]@Tree. <leaf Int | branch {Tree,Tree}>)
node: [Int@0,Int@1]@Int
  Int@0
  Int@1
  +([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  -([Int@0,Int@1]@Int [Int@0,Int@1]@Int)
  square([Int@0,Int@1]@Int)
  sumtr([Int@0,Int@1]@Tree. <leaf Int | branch {Tree,Tree}>)
node: [Param0]@Int
  +([Param0]@Int [Param0]@Int)
  -([Param0]@Int [Param0]@Int)
  fold[Tree. <leaf Int | branch {Tree,Tree}>->Int]([Int@0]@Int [Int@0,Int@1]@Int [Param0]@Tree. <leaf Int | branch {Tree,Tree}>)
  square([Param0]@Int)
  sumtr([Param0]@Tree. <leaf Int | branch {Tree,Tree}>)
node: [Int@0]@Tree. <leaf Int | branch {Tree,Tree}>
  leaf([Int@0]@Int)
node: [Int@0,Int@1]@Tree. <leaf Int | branch {Tree,Tree}>
  leaf([Int@0,Int@1]@Int)
node: [Param0]@Tree. <leaf Int | branch {Tree,Tree}>
  Param0
  leaf([Param0]@Int)









  [] sumtr(Param0)
  [0] Param2
  [] sumtr(Param0)
  [0] Param2 -> sumtr(Param0)
  [1] Param4 -> sumtr(Param0)
  [] null
  [0] Param1 -> sumtr(Param0)
compress #0: Int
pass #0: 
square w
pass #1: 
+ tmp3 tmp2
pass #2: 
tmp4

Inductive Tree;

square = \x: Int. 
    * x x;

squaretr = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> square w
    | branch {l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + tmp3 tmp2
    end
);

sumtr = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | branch {l, r} -> + (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (squaretr t) in 
        tmp4;
syn-comb: 0.043683
collect: 0.697499
label: 0.009085
extend-component: 0
execute: 0.254737
syn-align: 1.0009
comb-size: 9
align-size: 3
extract-size: 5
1.05927
Success

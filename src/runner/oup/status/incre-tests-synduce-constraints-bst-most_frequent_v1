
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 Pos :: Pos. <one Unit | s Pos>
one : Unit -> Pos'. <one Unit | s Pos'>
s : Pos -> Pos'. <one Unit | s Pos'>
Map :: Map. <value {Int,Pos} | node {Int,Map,Map}>
value : {Int,Pos} ->
        Map'. <value {Int,Pos} | node {Int,Map',Map'}>
node : {Int,Map,Map} ->
       Map'. <value {Int,Pos} | node {Int,Map',Map'}>
min : Int -> Int -> Int
max : Int -> Int -> Int
min_key : Map -> Int
max_key : Map -> Int
is_map : Map -> Bool
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repeat : Int -> Pos -> List'. <elt Int | cons {Int,List'}>
repr : Map -> List'. <elt Int | cons {Int,List'}>
count : Int -> List -> Int
spec : List -> Int
p2i : Pos -> Int
target : Map -> Map'. <value {Int,Pos} | node {Int,Map',Map'}>
main : Map -> Int

size: 321
compress-num: 1
label-num: 8
rewrite-size: 17
0.029051
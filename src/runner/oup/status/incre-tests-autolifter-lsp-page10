
List :: List. <cons {Int,List} | nil Unit>
 cons : {Int,List} -> List'. <cons {Int,List'} | nil Unit>
 nil : Unit -> List'. <cons {Int,List'} | nil Unit>
 head : List -> Int -> Int
fold : (Int->Int->Int) -> List -> Int -> Int
length : List -> Int
sum : List -> Int
fold_list : (Int->List->List) -> List -> List -> List
rev : List -> List
max : Int -> Int -> Int
inf : Int
lsp : (List->Bool) -> List -> Int
min : Int -> Int -> Int
minimum : List -> Int
maximum : List -> Int
cond1 : List -> Bool
gap : Int
cond2 : List -> Bool
isval : List -> Bool
run : List -> Int

size: 337
compress-num: 1
label-num: 13
rewrite-size: 25
0.032201
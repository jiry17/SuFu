
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
Graph :: Graph. <gnil Unit | gcons {List,Graph}>
gnil : Unit -> Graph'. <gnil Unit | gcons {List,Graph'}>
gcons : {List,Graph} -> Graph'. <gnil Unit | gcons {List,Graph'}>
Path :: Path. <fin Unit | continue {Int,Int,Int,Path}>
fin : Unit -> Path'. <fin Unit | continue {Int,Int,Int,Path'}>
continue : {Int,Int,Int,Path} ->
           Path'. <fin Unit | continue {Int,Int,Int,Path'}>
Plan :: Path
PlanList :: PlanList. <pnil Unit | pcons {Plan,PlanList}>
pnil : Unit -> PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
pcons : {Plan,PlanList} ->
        PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
graph_size : Graph -> Int
length : List -> Int
is_valid_graph : Graph -> Bool
merge : PlanList -> PlanList -> PlanList
generate : Graph ->
           PlanList'. <pnil Unit | pcons {Plan,PlanList'}>
min : Int -> Int -> Int
inf : Int
get_best : PlanList -> Int
main : Graph -> Int

size: 323
compress-num: 1
label-num: 7
rewrite-size: 15
0.028585
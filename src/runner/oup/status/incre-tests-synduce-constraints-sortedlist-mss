
List :: List. <elt Int | cons {Int,List}>
 elt : Int -> List'. <elt Int | cons {Int,List'}>
 cons : {Int,List} -> List'. <elt Int | cons {Int,List'}>
 CList :: CList. <single Int | concat {Int,CList,CList}>
single : Int -> CList'. <single Int | concat {Int,CList',CList'}>
concat : {Int,CList,CList} ->
         CList'. <single Int | concat {Int,CList',CList'}>
cat : List -> List -> List'. <elt Int | cons {Int,List'}>
repr : CList -> List'. <elt Int | cons {Int,List'}>
max : Int -> Int -> Int
min : Int -> Int -> Int
lmax : CList -> Int
lmin : CList -> Int
is_parti : CList -> Bool
spec : List -> {Int, Int, Int, Int}
sum : CList -> Int
target : CList -> CList
insert : Int -> List -> List'. <elt Int | cons {Int,List'}>
sort : List -> List
access : List -> {Int, List}
fill : CList ->
       List ->
       {CList'. <single Int | concat {Int,CList',CList'}>, List}
flatten : CList -> List'. <elt Int | cons {Int,List'}>
gen : CList -> CList'. <single Int | concat {Int,CList',CList'}>
main : CList -> {Int, Int, Int, Int}

size: 484
compress-num: 1
label-num: 11
rewrite-size: 25
0.04879
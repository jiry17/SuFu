
Item :: {Int, Int}
 ItemList :: ItemList. <cons {Item,ItemList} | nil Unit>
cons : {Item,ItemList} ->
       ItemList'. <cons {Item,ItemList'} | nil Unit>
nil : Unit -> ItemList'. <cons {Item,ItemList'} | nil Unit>
Plan :: ItemList
PlanList :: PlanList. <consPlan {Plan,PlanList} | nilPlan Unit>
consPlan : {Plan,PlanList} ->
           PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
nilPlan : Unit ->
          PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
max : Int -> Int -> Int
step : Item ->
       PlanList ->
       PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
gen : ItemList ->
      PlanList'. <consPlan {Plan,PlanList'} | nilPlan Unit>
getbest : Int -> PlanList -> Int
knapsack : Int -> ItemList -> Int

size: 164
compress-num: 1
label-num: 9
rewrite-size: 17
0.017997
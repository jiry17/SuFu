
List :: List. <nil Unit | cons {Int,List}>
nil : Unit -> List'. <nil Unit | cons {Int,List'}>
cons : {Int,List} -> List'. <nil Unit | cons {Int,List'}>
Tag :: Bool
Result :: List
NodeInfo :: {Tag, Result}
SegTree :: SegTree. <empty Unit | node {NodeInfo,SegTree,SegTree}>
empty : Unit ->
        SegTree'. <empty Unit | node {NodeInfo,SegTree',SegTree'}>
node : {NodeInfo,SegTree,SegTree} ->
       SegTree'. <empty Unit | node {NodeInfo,SegTree',SegTree'}>
Operation :: Operation. <update {Int,Int,Tag} | query {Int,Int}>
update : {Int,Int,Tag} ->
         Operation'. <update {Int,Int,Tag} | query {Int,Int}>
query : {Int,Int} ->
        Operation'. <update {Int,Int,Tag} | query {Int,Int}>
OpList :: OpList. <onil Unit | ocons {Operation,OpList}>
onil : Unit -> OpList'. <onil Unit | ocons {Operation,OpList'}>
ocons : {Operation,OpList} ->
        OpList'. <onil Unit | ocons {Operation,OpList'}>
concat : List -> List -> List'. <nil Unit | cons {Int,List'}>
length : List -> Int
map : (Int->Int) -> List -> List
solve : (Tag->Tag->Tag) ->
        Tag ->
        (Tag->Int->Int) ->
        (List->Int) ->
        List -> OpList -> List'. <nil Unit | cons {Int,List'}>
default_tag : Bool
apply_tag : Tag -> Int -> Int
merge_tag : Tag -> Tag -> Bool
inf : Int
min : Int -> Int -> Int
max : Int -> Int -> Int
sndmin : List -> Int
main : List -> OpList -> List'. <nil Unit | cons {Int,List'}>

size: 738
compress-num: 1
label-num: 13
rewrite-size: 21
0.074408
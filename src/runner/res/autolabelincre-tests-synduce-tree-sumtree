
Inductive Tree;

spec = fix (
    \f: Int -> Tree -> Int. \w: Int. \t: Tree. 
    match t with
      nil _ -> w
    | node {a, l, r} -> f (+ (f w l) a) r
    end
) 0;

repr = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + (+ tmp2 tmp3) a
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        tmp4;

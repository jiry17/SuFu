
Inductive List;

single_pass = \v: List -> Bool. 
    let run = (fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            let c0 = (al_head t) in 
                and tmp1 (< h c0)
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2;

inf = 100;

is_sorted = fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> if (>= pre h) then false
        else f h t
    end
) (- 0 inf);

main = single_pass is_sorted;

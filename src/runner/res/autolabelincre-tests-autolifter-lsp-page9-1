
Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

fold_list = \f: Int -> List -> List. \x: List. \w0: List. 
    fix (
    \g: List -> List. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

rev = \x: List. 
    fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> f t (cons {h, y})
    | _ -> y
    end
) x (nil unit);

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

inf = 100;

lsp = \b: List -> Bool. \x: List. 
    (fix (
    \f: List -> {Int, Int}. \x: List. 
    match x with
      cons {h, t} -> 
        let res = (f t) in 
            let ms = res.2 in 
                let x = res.1 in 
                    if (let c0 = (head t h) in 
                        <= h c0) then {+ 1 x, max ms (+ 1 x)}
                    else if (b (cons {h, nil unit})) then {1, max ms 1}
                    else {0, ms}
    | _ -> {0, 0}
    end
) x).2;

issorted = \x: List. 
    (fix (
    \f: List -> {Bool, Int}. \l: List. 
    match l with
      cons {h, t} -> 
        let res = (f t) in 
            if (> h res.2) then {false, h}
            else {res.1, h}
    | nil _ -> {true, inf}
    end
) x).1;

run = lsp issorted;

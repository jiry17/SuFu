
Inductive Tree;

size = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | leaf _ -> 1
    | node {_, l, r} -> + 1 (+ (f l) (f r))
    end
);

empty_right = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      node {_, l, r} -> and (== 0 (size r)) (f l)
    | _ -> true
    end
);

@Input w = Int;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | leaf a -> if (== a w) then 1
        else 0
    | node {a, l, r} -> if (== a w) then 1
        else if (== 1 (f l)) then 1
        else f r
    end
);

target = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | leaf a -> if (or (< a w) (< w a)) then 0
        else 1
    | node {a, l, r} -> 
        let tmp3 = (f l) in 
            if (or (and (== tmp3 0) (< a w)) (and (== tmp3 0) (< w a))) then 0
            else 1
    end
);

main = \t: Tree. 
    if (empty_right t) then let tmp4 = (target t) in 
        tmp4
    else 0;


Inductive List;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil unit, nil unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Int. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0, 0, al_inf}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {c0, c0, c0, c0}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {if (and (< (+ tmp2.2 tmp1.3) tmp2.1) (< tmp1.1 tmp2.1)) then tmp2.1
                    else if (< (+ tmp2.2 tmp1.3) tmp1.1) then tmp1.1
                    else + tmp2.2 tmp1.3, if (== tmp1.4 0) then tmp1.2
                    else + tmp2.2 tmp1.2, if (== tmp2.4 0) then tmp2.3
                    else + tmp2.3 tmp1.3, if (or (== tmp2.4 0) (== tmp1.4 0)) then 0
                    else 1}
    end
)) in 
        let tmp3 = (run xs) in 
            tmp3.1;

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

max1s = fix (
    \f: Int -> Int -> List -> Int. \ma: Int. \l: Int. \xs: List. 
    match xs with
      nil _ -> max ma l
    | cons {h, t} -> if (== h 0) then f (max ma l) 0 t
        else f ma (+ l 1) t
    end
) 0 0;

main = dac max1s;

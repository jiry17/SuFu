
Inductive List;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil unit, nil unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Int. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, -100, al_inf, al_inf}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {0, c0, c0, c0}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {if (or (and (<= tmp2.2 tmp1.4) (== tmp2.2 tmp2.3)) (== tmp1.2 0)) then + tmp2.1 tmp1.1
                    else + (+ 1 tmp2.1) tmp1.1, if (and (== tmp2.2 tmp1.2) (== tmp2.2 0)) then 0
                    else 1, tmp1.3, tmp2.4}
    end
)) in 
        let tmp3 = (run xs) in 
            tmp3.1;

inf = 100;

count10p = fix (
    \f: Bool -> Bool -> List -> Int. \s0: Bool. \s1: Bool. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let upd = (if (and s1 (== h 1)) then 1
        else 0) in 
            let s1 = (and (== h 0) (or s0 s1)) in 
                let s0 = (== h 1) in 
                    + upd (f s0 s1 t)
    end
) false false;

main = dac count10p;


Inductive List;

Inductive NList;

Inductive CNList;

cton = fix (
    \f: CNList -> NList. 
    let dec = (fix (
    \g: CNList -> CNList -> NList. \l: CNList. \c: CNList. 
    match c with
      sglt x -> ncons {x, f l}
    | cat {x, y} -> g (cat {y, l}) x
    end
)) in 
        \c: CNList. 
        match c with
          sglt x -> line x
        | cat {x, y} -> dec y x
        end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

range = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt w -> {w, w}
    | cons {h, t} -> 
        let res = (f t) in 
            {min h res.1, max h res.2}
    end
);

spec = fix (
    \f: NList -> {Int, Int}. \xs: NList. 
    match xs with
      line a -> range a
    | ncons {h, t} -> 
        let rh = (range h) in 
            let res = (f t) in 
                {min rh.1 res.1, max rh.2 res.2}
    end
);

target = fix (
    \f: CNList -> {Int, Int}. \c: CNList. 
    match c with
      sglt x -> 
        let info = (range x) in 
            let c0 = info.1 in 
                let c1 = info.2 in 
                    {c0, c1}
    | cat {l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                {min tmp2.1 tmp1.1, - (+ tmp2.2 tmp1.2) (min tmp2.2 tmp1.2)}
    end
);

main = \c: CNList. 
    let tmp3 = (target c) in 
        {tmp3.1, tmp3.2};

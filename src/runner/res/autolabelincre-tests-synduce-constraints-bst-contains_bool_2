
Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

@Input w = Int;

spec = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf x -> == x w
    | node {a, l, r} -> or (or (== a w) (f l)) (f r)
    end
);

target = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf x -> == x w
    | node {a, l, r} -> if (< w a) then let tmp2 = (f l) in 
            tmp2
        else let tmp4 = (f r) in 
            or (== a w) tmp4
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp5 = (target t) in 
        tmp5
    else false;

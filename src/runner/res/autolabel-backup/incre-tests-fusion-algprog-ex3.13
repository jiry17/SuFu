
Inductive List;

Inductive PList;

tri = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tail = (let tmp3 = (f t) in 
            {+ tmp3.1 tmp3.2, tmp3.2}) in 
            {tail.1, + tail.2 h}
    end
);

tsum = fix (
    \f: PList -> Int. \xs: PList. 
    match xs with
      pnil _ -> 0
    | pcons {n, h, t} -> + (* n h) (f t)
    end
);

main = \xs: List. 
    let tmp5 = (tri xs) in 
        tmp5.1;

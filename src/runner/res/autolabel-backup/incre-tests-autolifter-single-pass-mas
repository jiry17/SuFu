
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (and (< 0 (- (+ h tmp1.1) tmp1.2)) (< h tmp1.2)) then tmp1.1
            else if (< 0 (- (+ h tmp1.1) tmp1.2)) then - (+ h tmp1.1) tmp1.2
            else + (* -1 h) tmp1.2, if (< (- (+ h tmp1.1) tmp1.2) 0) then 0
            else - (+ h tmp1.1) tmp1.2}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mas = fix (
    \f: Int -> Int -> List -> Int. \p: Int. \np: Int. \xs: List. 
    match xs with
      nil _ -> max p np
    | cons {h, t} -> max (max p np) (f (+ (max np 0) h) (- (max p 0) h) t)
    end
) 0 0;

expected = fix (
    \f: Int -> Int -> List -> {Int, Int}. \p: Int. \np: Int. \xs: List. 
    match xs with
      nil _ -> {max p 0, max np 0}
    | cons {h, t} -> f (+ (max np 0) h) (- (max p 0) h) t
    end
) 0 0;

main = single_pass mas;


Inductive List;

TwoList = {List, List};

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> >= pre x
    | cons {h, t} -> and (>= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

is_sorted_pair = \p: TwoList. 
    and (is_sorted p.1) (is_sorted p.2);

find = \w: Int. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt x -> == x w
    | cons {h, t} -> or (== w h) (f t)
    end
);

spec = \p: TwoList. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt a -> find a p.1
    | cons {h, t} -> or (find h p.1) (f t)
    end
) p.2;

target = fix (
    \f: TwoList -> Bool. \p: TwoList. 
    match p with
      {elt a, elt b} -> 
        let c0 = (- a b) in 
            == c0 0
    | {elt a, cons {h, t}} -> if (> a h) then false
        else let res = (f {elt a, t}) in 
            let c0 = (- a h) in 
                or (== c0 0) res
    | {cons {h, t}, elt b} -> if (> b h) then false
        else let res = (f {t, elt b}) in 
            let c0 = (- b h) in 
                or (== c0 0) res
    | {cons {h1, t1}, cons {h2, t2}} -> if (== h1 h2) then true
        else if (> h1 h2) then let res = (f {t1, p.2}) in 
            res
        else let res = (f {p.1, t2}) in 
            res
    end
);

main = \p: TwoList. 
    if (is_sorted_pair p) then let tmp1 = (target p) in 
        tmp1
    else false;

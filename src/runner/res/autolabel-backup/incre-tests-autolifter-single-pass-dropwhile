
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            if (< 0 h) then 0
            else + 1 tmp1
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2;

inf = 100;

dropwhile = fix (
    \f: Int -> List -> Int. \i: Int. \xs: List. 
    match xs with
      nil _ -> i
    | cons {h, t} -> if (> h 0) then i
        else f (+ 1 i) t
    end
) 0;

main = single_pass dropwhile;


Inductive List;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil Unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil Unit, nil Unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> {Int, Int}. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int, Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0, 0, 0, 0}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {c0, 0, c0, c0, 1}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {if (and (< tmp1.1 tmp2.1) (< (+ tmp2.3 tmp1.4) tmp2.1)) then tmp2.1
                    else if (< (+ tmp2.3 tmp1.4) tmp1.1) then tmp1.1
                    else + tmp2.3 tmp1.4, if (and (< tmp2.3 (- tmp2.1 tmp1.4)) (< tmp1.1 tmp2.1)) then + tmp2.2 tmp1.5
                    else if (<= tmp2.3 (- tmp1.1 tmp1.4)) then tmp1.2
                    else + (* -1 tmp1.4) tmp1.5, if (< tmp1.3 tmp1.5) then tmp1.3
                    else + tmp2.3 tmp1.3, if (< tmp2.4 tmp2.5) then tmp2.4
                    else + tmp2.4 tmp1.4, + tmp2.5 tmp1.5}
    end
)) in 
        let tmp3 = (run xs) in 
            {tmp3.1, tmp3.2};

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

max1s_with_pos = fix (
    \f: Int -> Int -> List -> {Int, Int}. \pre: Int. \i: Int. \xs: List. 
    match xs with
      nil _ -> 
        let len = (- i pre) in 
            {len, pre}
    | cons {h, t} -> if (== h 1) then f pre (+ i 1) t
        else let len = (- i pre) in 
            let res = (f (+ i 1) (+ i 1) t) in 
                if (>= len res.1) then {len, pre}
                else res
    end
) 0 0;

main = dac max1s_with_pos;

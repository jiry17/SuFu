
Inductive List;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil Unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil Unit, nil Unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Int. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {al_inf, al_inf, al_inf}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {al_inf, c0, al_inf}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {if (< tmp1.1 tmp2.2) then tmp1.1
                    else if (and (< tmp2.3 tmp1.3) (< tmp1.2 tmp2.3)) then tmp2.3
                    else if (and (< tmp1.3 tmp2.2) (< tmp1.3 tmp1.1)) then tmp2.2
                    else if (< tmp2.1 tmp1.2) then tmp2.1
                    else if (< tmp1.2 tmp2.3) then tmp1.3
                    else tmp1.2, if (< tmp2.2 tmp1.2) then tmp2.2
                    else tmp1.2, if (and (< tmp1.2 tmp2.2) (< tmp2.2 tmp1.3)) then tmp2.2
                    else if (and (< tmp1.2 tmp2.3) (< tmp2.2 tmp1.3)) then tmp1.2
                    else if (< tmp2.2 tmp1.3) then tmp2.3
                    else tmp1.3}
    end
)) in 
        let tmp3 = (run xs) in 
            tmp3.1;

inf = 100;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (> a b) then a
    else b;

trdmin = \xs: List. 
    (fix (
    \f: List -> {Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {inf, inf, inf}
    | cons {h, t} -> 
        let res = (f t) in 
            {min res.1 (max res.2 h), min res.2 (max res.3 h), min res.3 h}
    end
) xs).1;

main = dac trdmin;

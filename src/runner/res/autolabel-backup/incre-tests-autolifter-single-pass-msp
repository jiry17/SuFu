
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {1, al_inf, -100}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (and (< tmp1.1 h) (< tmp1.3 tmp1.1)) then h
            else if (or (and (< (* tmp1.2 h) tmp1.1) (< (* tmp1.3 h) tmp1.1)) (al_error tmp1.2)) then tmp1.1
            else if (< h 0) then * tmp1.2 h
            else * tmp1.3 h, if (or (and (< 0 tmp1.2) (< h (* tmp1.2 h))) (and (< h (* tmp1.3 h)) (< h 0))) then h
            else if (< 0 h) then * tmp1.2 h
            else * tmp1.3 h, if (or (and (< 0 tmp1.2) (< (* tmp1.2 h) tmp1.2)) (and (< tmp1.3 h) (< (* tmp1.3 h) h))) then h
            else if (< h 0) then * tmp1.2 h
            else * tmp1.3 h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

msp = let mpp = (fix (
    \f: Int -> List -> Int. \pre: Int. \l: List. 
    match l with
      nil _ -> pre
    | cons {h, t} -> max pre (f (* h pre) t)
    end
) 1) in 
        fix (
        \f: List -> Int. \xs: List. 
        match xs with
          nil _ -> 1
        | cons {h, t} -> max (mpp xs) (f t)
        end
    );

main = single_pass msp;


Inductive BTree;

Inductive Zipper;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mpath = fix (
    \f: BTree -> Int. \t: BTree. 
    match t with
      empty _ -> 0
    | node {a, l, r} -> + a (max (f l) (f r))
    end
);

repr = fix (
    \f: Zipper -> Int. \z: Zipper. 
    match z with
      top _ -> 0
    | left {w, tree, zz} -> 
        let tw = (mpath tree) in 
            let tmp2 = (f zz) in 
                + w (max tw tmp2)
    | right {w, tree, zz} -> 
        let tw = (mpath tree) in 
            let tmp3 = (f zz) in 
                + w (max tw tmp3)
    end
);

main = \z: Zipper. 
    let tmp4 = (repr z) in 
        tmp4;

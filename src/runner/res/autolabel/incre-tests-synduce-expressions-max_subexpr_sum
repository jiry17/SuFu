
Inductive ArithExpr;

Inductive PsumExpr;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

repr = fix (
    \f: PsumExpr -> {Int, Int}. \e: PsumExpr. 
    match e with
      nint i -> {i, i}
    | nplus {e1, e2} -> 
        let tmp2 = (f e1) in 
            let tmp3 = (f e2) in 
                {if (and (< tmp3.1 tmp2.1) (< (+ tmp3.2 tmp2.2) tmp2.1)) then tmp2.1
                else if (< (+ tmp3.2 tmp2.2) tmp3.1) then tmp3.1
                else + tmp3.2 tmp2.2, + tmp3.2 tmp2.2}
    | nminus {e1, e2} -> 
        let tmp4 = (f e1) in 
            let tmp5 = (f e2) in 
                {if (< (- tmp4.2 tmp5.2) (max tmp5.1 tmp4.1)) then max tmp5.1 tmp4.1
                else - tmp4.2 tmp5.2, + (* -1 tmp5.2) tmp4.2}
    end
);

spec = \e: ArithExpr. 
    (fix (
    \f: ArithExpr -> {Int, Int}. \e: ArithExpr. 
    match e with
      int i -> {i, i}
    | plus {e1, e2} -> 
        let r1 = (f e1) in 
            let r2 = (f e2) in 
                let sum = (+ r1.1 r2.1) in 
                    let m = (max sum (max r1.2 r2.2)) in 
                        {sum, m}
    | minus {e1, e2} -> 
        let r1 = (f e1) in 
            let r2 = (f e2) in 
                let sum = (- r1.1 r2.1) in 
                    let m = (max sum (max r1.2 r2.2)) in 
                        {sum, m}
    end
) e).2;

main = \e: PsumExpr. 
    let tmp6 = (repr e) in 
        tmp6.1;


Inductive List;

Inductive Nat;

Inductive AList;

is_unique = let key_differ = (\key: Int. 
    fix (
    \f: AList -> Bool. \xs: AList. 
    match xs with
      anil _ -> true
    | acons {h, _, t} -> and (not (== h key)) (f t)
    end
)) in 
        fix (
        \f: AList -> Bool. \xs: AList. 
        match xs with
          anil _ -> true
        | acons {h, _, t} -> and (key_differ h t) (f t)
        end
    );

@Input w = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> if (== h w) then + 1 (f t)
        else f t
    end
);

repr = let repeat = (\w: Int. \suf: List. 
    fix (
    \f: Nat -> List. \n: Nat. 
    match n with
      z _ -> suf
    | s m -> cons {w, f m}
    end
)) in 
        fix (
        \f: AList -> List. \xs: AList. 
        match xs with
          anil _ -> nil unit
        | acons {h, n, t} -> repeat h (f t) n
        end
    );

n2i = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

target = let nat_repr = (fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> 
        let tmp2 = (f m) in 
            + 1 tmp2
    end
)) in 
        fix (
        \f: AList -> Int. \xs: AList. 
        match xs with
          anil _ -> 0
        | acons {h, n, t} -> if (== h w) then let tmp4 = (nat_repr n) in 
                tmp4
            else let tmp5 = (f t) in 
                tmp5
        end
    );

main = \xs: AList. 
    if (is_unique xs) then let tmp6 = (target xs) in 
        tmp6
    else 0;

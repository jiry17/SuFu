
Inductive Tree;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

@Input w = Int;

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf x -> if (< x w) then 1
        else 0
    | node {a, l, r} -> + (if (< a w) then 1
        else 0) (+ (f l) (f r))
    end
);

target = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf x -> 
        let c0 = (- x w) in 
            + (- (min 0 (- 1 c0)) (max 0 (+ c0 1))) (max 1 (+ c0 c0))
    | node {a, l, r} -> if (< a w) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + tmp3 (+ tmp2 1)
        else let tmp4 = (f l) in 
            tmp4
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp5 = (target t) in 
        tmp5
    else 0;


Inductive List;

Inductive IDList;

is_sorted = let aux = (fix (
    \f: Int -> IDList -> Bool. \pre: Int. \xs: IDList. 
    match xs with
      ielt x -> > pre x
    | icons {h, _, t} -> and (> pre h) (f h t)
    end
)) in 
        \xs: IDList. 
        match xs with
          ielt x -> true
        | icons {h, _, t} -> aux h t
        end
;

len = fix (
    \f: IDList -> Int. \xs: IDList. 
    match xs with
      ielt _ -> 1
    | icons {_, _, t} -> + 1 (f t)
    end
);

len_raw = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt _ -> 1
    | cons {_, t} -> + 1 (f t)
    end
);

is_indexed = fix (
    \f: IDList -> Bool. \xs: IDList. 
    match xs with
      ielt _ -> true
    | icons {_, id, t} -> and (== id (len xs)) (f t)
    end
);

add_index = fix (
    \f: List -> IDList. \xs: List. 
    match xs with
      elt a -> ielt a
    | cons {h, t} -> icons {h, len_raw xs, f t}
    end
);

drop_index = fix (
    \f: IDList -> List. \xs: IDList. 
    match xs with
      ielt a -> elt a
    | icons {h, _, t} -> cons {h, f t}
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (< x 0) then 1
        else 0
    | cons {h, t} -> + (f t) (if (< h 0) then 1
        else -1)
    end
);

target = fix (
    \f: IDList -> Int. \xs: IDList. 
    match xs with
      ielt x -> if (< x 0) then 1
        else 0
    | icons {h, idx, t} -> if (< h 0) then idx
        else let tmp1 = (f t) in 
            - tmp1 1
    end
);

main = \inp: IDList. 
    if (and (is_sorted inp) (is_indexed inp)) then let tmp2 = (target inp) in 
        tmp2
    else 0;

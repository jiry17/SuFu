
Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: Int -> Tree -> Int. \w: Int. \t: Tree. 
    match t with
      nil _ -> w
    | node {a, l, r} -> max a (f (f w r) l)
    end
) 0;

repr = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                if (and (< tmp3 a) (< tmp2 a)) then a
                else if (< tmp2 tmp3) then tmp3
                else tmp2
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        tmp4;

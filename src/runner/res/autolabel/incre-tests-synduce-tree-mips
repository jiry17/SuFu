
Inductive Tree;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \t: Tree. 
    (fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ a result.1, max result.2 (+ a result.1)} r
    end
) {0, 0} t).2;

repr = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      nil _ -> {0, 0}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {if (< (+ (- a tmp2.2) tmp3.1) tmp2.1) then tmp2.1
                else + (- a tmp2.2) tmp3.1, + (+ (* -1 a) tmp2.2) tmp3.2}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        tmp4.1;


Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {1, al_inf}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (and (< tmp1.2 0) (< h 0)) then * h tmp1.2
            else if (< h 1) then 1
            else * h tmp1.1, if (and (< tmp1.2 1) (< (* h tmp1.2) h)) then * h tmp1.2
            else if (< h 0) then * h tmp1.1
            else h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mpp = fix (
    \f: Int -> List -> Int. \pre: Int. \l: List. 
    match l with
      nil _ -> pre
    | cons {h, t} -> max pre (f (* h pre) t)
    end
) 1;

main = single_pass mpp;

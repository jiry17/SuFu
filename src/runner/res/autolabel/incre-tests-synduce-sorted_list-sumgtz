
Inductive List;

insert = \y: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> if (> y x) then cons {y, elt x}
        else cons {x, elt y}
    | cons {h, t} -> if (> y h) then cons {y, xs}
        else cons {h, f t}
    end
);

sort = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> elt x
    | cons {h, t} -> insert h (f t)
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (>= x 0) then x
        else 0
    | cons {h, t} -> if (>= h 0) then + h (f t)
        else 0
    end
);

target = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (< x 0) then 0
        else x
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            if (< tmp2 (+ h tmp2)) then + h tmp2
            else tmp2
    end
);

main = \xs: List. 
    let tmp3 = (target xs) in 
        tmp3;

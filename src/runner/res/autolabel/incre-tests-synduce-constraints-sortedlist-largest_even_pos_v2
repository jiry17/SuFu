
Inductive List;

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> >= pre x
    | cons {h, t} -> and (>= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

mod2 = \x: Int. 
    - x (* 2 (/ x 2));

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (and (== 0 (mod2 x)) (> x 0)) then x
        else 0
    | cons {h, t} -> if (and (== 0 (mod2 h)) (> h 0)) then max h (f t)
        else f t
    end
);

target = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt w -> - (+ (* 2 (max w 1)) (* 4 (mod2 (max 1 (- w 1))))) (* 2 (max w (+ 1 (+ 1 1))))
    | cons {h, t} -> if (<= h 0) then 0
        else let tmp1 = (f t) in 
            if (== 1 (mod2 h)) then tmp1
            else h
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target xs) in 
        tmp2
    else 0;


Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, -100}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            let c0 = (al_head t) in 
                {if (<= tmp1.2 c0) then tmp1.1
                else + h tmp1.1, if (== tmp1.2 1) then tmp1.2
                else h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

inf = 100;

count10p = fix (
    \f: Bool -> Bool -> List -> Int. \s0: Bool. \s1: Bool. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let upd = (if (and s1 (== h 1)) then 1
        else 0) in 
            let s1 = (and (== h 0) (or s0 s1)) in 
                let s0 = (== h 1) in 
                    + upd (f s0 s1 t)
    end
) false false;

main = single_pass count10p;


Inductive List;

Inductive IDList;

length = fix (
    \f: IDList -> Int. \xs: IDList. 
    match xs with
      inil _ -> 0
    | icons {_, _, t} -> + 1 (f t)
    end
);

is_indexed = fix (
    \f: IDList -> Bool. \xs: IDList. 
    match xs with
      inil _ -> true
    | icons {_, id, t} -> and (f t) (== id (length t))
    end
);

repr = fix (
    \f: IDList -> List. \m: IDList. 
    match m with
      inil _ -> nil Unit
    | icons {h, _, t} -> cons {h, f t}
    end
);

len = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + 1 (f t)
    end
);

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> if (> h (len t)) then + h (f t)
        else f t
    end
);

target = fix (
    \f: IDList -> {Int, Int}. \xs: IDList. 
    match xs with
      inil _ -> {0, 0}
    | icons {h, id, t} -> 
        let tmp1 = (f t) in 
            {if (<= h tmp1.2) then tmp1.1
            else + h tmp1.1, + tmp1.2 1}
    end
);

main = \m: IDList. 
    if (is_indexed m) then let tmp2 = (target m) in 
        tmp2.1
    else 0;

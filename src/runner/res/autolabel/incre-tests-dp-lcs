
Inductive List;

Plan = Int;

Inductive PlanList;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

extend = \w: Int. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {+ h 1, f t}
    end
);

generate = fix (
    \f: List -> List -> PlanList. \xs: List. \ys: List. 
    match {xs, ys} with
      {cons {h1, t1}, cons {h2, t2}} -> 
        let res1 = (merge (f t1 ys) (f xs t2)) in 
            if (== h1 h2) then merge (extend h1 (f t1 t2)) res1
            else res1
    | _ -> pcons {1, pnil Unit}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

one = 1;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 0
    | pcons {h, t} -> max (- h one) (f t)
    end
);

main = \xs: List. \ys: List. 
    get_best (generate xs ys);

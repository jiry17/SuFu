
Inductive List;

head = \xs: List. 
    match xs with
      elt {a, b} -> {a, b}
    | cons {a, b, t} -> {a, b}
    end
;

sorted = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt {a, b} -> < a b
    | cons {a, b, t} -> and (< a b) (and (< a (head t).1) (f t))
    end
);

inter = \a: Int. \b: Int. 
    fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt {c, d} -> and (not (< b c)) (not (> a d))
    | cons {c, d, t} -> or (f t) (and (not (< b c)) (not (> a d)))
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Bool, Int, Int}. \xs: List. 
    match xs with
      elt {a, b} -> {false, a, b}
    | cons {a, b, t} -> 
        let res = (f t) in 
            {or res.1 (inter a b t), a, b}
    end
) xs).1;

target = fix (
    \f: List -> {Bool, Int}. \xs: List. 
    match xs with
      elt _ -> 
        let c0 = (head xs).1 in 
            {false, c0}
    | cons {a, b, t} -> 
        let tmp1 = (f t) in 
            {or (<= tmp1.2 b) tmp1.1, a}
    end
);

main = \xs: List. 
    if (sorted xs) then let tmp2 = (target xs) in 
        tmp2.1
    else false;

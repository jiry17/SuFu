
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, - 0 al_inf}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (and (< h tmp1.1) (< (+ h tmp1.2) tmp1.1)) then tmp1.1
            else if (< tmp1.2 0) then h
            else + h tmp1.2, if (< h (+ h tmp1.2)) then + h tmp1.2
            else h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mss = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            let new_mps = (max 0 (+ h res.2)) in 
                {max new_mps res.1, new_mps}
    end
) xs).1;

main = single_pass mss;

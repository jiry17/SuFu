
Inductive List;

Inductive CList;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      cnil _ -> 0
    | single x -> 
        let c0 = x.1 in 
            let c1 = x.2 in 
                if (or (< x c0) (< c0 x)) then 0
                else c1
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                + tmp4 tmp3
    end
);

@Input x = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let key = h.1 in 
            let value = h.2 in 
                if (== x key) then + value (f t)
                else f t
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        tmp5;

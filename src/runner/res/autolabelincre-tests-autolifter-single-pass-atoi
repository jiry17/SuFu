
Inductive List;

base = 10;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            + h (* tmp1 base)
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2;

atoi = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + (* base (f t)) h
    end
);

main = single_pass atoi;


Inductive List;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil unit, nil unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Bool. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {- 0 al_inf, al_inf}
    | cons {_, nil _} -> 
        let c0 = (al_head xs) in 
            {c0, c0}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    {if (< tmp1.1 tmp2.1) then tmp2.1
                    else tmp1.1, tmp2.2}
    end
)) in 
        let tmp3 = (run xs) in 
            <= tmp3.1 tmp3.2;

inf = 100;

line_sight = fix (
    \f: Int -> List -> Bool. \ma: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, nil _} -> >= h ma
    | cons {h, t} -> if (> h ma) then f h t
        else f ma t
    end
) (- 0 inf);

main = dac line_sight;


Inductive ZipCList;

Inductive ZipList;

cat = fix (
    \f: ZipList -> ZipList -> ZipList. \xs: ZipList. \ys: ZipList. 
    match xs with
      nil _ -> ys
    | cons {a, b, t} -> cons {a, b, f t ys}
    end
);

repr = fix (
    \f: ZipCList -> Compress ZipList. \xs: ZipCList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single {a, b} -> 
        let tmp2 = (cons {a, b, nil Unit}) in 
            align (label tmp2 ) 
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                align (label (cat (unlabel tmp3 ) (unlabel tmp4 )) ) 
    end
);

spec = fix (
    \f: ZipList -> Int. \xs: ZipList. 
    match xs with
      nil _ -> 0
    | cons {a, b, t} -> if (== a b) then + 1 (f t)
        else f t
    end
);

main = \xs: ZipCList. 
    let tmp5 = (repr xs) in 
        align (spec (unlabel tmp5 )) ;

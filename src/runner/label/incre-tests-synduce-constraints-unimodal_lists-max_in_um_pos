
Inductive UList;

Inductive List;

repr = fix (
    \f: List -> UList -> List. \res: List. \xs: UList. 
    match xs with
      unil _ -> res
    | uelt x -> cons {x, res}
    | usplit {x, a, b, y} -> f (cons {a, cons {b, f res y}}) x
    end
) (nil Unit);

is_unimodal = let aux_down = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      nil _ -> >= pre 0
    | cons {h, t} -> and (>= pre 0) (and (> pre h) (f h t))
    end
)) in 
        let aux_up = (fix (
        \f: Int -> List -> Bool. \pre: Int. \xs: List. 
        match xs with
          nil _ -> >= pre 0
        | cons {h, t} -> and (>= pre 0) (if (< pre h) then f h t
            else aux_down h t)
        end
    )) in 
            \xs: List. 
            match xs with
              nil _ -> true
            | cons {h, t} -> aux_up h t
            end
;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> max h (f t)
    end
);

target = fix (
    \f: UList -> Compress UList. \xs: UList. 
    match xs with
      unil _ -> 
        let tmp1 = (unil Unit) in 
            align (label tmp1 ) 
    | uelt x -> 
        let tmp2 = (uelt x) in 
            align (label tmp2 ) 
    | usplit {x, a, b, y} -> 
        let tmp3 = (f x) in 
            let tmp4 = (f y) in 
                align (label (usplit {unlabel tmp3 , a, b, unlabel tmp4 }) ) 
    end
);

main = \xs: UList. 
    if (is_unimodal (repr xs)) then let tmp5 = (target xs) in 
        align (spec (repr (unlabel tmp5 ))) 
    else 0;

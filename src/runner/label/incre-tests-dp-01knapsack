
Item = {Int, Int};

Inductive ItemList;

Plan = ItemList;

Inductive PlanList;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

step = \i: Item. 
    fix (
    \f: PlanList -> PlanList. \ps: PlanList. 
    match ps with
      consPlan {p, t} -> 
        let res = (f t) in 
            consPlan {align (label (cons {i, unlabel p }) ) , consPlan {p, res}}
    | nilPlan _ -> ps
    end
);

gen = fix (
    \f: ItemList -> PlanList. \items: ItemList. 
    match items with
      cons {i, t} -> 
        let res = (f t) in 
            step i res
    | nil _ -> consPlan {let tmp1 = (nil Unit) in 
            align (label tmp1 ) , nilPlan Unit}
    end
);

getbest = let sumw = (fix (
    \f: ItemList -> Int. \xs: ItemList. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h.1 (f t)
    end
)) in 
        let sumv = (fix (
        \f: ItemList -> Int. \xs: ItemList. 
        match xs with
          nil _ -> 0
        | cons {h, t} -> + h.2 (f t)
        end
    )) in 
            \lim: Int. 
            fix (
            \f: PlanList -> Int. \ps: PlanList. 
            match ps with
              consPlan {p, t} -> 
                let res = (f t) in 
                    if (< lim (align (sumw (unlabel p )) )) then res
                    else max (align (sumv (unlabel p )) ) res
            | nilPlan _ -> 0
            end
        );

knapsack = \w: Int. \is: ItemList. 
    getbest w (gen is);


Inductive List;

Inductive Graph;

Inductive Path;

Plan = Compress Path;

Inductive PlanList;

graph_size = fix (
    \f: Graph -> Int. \g: Graph. 
    match g with
      gnil _ -> 0
    | gcons {h, t} -> + 1 (f t)
    end
);

length = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + 1 (f t)
    end
);

is_valid_graph = \g: Graph. 
    let size = (graph_size g) in 
        fix (
        \f: Graph -> Bool. \g: Graph. 
        match g with
          gnil _ -> true
        | gcons {h, t} -> if (== size (length h)) then true
            else f t
        end
    ) g;

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

generate = \g: Graph. 
    let size = (graph_size g) in 
        fix (
        \f: Graph -> Int -> Int -> Plan -> PlanList. \graph: Graph. \now: Int. \next: Int. \path: Plan. 
        match graph with
          gnil _ -> pnil Unit
        | gcons {edges, remain} -> if (< now next) then f remain (+ now 1) next path
            else if (== now (- size 1)) then pcons {path, pnil Unit}
            else fix (
            \g: List -> Int -> PlanList. \xs: List. \i: Int. 
            match xs with
              nil _ -> pnil Unit
            | cons {w, t} -> if (or (<= i now) (== w -1)) then g t (+ i 1)
                else merge (g t (+ i 1)) (f remain (+ now 1) i (align (label (continue {now, i, w, unlabel path }) ) ))
            end
        ) edges 0
        end
    ) g 0 0 (let tmp1 = (fin Unit) in 
            align (label tmp1 ) );

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

inf = 100;

get_best = let eval = (fix (
    \f: Path -> Int. \xs: Path. 
    match xs with
      fin _ -> 0
    | continue {a, b, w, t} -> + w (f t)
    end
)) in 
        fix (
        \f: PlanList -> Int. \xs: PlanList. 
        match xs with
          pnil _ -> inf
        | pcons {h, t} -> min (align (eval (unlabel h )) ) (f t)
        end
    );

main = \g: Graph. 
    if (is_valid_graph g) then get_best (generate g)
    else 0;

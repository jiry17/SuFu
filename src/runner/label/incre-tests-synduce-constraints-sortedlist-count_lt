
Inductive List;

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> <= pre x
    | cons {h, t} -> and (<= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

@Input w = Int;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt a -> if (< a w) then 1
        else 0
    | cons {h, t} -> + (if (< h w) then 1
        else 0) (f t)
    end
);

target = fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      elt w -> 
        align (label xs ) 
    | cons {h, t} -> if (< h w) then let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
        else align (label xs ) 
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target xs) in 
        align (spec (unlabel tmp2 )) 
    else 0;

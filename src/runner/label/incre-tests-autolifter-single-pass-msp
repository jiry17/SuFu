
Inductive List;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        align (label xs ) 
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            align (v (unlabel tmp2 )) ;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

msp = let mpp = (fix (
    \f: Int -> List -> Int. \pre: Int. \l: List. 
    match l with
      nil _ -> pre
    | cons {h, t} -> max pre (f (* h pre) t)
    end
) 1) in 
        fix (
        \f: List -> Int. \xs: List. 
        match xs with
          nil _ -> 1
        | cons {h, t} -> max (mpp xs) (f t)
        end
    );

main = single_pass msp;

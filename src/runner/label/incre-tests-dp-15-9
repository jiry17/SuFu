
Inductive List;

Inductive Tree;

Plan = Compress Tree;

Inductive PlanList;

snoc = \w: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> cons {w, nil Unit}
    | cons {h, t} -> cons {h, f t}
    end
);

merge = fix (
    \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
    match xs with
      pnil _ -> ys
    | pcons {h, t} -> pcons {h, f t ys}
    end
);

combine = let combine_single = (\l: Plan. 
    fix (
    \f: PlanList -> PlanList. \xs: PlanList. 
    match xs with
      pnil _ -> xs
    | pcons {h, t} -> pcons {align (label (node {unlabel l , unlabel h }) ) , f t}
    end
)) in 
        fix (
        \f: PlanList -> PlanList -> PlanList. \xs: PlanList. \ys: PlanList. 
        match xs with
          pnil _ -> xs
        | pcons {h, t} -> merge (combine_single h ys) (f t ys)
        end
    );

generate = fix (
    \f: List -> PlanList. \xs: List. 
    match xs with
      nil _ -> pnil Unit
    | cons {h, nil _} -> pcons {let tmp1 = (leaf h) in 
            align (label tmp1 ) , pnil Unit}
    | cons {h, t} -> fix (
        \g: List -> List -> PlanList. \l: List. \r: List. 
        let res = (combine (f l) (f r)) in 
            match r with
              cons {_, nil _} -> res
            | cons {rh, rt} -> merge res (g (snoc rh l) rt)
            end
    ) (cons {h, nil Unit}) t
    end
);

eval = \xs: Tree. 
    (fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf w -> {0, w}
    | node {l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                {+ (+ lres.1 lres.2) (+ rres.1 rres.2), + lres.2 rres.2}
    end
) xs).1;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

get_best = fix (
    \f: PlanList -> Int. \xs: PlanList. 
    match xs with
      pnil _ -> 1000
    | pcons {h, t} -> min (align (eval (unlabel h )) ) (f t)
    end
);

main = \xs: List. 
    get_best (generate xs);

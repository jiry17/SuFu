
Inductive List;

Inductive NList;

inf = 100;

map = \f: List -> Int. 
    fix (
    \g: NList -> Compress List. \xs: NList. 
    match xs with
      nnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | ncons {h, t} -> 
        let tmp2 = (f h) in 
            let tmp3 = (g t) in 
                align (label (cons {tmp2, unlabel tmp3 }) ) 
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

minimum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> inf
    | cons {h, t} -> min h (f t)
    end
);

maximum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> - 0 inf
    | cons {h, t} -> max h (f t)
    end
);

main = \xs: NList. 
    let tmp4 = (map maximum xs) in 
        align (minimum (unlabel tmp4 )) ;

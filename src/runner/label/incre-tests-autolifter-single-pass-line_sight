
Inductive List;

single_pass = \v: List -> Bool. 
    let run = (fix (
    \f: List -> Compress List. \xs: List. 
    match xs with
      nil _ -> 
        align (label xs ) 
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            align (label (cons {h, unlabel tmp1 }) ) 
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            align (v (unlabel tmp2 )) ;

inf = 100;

line_sight = fix (
    \f: Int -> List -> Bool. \ma: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, nil _} -> >= h ma
    | cons {h, t} -> if (> h ma) then f h t
        else f ma t
    end
) (- 0 inf);

main = single_pass line_sight;

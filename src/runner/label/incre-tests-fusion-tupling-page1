
Inductive Tree;

Inductive List;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

depth = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> 0
    | node {l, r} -> + 1 (max (f l) (f r))
    end
);

deepest = fix (
    \f: Tree -> {List, Compress Tree}. \t: Tree. 
    match t with
      leaf w -> {cons {w, nil Unit}, align (label t ) }
    | node {l, r} -> 
        let lres = (f l) in 
            let rres = (f r) in 
                if (> (let tmp1 = lres.2 in 
                    align (depth (unlabel tmp1 )) ) (let tmp2 = rres.2 in 
                    align (depth (unlabel tmp2 )) )) then {lres.1, align (label t ) }
                else if (== (let tmp3 = lres.2 in 
                    align (depth (unlabel tmp3 )) ) (let tmp4 = rres.2 in 
                    align (depth (unlabel tmp4 )) )) then {cat lres.1 rres.1, align (label t ) }
                else {rres.1, align (label t ) }
    end
);

main = \t: Tree. 
    (deepest t).1;

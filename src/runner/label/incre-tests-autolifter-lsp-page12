
Inductive List;

head = \x: List. \default: Int. 
    match x with
      cons {h, t} -> h
    | _ -> default
    end
;

fold = \f: Int -> Int -> Int. \x: List. \w0: Int. 
    fix (
    \g: List -> Int. \x: List. 
    match x with
      cons {h, t} -> f h (g t)
    | _ -> w0
    end
) x;

length = \x: List. 
    fold (\a: Int. \b: Int. 
    + b 1) x 0;

sum = \x: List. 
    fold (\a: Int. \b: Int. 
    + a b) x 0;

lim = 10;

minimum = \x: List. 
    fold (\a: Int. \b: Int. 
    if (< a b) then a
    else b) x 0;

pushback = fix (
    \f: List -> Int -> List. \x: List. \a: Int. 
    match x with
      cons {h, t} -> cons {h, f t a}
    | nil _ -> cons {a, nil Unit}
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tail = \x: List. 
    match x with
      cons {h, t} -> t
    | nil _ -> x
    end
;

lsp = \pred: List -> Bool. \x: List. 
    fix (
    \f: List -> List -> Compress List -> Int -> Int. \l: List. \suf: List. \lpre: Compress List. \res: Int. 
    let len = (align (length (unlabel lpre )) ) in 
        if (or (== len 0) (align (pred (unlabel lpre )) )) then match l with
          cons {h, t} -> f t suf (align (label (pushback (unlabel lpre ) h) ) ) (max res len)
        | nil _ -> max res len
        end

        else match suf with
          cons {h, t} -> f l t (align (label (tail (unlabel lpre )) ) ) res
        end
) x x (let tmp1 = (nil Unit) in 
        align (label tmp1 ) ) 0;

isvalid = \x: List. 
    < (sum x) lim;

run = \x: List. 
    if (< (minimum x) 0) then 0
    else lsp isvalid x;

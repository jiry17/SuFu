
Inductive Tree;

Inductive PTree;

Inductive PList;

repr = fix (
    \f: PTree -> Compress Tree. \pt: PTree. 
    match pt with
      pleaf _ -> 
        let tmp1 = (leaf Unit) in 
            align (label tmp1 ) 
    | pnode {a, xs} -> 
        let l2t = (fix (
        \g: PList -> Compress Tree. \xs: PList. 
        match xs with
          pnil _ -> 
            let tmp2 = (leaf Unit) in 
                align (label tmp2 ) 
        | pcons {h, t} -> 
            let tmp3 = 0 in 
                let tmp4 = (f h) in 
                    let tmp5 = (g t) in 
                        align (label (node {tmp3, unlabel tmp4 , unlabel tmp5 }) ) 
        end
    )) in 
            let tmp6 = (leaf Unit) in 
                let tmp7 = (l2t xs) in 
                    align (label (node {a, tmp6, unlabel tmp7 }) ) 
    end
);

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf _ -> 0
    | node {a, l, r} -> + a (+ (f l) (f r))
    end
);

main = \x: PTree. 
    let tmp8 = (repr x) in 
        align (spec (unlabel tmp8 )) ;


Inductive CList;

Inductive List;

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = fix (
    \f: CList -> Compress List. \cl: CList. 
    match cl with
      cnil _ -> 
        let tmp1 = (nil Unit) in 
            align (label tmp1 ) 
    | single h -> 
        let tmp2 = (cons {h, nil Unit}) in 
            align (label tmp2 ) 
    | concat {l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                align (label (cat (unlabel tmp3 ) (unlabel tmp4 )) ) 
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max 0 (+ res.1 h), + res.2 h}
    end
) xs).1;

@Start main = \cl: CList. 
    let tmp5 = (repr cl) in 
        align (spec (unlabel tmp5 )) ;

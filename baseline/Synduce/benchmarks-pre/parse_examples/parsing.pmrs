// Type alias
type r = int
// Basic parametric type
type 'a x = 'a
// Basic sum type
type oneortwo = One | Two
// Parametric recursive type
type 'a option = None | Some of 'a
// List
type 'a list = Nil | Cons of 'a * 'a list
// Option list
type 'a olist = ONil | OCons of 'a option * 'a option list
// Function type
type 'a func = SomeF of 'a -> 'a | NoneF

// Functions declarations
let f x y = x + y
let g x y z = x + y * z % 3
let h x y = x + y % 2 = 0 ? x : max y 2

let x = (fun x -> x + x) 1

// Pattern matching recursion scheme declaration
pmrs (f0, oplus) test x =
    main x -> g x
    | g Nil -> f0
    | g Cons(hd, tl) -> oplus (g tl) hd

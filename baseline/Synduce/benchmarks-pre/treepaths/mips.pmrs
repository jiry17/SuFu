// The type of labelled binary trees
type 'a btree = Empty | Node of 'a * 'a btree * 'a btree
// Zipper for labelled binary trees
type sel = Left | Right
type 'c zipper = Top | Zip of sel * 'c * 'c btree * 'c zipper

pmrs spec { fun (x,y) -> y >= 0 && y >= x }  =
    main t -> mips (0,0) t
    | mips s Empty -> s
    | mips s (Node(a,l,r)) ->
        let sum1, m1 = mips s l in
        mips (sum1 + a, max (sum1 + a) m1) r


pmrs (s0, joinl, joinr) target =
    main Top -> s0
    | main Zip(Left, a, child, z) -> joinl a (spec child) (main z)
    | main Zip(Right, a, child, z) -> joinr a (spec child) (main z)

pmrs repr =
    repr Top -> Empty
    | repr Zip(w, val, child, z) -> h val child z w
    | h val child z Left -> Node (val, child, repr z)
    | h val child z Right -> Node (val, repr z, child)

// The type of labelled binary trees
type 'a btree = Empty | Node of 'a * 'a btree * 'a btree
// Zipper for labelled binary trees
type sel = Left | Right
type 'c zipper = Top | Zip of sel * 'c * 'c btree * 'c zipper


pmrs spec =
    mpath Empty -> 0
    | mpath Node(a, l, r) -> a + (max (mpath l) (mpath r))

pmrs (jleft, jright) target =
    main Top -> 0
    | main Zip(x, a, child, z) -> deci a child z x
    | deci a child z Left ->  jleft a (spec child) (main z)
    | deci a child z Right -> jright a (spec child) (main z)

pmrs repr =
    main Top -> Empty
    | main Zip(w, val, child, z) -> h val child z w
    | h val child z Left -> Node (val, child, main z)
    | h val child z Right -> Node (val, main z, child)

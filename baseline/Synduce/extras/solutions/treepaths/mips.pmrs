
let s0  = (0, 0)

let joinl x12 (x130, x131) (x140, x141) =
  (x12 + (x130 + x140), max x131 (x12 + (x130 + x141)))

let joinr x18 (x190, x191) (x200, x201) =
  (x18 + (x190 + x200), max x201 (x18 + (x191 + x200)))

 target⟨s0, joinl, joinr⟩(): int zipper -> (int * int)  = 
{
  ‣ main  Top  ⟹  s0
  ‣ main  Zip(Left, a, child, z)  ⟹  joinl a (spec child) (main z)
  ‣ main  Zip(Right, a, child, z)  ⟹  joinr a (spec child) (main z)
  
  }
